{"meta":{"title":"Yang's Blog","subtitle":"顺境内敛 逆境不屈","description":null,"author":"Elijah Yang","url":"https://elijahyg.github.io","root":"/"},"pages":[{"title":"Repositories","date":"2019-09-16T16:02:48.450Z","updated":"2019-09-14T12:40:03.724Z","comments":false,"path":"repository/index.html","permalink":"https://elijahyg.github.io/repository/index.html","excerpt":"","text":""},{"title":"Links","date":"2019-09-16T16:04:51.635Z","updated":"2019-09-16T16:04:51.619Z","comments":true,"path":"links/index.html","permalink":"https://elijahyg.github.io/links/index.html","excerpt":"","text":""},{"title":"All Categories","date":"2019-09-15T15:53:10.129Z","updated":"2019-09-15T15:53:10.113Z","comments":false,"path":"categories/index.html","permalink":"https://elijahyg.github.io/categories/index.html","excerpt":"","text":""},{"title":"Book list","date":"2019-09-16T15:49:06.210Z","updated":"2019-09-16T15:49:06.192Z","comments":false,"path":"books/index.html","permalink":"https://elijahyg.github.io/books/index.html","excerpt":"","text":"douban 豆瓣书单douban: user: Yang # 豆瓣用户名 start: 0 # 从哪一条记录开始 count: 100 # 获取豆瓣书单数据条数"},{"title":"About Me","date":"2019-09-13T16:03:11.000Z","updated":"2019-09-16T16:02:39.887Z","comments":false,"path":"about/index.html","permalink":"https://elijahyg.github.io/about/index.html","excerpt":"","text":"进击的处女座菜鸟程序员"},{"title":"All Tags","date":"2019-09-15T15:23:03.403Z","updated":"2019-09-15T15:23:03.395Z","comments":false,"path":"tags/index.html","permalink":"https://elijahyg.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Python数据类型之数字","slug":"Python数据类型之数字","date":"2019-10-11T09:19:25.000Z","updated":"2019-10-11T09:21:44.031Z","comments":true,"path":"2019/10/11/Python数据类型之数字/","link":"","permalink":"https://elijahyg.github.io/2019/10/11/Python数据类型之数字/","excerpt":"","text":"数字类型(integer)整型(int)在32位机器上，整数的位数为32位，取值范围为-2**31～2**31-1，即-2147483648～2147483647在64位系统上，整数的位数为64位，取值范围为-2**63～2**63-1，即-9223372036854775808～9223372036854775807 长整型(long)和C语言不同，Python的长整数没有指定位宽，即：Python没有限制长整数数值的大小，但实际上由于机器内存有限，我们使用的长整数数值不可能无限大。自从Python2.2起，如果整数发生溢出，Python会自动将整数数据转换为长整数，所以如今在长整数数据后面不加字母L也不会导致严重后果了。 1234# 在python2.x 中（python3.x中没有长整型的概念）：&gt;&gt;&gt; num=2L&gt;&gt;&gt; type(num) &lt;type 'long'&gt; 浮点型(float)浮点数用来处理实数，也就是带有小数的数字。类似于C语言中的double类型，占8个字节（64位），其中52位表示底，11位表示指数，剩下的一位表示符号。 复数(complex)复数由实数部分和虚数部分组成，一般形式为x＋yj，其中的x是复数的实数部分，y是复数的虚数部分，这里的x和y都是实数。 12345&gt;&gt;&gt; x=1-2j&gt;&gt;&gt; x.real1.0&gt;&gt;&gt; x.imag-2.0 进制转换1234bin(var) # 把变量转换为2进制oct(var) # 把变量转换为8进制int(var) # 把变量转换为10进制hex(var) # 把变量转换为16进制 小知识点 Python中存在小数字池：-5 ～ 256，即[-5,257] Python对小整数的定义是[-5,257]这些整数对象是提前建立好的，不会被垃圾回收。在一个Python的程序中，所有位于这个范围内的整数使用的都是同一个对象。同理，单个字母也是这样的。 在一般情况下当变量被赋值后，内存和变量的关系如下： 123# 方式一n1 = 123n2 = 123 123# 方式二n1 = 123n2 = n1 由于python内的优化机制，不论是2.x还是3.x都存在，在-5~257之间的数，如果使用第一种赋值方式，那么他们依然属于同一块内存 1print(id(n1)) # 查看变量的内存地址","categories":[{"name":"Python系列","slug":"Python系列","permalink":"https://elijahyg.github.io/categories/Python系列/"}],"tags":[]},{"title":"python IDE介绍 & 环境搭建","slug":"python IDE介绍&环境搭建","date":"2019-09-24T16:18:12.000Z","updated":"2019-09-28T15:51:37.545Z","comments":true,"path":"2019/09/25/python IDE介绍&环境搭建/","link":"","permalink":"https://elijahyg.github.io/2019/09/25/python IDE介绍&环境搭建/","excerpt":"","text":"Python2.x VS Python3.x为什么会有Python3.x相信但凡接触过python语言的朋友在接触之初会有“到底用python2还是python3？”的纠结。其实我也有这方面的疑问，为什么python的核心团队不能统一一下呢？非要搞个2.x和3.x，而且3.x还不能向下兼容，这中操作让曾经已经用python2.x编写完成的项目情何以堪，还要费神费力去升级成python3.x，到底是什么因素导致必须要重构python核心内容呢？通过多方调查，终于在Python的核心成员Brett Cannon的文章中略知其中一二。首先，我们先来看以下下面这个字符串表示什么意思？ 1'abcd' 一目了然，代表由字母’a’、’b’、’c’、’c’组成的字符串，但是，如果你是个python2的使用者，你也可能会说代表ASCII码对应的数值97、98、99、100，至此，大家就会看出问题了，那在python2.x中，字符串默认是以ASCII码的形式呈现的，这样的设计就会产生我们上面这样的歧义。正如python之禅中所说”there should be one – and preferably only one – obvious way to do it”，对于python的代码，应该做到一种呈现只对应一种可能，而上述例子中显然就违背了这样的原则。而这种歧义的产生，不单单是违背了语言的设计初衷，更严重的是这种歧义会在程序的开发中让人抓狂，因为对于字符串而言，开发者必须时刻清楚的知道它代表的到底是字符串还是二进制的数据，否则对于大型程序而言，后果不堪设想。相信上面的内容会让大家清楚Python2.x所存在的重大缺陷，但是我们的问题依然没有得到很好的回答，我们还会抱有疑问“那为什么不在最开始设计的时候就避免出现这种缺陷呢？一定要在之后再做这种不兼容的修复？”，这就要回到python的诞生了，Guido于1989年12月开始对Python进行编码，并于1991年2月首次以开源形式发布。而Unicode标准的第一卷是在1991年10月发布的，这说明python在设计之初并没有所谓的unicode和ASCII编码的问题，但是随着python的应用程度越来越广泛，ASCII码已经不能满足其需要，而且unicode编码的应用和推广也越来越广泛，python2的缺陷也就显得越来越不可调和，最终导致核心团队必须将其升级来修复这个致命的问题。多说一句，针对为什么python3不向下兼容的问题，Brett Cannon是这样说的，python的核心团队在设计推广python3的时候以为python社区会针对python2进行bugfix，同时转到python3，但是事实并未如此，核心团队也吃一堑长一智，并保证今后不会再有类似的不可兼容的更新升级了。 官方对于Python2.x和Python3.x的总结In summary : Python 2.x is legacy, Python 3.x is the present and future of the language Python 3.0 was released in 2008. The final 2.x version 2.7 release came out in mid-2010, with a statement of extended support for this end-of-life release. The 2.x branch will see no new major releases after that. 3.x is under active development and has already seen over five years of stable releases, including version 3.3 in 2012, 3.4 in 2014, and 3.5 in 2015. This means that all recent standard library improvements, for example, are only available by default in Python 3.x. Guido van Rossum (the original creator of the Python language) decided to clean up Python 2.x properly, with less regard for backwards compatibility than is the case for new releases in the 2.x range. The most drastic improvement is the better Unicode support (with all text strings being Unicode by default) as well as saner bytes/Unicode separation. Besides, several aspects of the core language (such as print and exec being statements, integers using floor division) have been adjusted to be easier for newcomers to learn and to be more consistent with the rest of the language, and old cruft has been removed (for example, all classes are now new-style, “range()” returns a memory efficient iterable, not a list as in 2.x). Python IDE介绍Pycharm http://www.jetbrains.com/pycharm/download/ Pycharm是由JetBrains公司推出的一款专门针对python开发者的IDE，秉承JetBrains的一贯风格，Pycharm具有调试、语法高亮、项目管理、代码跳转、智能提示、自动完成、单元测试、版本控制等基本功能。同时Pycharm对于Django、Flask等常用Web框架也做到了很好的支持。需要重点提出的是Pycharm还支持IronPython解释器。 Sublime https://www.sublimetext.com/3 ‘A sophisticated text editor for code, markup and prose.’这是Sublime对自己的定位，不得不说sublime的强大、轻量和便捷。相比Pycharm等其他IDE的庞大，sublime作为一种“记事本”类型的IDE，深受追求简洁的开发者的热爱，同时轻量并不代表功能简单，其拥有的各种插件也是没有找不到，只有想不到。相信只要用过sublime的人就一定不会舍弃他。 Visual Studio Code https://code.visualstudio.com/ VS code也是一款极为优秀的IDE。这款IDE拥有丰富的python扩展工具以便开发者可以更高效的进行项目的开发，包括代码静态分析语法自动不全、科学计算工具，与Jupyter 等工具的集成，重构，单元测试，调试等等。 Eclipse + Pydev https://www.eclipse.org/ide/ 使用这种搭配的开发者基本上已经是个经验丰富的developer了，或者更明确的说很可能是一名Java开发老手，Eclipse这款IDE更广泛的被众多Java开发者所使用，如果已经习惯了Eclipse的操作，可以配以Pydev进行python项目的开发，可以在Eclipse中点击Help→Install new Software，添加pydev的安装地址：http://pydev.org/updates/，获取python的相关套件。具体操作方法请自行查阅，不过多赘述。 其他当然python作为一种世界的编程语言，更何况现在的发展势头越来越火，IDE作为方便开发者的工具更是必不可少，以上只是介绍了极为有限的几款比较热门的python开发IDE，更多的python开发IDE请参阅：https://wiki.python.org/moin/PythonEditors Python开发环境搭建两种python虚拟环境工具介绍virtualenv https://virtualenv.pypa.io/en/latest/# 基本介绍virtualenv是用于创建隔离的Python环境，以达到不同的项目环境互不影响的目的。 virtualenv安装与使用 1234567891011121314151617181、pip安装virtualenv&gt;&gt;&gt; pip install virtualenv2、验证安装是否成功&gt;&gt;&gt; virtualenv --version3、为项目创建隔离的python&gt;&gt;&gt; cd python_project&gt;&gt;&gt; virtualenv python_project_env # 这样是使用默认python解释器创建出来的项目4、也可以指定python解释器创建项目&gt;&gt;&gt; virtualenv -p /usr/bin/python3.7 python3_project_env5、以上就完成了python虚拟环境的创建，该环境是一个独立的python运行环境，我们在需要使用该环境时可以将其激活&gt;&gt;&gt; source python_project_env/bin/activate6、退出虚拟环境&gt;&gt;&gt; deactivate pipenv https://pypi.org/project/pipenv/ 基本介绍pipenv 是 Pipfile 、requests 作者 Kenneth Reitz 写的一个命令行工具，主要包含了Pipfile、pip、click、requests和virtualenv。Pipfile和pipenv本来都是Kenneth Reitz的个人项目，后来贡献给了pypa组织。Pipfile是社区拟定的依赖管理文件，用于替代过于简陋的 requirements.txt 文件。Pipfile的基本理念是：Pipfile 文件是 TOML 格式而不是 requirements.txt 这样的纯文本。一个项目对应一个 Pipfile，支持开发环境与正式环境区分。默认提供 default 和 development 区分。提供版本锁支持，存为 Pipfile.lock。 pipenv安装与使用 123456789101112131415161718192021221、pip安装pipenv&gt;&gt;&gt; pip install pipenv2、验证安装是否成功&gt;&gt;&gt; pipenv --version3、切换到项目目录&gt;&gt;&gt; cd python_project4、创建虚拟环境，可以指定用python2 或者 python3作为当前虚拟环境的python版本&gt;&gt;&gt; pipenv --two&gt;&gt;&gt; pipenv --three&gt;&gt;&gt; pipenv --python 3.7 # 也可以指定Python版本来创建虚拟环境4、激活当前虚拟环境&gt;&gt;&gt; pipenv shell5、在虚拟环境下给项目安装需要的模块，并将其写入到pipfile&gt;&gt;&gt; pipenv install django=1.11.116、退出虚拟环境&gt;&gt;&gt; exit pipenv其他常用操作 12345678910111213141516171819201、查看项目位置&gt;&gt;&gt; pipenv --where2、查看虚拟环境位置&gt;&gt;&gt; pipenv --venv3、查看解释器信息&gt;&gt;&gt; pipenv --py4、查看包的依赖结构&gt;&gt;&gt; pipenv graph5、卸载模块&gt;&gt;&gt; pipenv uninstall django6、卸载全部包并从Pipfile中移除&gt;&gt;&gt; pipenv uninstall --all7、检查安全漏洞&gt;&gt;&gt; pipenv check Windows下Python环境搭建与大多数UNIX系统和服务不同，Windows系统没有预安装Python。为了使Python可用，很多年来CPython 团队已经编译了每一个 release 的Windows安装程序（MSI 包）。这些安装程序主要用于每个用户单独安装Python时，添加核心解释器和库。安装程序还可以为一台机器的所有用户安装，并且可以为应用程序本地分发提供单独的zip文件。 安装包种类 https://www.python.org/downloads/ 32位/64位Python2.x安装包 32位/64位Python3.x安装包 web installer（网络安装包）是一个小的初始化工具，它将在安装过程中，根据需要自动下载所需的组件。 offline installer（离线安装包）内含默认安装所需的组件，可选择功能仍需要Internet连接下载 官网下载python安装包 此处以安装64位python3.x为例 如果选择立即安装： 不需要管理员权限 Python将安装到用户目录中 将根据第一页底部的选项安装 将安装标准库，测试套件，启动器和pip 如果选择将安装目录将添加到 PATH 快捷方式仅对当前用户可见 如果选择自定义安装： 要安装的功能 安装位置 其他选项或安装后的操作。 如果要安装调试符号或二进制文件，需要使用此选项。 ☆无UI安装 要完全隐藏安装程序UI并静默安装Python，可以使用 /quiet 选项。 要跳过用户交互但仍然显示进度和错误，可以使用 /passive 选项。 可以通过 /uninstall 选项立即开始删除Python，即不会显示任何提示。 例如，要以静默方式全局安装默认的Python，使用以下命令: 1python-3.7.4.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0 验证安装 在命令行输入python --version以验证是否安装成功 Linux(CentOS7.x)下Python环境搭建由于CentOS等大多数Linux发行版中默认安装了python2.7版本，但是对于python开发者而言python3.x的许多特性才是未来，所以本文介绍如何在CentOS7.x操作系统下安装python3.x。 安装依赖包 在CentOS系统中安装python需要 GCC 编译器和 make 编译工具，其包含在 Development tools 软件组中，所以需要安装Development tools 软件组。 1sudo yum groupinstall \"Development tools\" Python3.x 源文件使用 zlib 格式打包，所以需要安装 zlib 软件包,同时python在编译安装时需要使用 zlib 的头文件和链接库，所以需要安装 zlib 的头文件和链接库 zlib-devel 软件包。 1sudo yum -y install zlib zlib-devel Python3.x 有个内置模块 ctypes，它是 Python3.x 的外部函数库，需要使用系统外部函数库（libffi）的头文件和链接库，所以需要安装外部函数库（libffi）头文件和链接库 libffi-devel 软件包。 1sudo yum -y install libffi-devel 同时还需要一些其他python安装需要的模块，在此不一一做解释 1sudo yum -y install bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel 下载安装包解压123cd 安装包下载目录wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xztar -xvJf Python-3.7.4.tar.xz 编译安装1234mkdir /usr/local/python3 # 创建编译安装目录cd Python-3.7.4./configure --prefix=/usr/local/python3make &amp;&amp; make install 创建软链接12ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3 验证安装 在命令行输入python --version以验证是否安装成功 MacOS下Python环境搭建MacOS附带Apple预安装的Python2.7。同样，对于python开发者而言，肯定是需要python3.x环境的，那么如果选择从python官网安装较新的 Python 版本，那么Mac上将安装两个不同版本的Python ，因此在使用过程中python解释器的路径与想要执行的python版本一致非常重要。 官网下载python安装包 https://www.python.org/downloads/release/python-374/ 验证安装 在命令行输入python --version以验证是否安装成功 配置环境变量 打开.bash_profile 1vi ~/.bash_profile 添加别名，使python命令指向python3.x解释器 1alias python=/usr/local/bin/python3.7 生效文件 1source .bash_profile","categories":[{"name":"Python系列","slug":"Python系列","permalink":"https://elijahyg.github.io/categories/Python系列/"}],"tags":[]},{"title":"Go语言起源","slug":"Go语言起源","date":"2019-09-21T17:19:47.000Z","updated":"2019-09-21T17:30:43.975Z","comments":true,"path":"2019/09/22/Go语言起源/","link":"","permalink":"https://elijahyg.github.io/2019/09/22/Go语言起源/","excerpt":"","text":"Go语言的前世今生时代背景当今社会主流语言基本都诞生于上世纪90年代或者更早，例如Python(1991)、Java(1995)、C(1972)、C++(1983)、JavaScript(1995)、C#(2001)、PHP(1995)等等，同时我们也需要明白计算机硬件的发展，在2005年4月，英特尔的第一款双核处理器平台包括采用英特尔955X高速芯片组、主频为3.2GHz的英特尔奔腾处理器至尊版840，此款产品的问世标志着一个新时代来临了，那就是双核和多核处理器的时代。我们结合这些标志性的事件来看就不难发现，主流的服务端语言诞生的年代还都是单核年代，也就是说，当时的编程语言还是单核环境下，也就没有我们现在大家耳熟能详的并发编程概念。 Go语言的诞生Go（又称Golang）是Google开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。罗伯特·格瑞史莫，罗勃·派克（Rob Pike）及肯·汤普逊于2007年9月开始设计Go，谷歌把Go作为一个20%项目开始研发，即让员工抽出本职工作之外时间的20%，投入在该项目上，稍后Ian Lance Taylor、Russ Cox加入项目。Go是基于Inferno操作系统所开发的。Go于2009年11月正式宣布推出，成为开放源代码项目，支持Linux、Mac OS X、Windows等操作系统。对比上文所举的编程语言，在Go语言诞生的2007年，那时候已经处于双核时代，这就造就了Go语言在设计之初就考虑到了多核CPU下的程序运行，这也就造就了Go语言天生支持多核环境下编程的天赋技能。 Go语言的主要特性Google是这样描述Go语言的：“试图将像Python这样的动态语言的工作开发速度与C或C ++等编译语言的性能和安全性结合起来。在我们的Go to date实验中，典型的构建感觉瞬间完成; 甚至大型二进制文件只需几秒钟即可编译。编译后的代码接近C的速度.Go旨在让您快速移动。我们希望Go成为一种优秀的系统编程语言，支持多处理和面向对象设计的全新轻量化，具有真正的闭包和反射等一些很酷的功能。” GO语言的主要特性主要包括 并发与协程 基于消息传递的通信方式 丰富实用的内置数据类型 函数多返回值 defer机制 反射(reflect) 高性能HTTP Server 工程管理 编程规范 Go语言的应用前景Go语言凭借着天生的并发优势，出众的性能以及亲民的语法，迅速的蹿红各类IT领域，在人工智能、云计算开发、容器虚拟化、⼤数据开发、数据分析及科学计算、运维开发、爬虫开发、游戏开发等领域都有着广泛的应用。 以下是应用Go语言的公司：","categories":[{"name":"Go系列","slug":"Go系列","permalink":"https://elijahyg.github.io/categories/Go系列/"}],"tags":[]},{"title":"python语言起源","slug":"python语言起源","date":"2019-09-16T15:31:15.000Z","updated":"2019-09-24T11:44:07.091Z","comments":true,"path":"2019/09/16/python语言起源/","link":"","permalink":"https://elijahyg.github.io/2019/09/16/python语言起源/","excerpt":"","text":"Python语言的前世今生Python的诞生python的创始人为吉多·范罗苏姆（Guido van Rossum）。1989年的圣诞节期间，吉多·范·罗苏姆（中文名字：龟叔）为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。 （龟叔：2005年加入谷歌至2012年，2013年加入Dropbox直到现在，依然掌握着Python发展的核心方向，被称为仁慈的独裁者）。 Python版本发展 1989年，为了打发圣诞节假期，Guido开始写Python语言的编译器。Python这个名字，来自Guido所挚爱的电视剧Monty Python’s Flying Circus。他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，功能全面，易学易用，可拓展的语言。 1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。 Granddaddy of Python web frameworks, Zope 1 was released in 1999 Python 1.0 - January 1994 增加了 lambda, map, filter and reduce. Python 2.0 - October 16, 2000，加入了内存回收机制，构成了现在Python语言框架的基础 Python 2.4 - November 30, 2004, 同年目前最流行的WEB框架Django 诞生 Python 2.5 - September 19, 2006 Python 2.6 - October 1, 2008 Python 2.7 - July 3, 2010 In November 2014, it was announced that Python 2.7 would be supported until 2020, and reaffirmed that there would be no 2.8 release as users were expected to move to Python 3.4+ as soon as possible Python 3.0 - December 3, 2008 Python 3.1 - June 27, 2009 Python 3.2 - February 20, 2011 Python 3.3 - September 29, 2012 Python 3.4 - March 16, 2014 Python 3.5 - September 13, 2015 Python 3.6 - December 23, 2016 Python 3.7 - June 27, 2018 Python的各类解释器 CPython：官方的解释器，也是使用最广的Python解释器。在CPython解释器下有GIL限制，一个CPU同一时刻只能运行一个线程。 IPython：是一种比较流行的解释器 PyPy：一种专注于执行速度的解释器。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。 Jython：运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行，Jython可以直接调用Java的各种函数库。 IronPython：和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。 ZhPy：周蟒，支持使用繁/简中文语句编写程序的Python语言 Python应用领域目前Python主要应用领域： 云计算: 云计算最火的语言， 典型应用OpenStack WEB开发: 众多优秀的WEB框架，众多大型网站均为Python开发，Youtube, Dropbox, 豆瓣等等，典型WEB框架有Django、Flask、Tornado、sanic 科学运算、人工智能: 典型库NumPy, SciPy, Matplotlib, Enthought librarys,pandas 系统运维: 运维人员必备语言 金融：量化交易，金融分析，在金融工程领域，Python不但在用，且用的最多，而且重要性逐年提高。 原因：作为动态语言的Python，语言结构清晰简单，库丰富，成熟稳定，科学计算和统计分析都很牛逼，生产效率远远高于c、c++、java,尤其擅长策略回测 图形GUI: PyQT、WxPython、TkInter","categories":[{"name":"Python系列","slug":"Python系列","permalink":"https://elijahyg.github.io/categories/Python系列/"}],"tags":[]},{"title":"Python系列汇总","slug":"Python系列","date":"2019-09-16T15:21:04.000Z","updated":"2019-10-11T15:49:12.035Z","comments":true,"path":"2019/09/16/Python系列/","link":"","permalink":"https://elijahyg.github.io/2019/09/16/Python系列/","excerpt":"","text":"Python_基础篇 文章若无特别指出均表示python3.x版本下 前提准备 01-语言起源 02-IDE介绍 &amp; 环境搭建 语法基础 01-数据类型 01-数字类型 Integer 02-运算符 03-字符编码 函数 模块 &amp; 包 面向对象 异常处理 文件操作 网络编程 并发编程 原理探究","categories":[{"name":"Python系列","slug":"Python系列","permalink":"https://elijahyg.github.io/categories/Python系列/"}],"tags":[]},{"title":"基于Github搭建Hexo个人博客","slug":"基于Github搭建Hexo个人博客","date":"2019-09-13T15:46:44.000Z","updated":"2019-09-15T15:53:10.139Z","comments":true,"path":"2019/09/13/基于Github搭建Hexo个人博客/","link":"","permalink":"https://elijahyg.github.io/2019/09/13/基于Github搭建Hexo个人博客/","excerpt":"","text":"一、准备工作 Github账号 nodejs npm git for windows 二、创建github仓库 创建以你的用户名.github.io的仓库 三、域名绑定(可选)四、配置SSH key 为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 用git bash执行如下命令,如果提示：No such file or directory 说明你是第一次使用git$ cd ~/. ssh #检查本机已存在的ssh密钥 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key；将刚复制的内容粘贴到key那里，title随便填，保存。ssh-keygen -t rsa -C &quot;邮件地址&quot; 测试SSH-Key是否设置成功 12345 ssh -T git@github.com # 注意邮箱地址不用改# 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：# Hi 【用户名】! You’ve successfully authenticated, but GitHub does not provide shell access.# 看到这个信息说明SSH已配置成功！ 配置全局用户名和邮箱 12$ git config --global user.name &quot;用户名&quot; # 你的github用户名，非昵称$ git config --global user.email &quot;邮箱&quot; # 填写你的github注册邮箱 五、Hexo部分 安装Hexo npm install -g hexo 初始化Hexo 12cd /d/workspaces/hexo/ # 工作目录hexo init 部署、启动服务 12hexo g # 生成hexo s # 启动服务 本地预览问题 1hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故 六、修改Hexo主题 官网主题https://hexo.io/themes/ 新推荐极简主题https://github.com/aircloud/hexo-theme-aircloud 更换主题(以yilia为例) 12345https://github.com/litten/hexo-theme-yilia - 进入目录下载主题cd /d/workspaces/hexo/git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改配置文件 12修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g来重新生成。如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。 七、上传到github 修改配置文件 123456...deploy: type: git repository: git@github.com:用户名/用户名.github.io.git branch: master... 安装插件 12# 部署前还需要安装插件，git bash执行npm install hexo-deployer-git --save 提交至Github 12# 如果一切正常，可以执行hexo d将代码上传至github，之后就可以打开https://用户名.github.io/浏览你的个人博客了hexo d 八、常用hexo命令 常见命令 1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令 12hexo s -g #生成并本地预览hexo d -g #生成并上传 九、写博客 写博客 12# 定位到hexo目录，执行下面语句，hexo会帮我们在_posts下生成相关md文件，我们只需要打开这个文件就可以开始写博客了hexo new &apos;my-first-blog&apos; 一般完整格式如下 123456789---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文","categories":[{"name":"其他","slug":"其他","permalink":"https://elijahyg.github.io/categories/其他/"}],"tags":[]}]}