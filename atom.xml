<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yang&#39;s Blog</title>
  
  <subtitle>顺境内敛 逆境不屈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://elijahyg.github.io/"/>
  <updated>2020-11-22T16:33:58.585Z</updated>
  <id>https://elijahyg.github.io/</id>
  
  <author>
    <name>Elijah Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python异常处理</title>
    <link href="https://elijahyg.github.io/2020/11/22/Python%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://elijahyg.github.io/2020/11/22/Python异常处理/</id>
    <published>2020-11-22T15:39:21.000Z</published>
    <updated>2020-11-22T16:33:58.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h4><p>语法错误又称解析错误，语法错误是在语法层面出现的代码错误，python解释器可以在代码运行之前对语法错误进行检查，并输出出现语法错误的具体位置和错误原因。</p><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><ul><li><p>概念<br>即使在语法上是正确的，但在尝试执行时，它仍可能会引发错误。在执行时检测到的错误被称为异常，异常不一定会导致严重后果，我们可以利用异常处理来解决异常。</p></li><li><p>基本语法</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>示例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义除法的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        result = x / y</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:  <span class="comment"># 如果发生ZeroDivisionError异常，则进行下面的处理</span></span><br><span class="line">        print(<span class="string">"division by zero!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 如果程序正常执行，则输出除法结果</span></span><br><span class="line">        print(<span class="string">"result is"</span>, result)</span><br><span class="line">    <span class="keyword">finally</span>:  <span class="comment"># 定义清理操作，程序不论是否触发异常，一定会执行finally，通常进行清理操作</span></span><br><span class="line">        print(<span class="string">"executing finally clause"</span>)</span><br><span class="line"></span><br><span class="line">divide(<span class="number">1</span>,<span class="number">0</span>)  <span class="comment"># 函数调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">division by zero!</span><br><span class="line">executing <span class="keyword">finally</span> clause</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="异常种类"><a href="#异常种类" class="headerlink" title="异常种类"></a>异常种类</h3><h4 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h4><table><thead><tr><th>异常名称</th><th>描述</th></tr></thead><tbody><tr><td>BaseException</td><td>所有异常的基类</td></tr><tr><td>SystemExit</td><td>解释器请求退出</td></tr><tr><td>KeyboardInterrupt</td><td>用户中断执行(通常是输入^C)</td></tr><tr><td>Exception</td><td>常规错误的基类</td></tr><tr><td>StopIteration</td><td>迭代器没有更多的值</td></tr><tr><td>GeneratorExit</td><td>生成器(generator)发生异常来通知退出</td></tr><tr><td>StandardError</td><td>所有的内建标准异常的基类</td></tr><tr><td>ArithmeticError</td><td>所有数值计算错误的基类</td></tr><tr><td>FloatingPointError</td><td>浮点计算错误</td></tr><tr><td>OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td>ZeroDivisionError</td><td>除(或取模)零(所有数据类型)</td></tr><tr><td>AssertionError</td><td>断言语句失败</td></tr><tr><td>AttributeError</td><td>对象没有这个属性</td></tr><tr><td>EOFError</td><td>没有内建输入,到达EOF标记</td></tr><tr><td>EnvironmentError</td><td>操作系统错误的基类</td></tr><tr><td>IOError</td><td>输入/输出操作失败</td></tr><tr><td>OSError</td><td>操作系统错误</td></tr><tr><td>WindowsError</td><td>系统调用失败</td></tr><tr><td>ImportError</td><td>导入模块/对象失败</td></tr><tr><td>LookupError</td><td>无效数据查询的基类</td></tr><tr><td>IndexError</td><td>序列中没有此索引(index)</td></tr><tr><td>KeyError</td><td>映射中没有这个键</td></tr><tr><td>MemoryError</td><td>内存溢出错误(对于Python解释器不是致命的)</td></tr><tr><td>NameError</td><td>未声明/初始化对象(没有属性)</td></tr><tr><td>UnboundLocalError</td><td>访问未初始化的本地变量</td></tr><tr><td>ReferenceError</td><td>弱引用(Weakreference)试图访问已经垃圾回收了的对象</td></tr><tr><td>RuntimeError</td><td>一般的运行时错误</td></tr><tr><td>NotImplementedError</td><td>尚未实现的方法</td></tr><tr><td>SyntaxError Python</td><td>语法错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>TabError</td><td>Tab和空格混用</td></tr><tr><td>SystemError</td><td>一般的解释器系统错误</td></tr><tr><td>TypeError</td><td>对类型无效的操作</td></tr><tr><td>ValueError</td><td>传入无效的参数</td></tr><tr><td>UnicodeErrorUnicode</td><td>相关的错误</td></tr><tr><td>UnicodeDecodeErrorUnicode</td><td>解码时的错误</td></tr><tr><td>UnicodeEncodeErrorUnicode</td><td>编码时错误</td></tr><tr><td>UnicodeTranslateErrorUnicode</td><td>转换时错误</td></tr><tr><td>Warning</td><td>警告的基类</td></tr><tr><td>DeprecationWarning</td><td>关于被弃用的特征的警告</td></tr><tr><td>FutureWarning</td><td>关于构造将来语义会有改变的警告</td></tr><tr><td>OverflowWarning</td><td>旧的关于自动提升为长整型(long)的警告</td></tr><tr><td>PendingDeprecationWarning</td><td>关于特性将会被废弃的警告</td></tr><tr><td>RuntimeWarning</td><td>可疑的运行时行为(runtimebehavior)的警告</td></tr><tr><td>SyntaxWarning</td><td>可疑的语法的警告</td></tr><tr><td>UserWarning</td><td>用户代码生成的警告</td></tr></tbody></table><h4 id="异常层次结构"><a href="#异常层次结构" class="headerlink" title="异常层次结构"></a>异常层次结构</h4><p>由下图的异常层级结构我们可以看出，BaseException 所有内置异常的基类。但是官方不建议在实际使用时直接继承使用，而是建议继承Exception类，几乎所有的异常都是Exception的子类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">BaseException</span><br><span class="line"> +-- SystemExit</span><br><span class="line"> +-- KeyboardInterrupt</span><br><span class="line"> +-- GeneratorExit</span><br><span class="line"> +-- Exception</span><br><span class="line">      +-- StopIteration</span><br><span class="line">      +-- StopAsyncIteration</span><br><span class="line">      +-- ArithmeticError</span><br><span class="line">      | +-- FloatingPointError</span><br><span class="line">      | +-- OverflowError</span><br><span class="line">      | +-- ZeroDivisionError</span><br><span class="line">      +-- AssertionError</span><br><span class="line">      +-- AttributeError</span><br><span class="line">      +-- BufferError</span><br><span class="line">      +-- EOFError</span><br><span class="line">      +-- ImportError</span><br><span class="line">      | +-- ModuleNotFoundError</span><br><span class="line">      +-- LookupError</span><br><span class="line">      | +-- IndexError</span><br><span class="line">      | +-- KeyError</span><br><span class="line">      +-- MemoryError</span><br><span class="line">      +-- NameError</span><br><span class="line">      | +-- UnboundLocalError</span><br><span class="line">      +-- OSError</span><br><span class="line">      | +-- BlockingIOError</span><br><span class="line">      | +-- ChildProcessError</span><br><span class="line">      | +-- ConnectionError</span><br><span class="line">      | | +-- BrokenPipeError</span><br><span class="line">      | | +-- ConnectionAbortedError</span><br><span class="line">      | | +-- ConnectionRefusedError</span><br><span class="line">      | | +-- ConnectionResetError</span><br><span class="line">      | +-- FileExistsError</span><br><span class="line">      | +-- FileNotFoundError</span><br><span class="line">      | +-- InterruptedError</span><br><span class="line">      | +-- IsADirectoryError</span><br><span class="line">      | +-- NotADirectoryError</span><br><span class="line">      | +-- PermissionError</span><br><span class="line">      | +-- ProcessLookupError</span><br><span class="line">      | +-- TimeoutError</span><br><span class="line">      +-- ReferenceError</span><br><span class="line">      +-- RuntimeError</span><br><span class="line">      | +-- NotImplementedError</span><br><span class="line">      | +-- RecursionError</span><br><span class="line">      +-- SyntaxError</span><br><span class="line">      | +-- IndentationError</span><br><span class="line">      | +-- TabError</span><br><span class="line">      +-- SystemError</span><br><span class="line">      +-- TypeError</span><br><span class="line">      +-- ValueError</span><br><span class="line">      | +-- UnicodeError</span><br><span class="line">      | +-- UnicodeDecodeError</span><br><span class="line">      | +-- UnicodeEncodeError</span><br><span class="line">      | +-- UnicodeTranslateError</span><br><span class="line">      +-- Warning</span><br><span class="line">           +-- DeprecationWarning</span><br><span class="line">           +-- PendingDeprecationWarning</span><br><span class="line">           +-- RuntimeWarning</span><br><span class="line">           +-- SyntaxWarning</span><br><span class="line">           +-- UserWarning</span><br><span class="line">           +-- FutureWarning</span><br><span class="line">           +-- ImportWarning</span><br><span class="line">           +-- UnicodeWarning</span><br><span class="line">           +-- BytesWarning</span><br><span class="line">           +-- ResourceWarning</span><br></pre></td></tr></table></figure><hr><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>raise 语句允许程序员强制发生指定的异常。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> NameError(<span class="string">'HiThere'</span>)  <span class="comment"># 主动抛出异常</span></span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">'An exception flew by!'</span>)</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><hr><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>程序可以通过创建新的异常类来命名它们自己的异常。异常通常应该直接或间接地从 Exception 类派生。自定义异常类通常要保持功能简单，通常只提供许多属性，这些属性允许处理程序为异常提取有关错误的信息。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span><span class="params">(Exception)</span>:</span>  <span class="comment"># 继承Exception</span></span><br><span class="line">    <span class="string">"""Base class for exceptions in this module."""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransitionError</span><span class="params">(Error)</span>:</span>  <span class="comment"># 继承Exception的子类Error</span></span><br><span class="line">    <span class="string">"""Raised when an operation attempts a state transition that's not</span></span><br><span class="line"><span class="string">    allowed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        previous -- state at beginning of transition</span></span><br><span class="line"><span class="string">        next -- attempted new state</span></span><br><span class="line"><span class="string">        message -- explanation of why the specific transition is not allowed</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, previous, next, message)</span>:</span></span><br><span class="line">        self.previous = previous</span><br><span class="line">        self.next = next</span><br><span class="line">        self.message = message</span><br></pre></td></tr></table></figure><hr><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>assert 语句是在程序中插入调试性断言的简便方式</p><h4 id="断言的两种形式"><a href="#断言的两种形式" class="headerlink" title="断言的两种形式"></a>断言的两种形式</h4><ul><li>简单形式：<code>assert expression</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单形式断言，等价于</span></span><br><span class="line"><span class="keyword">if</span> __debug__:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> expression: <span class="keyword">raise</span> AssertionError</span><br></pre></td></tr></table></figure><ul><li>扩展形式：<code>assert expression1, expression2</code> </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#扩展形式断言，等价于</span></span><br><span class="line"><span class="keyword">if</span> __debug__:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> expression1: <span class="keyword">raise</span> AssertionError(expression2)</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> == <span class="number">1</span> <span class="comment"># 断言1 == 1</span></span><br><span class="line">        print(<span class="string">'【NO·1】断言成功时执行'</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">        print(<span class="string">'【NO·2】断言失败时执行'</span>) <span class="comment"># 断言此处会失败，进而抛出AssertionError异常</span></span><br><span class="line">    <span class="keyword">except</span> Exception: <span class="comment"># 捕获AssertionError异常</span></span><br><span class="line">        print(<span class="string">"Catch AssertionError "</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"></span><br><span class="line">【NO·<span class="number">1</span>】断言成功时执行</span><br><span class="line">Catch AssertionError</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;异常处理&quot;&gt;&lt;a href=&quot;#异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常处理&quot;&gt;&lt;/a&gt;异常处理&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python方法</title>
    <link href="https://elijahyg.github.io/2020/07/14/Python%E6%96%B9%E6%B3%95/"/>
    <id>https://elijahyg.github.io/2020/07/14/Python方法/</id>
    <published>2020-07-14T14:49:18.000Z</published>
    <updated>2020-07-14T14:50:18.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="属性方法"><a href="#属性方法" class="headerlink" title="属性方法"></a>属性方法</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>属性方法即使用<code>@property</code>装饰器，将函数中的方法转化为”属性”，即可以直接使用访问属性的方式，即<code>属性名.方法</code>进行方法的调用。</p><h4 id="内置函数property及-property"><a href="#内置函数property及-property" class="headerlink" title="内置函数property及@property"></a>内置函数<code>property</code>及<code>@property</code></h4><ul><li><code>property</code>函数<br>property函数的作用是托管类的属性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._x = <span class="string">'This is x'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getx</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setx</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._x = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delx</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self._x</span><br><span class="line"></span><br><span class="line">    x = property(getx, setx, delx, <span class="string">"I'm the 'x' property."</span>)</span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line"></span><br><span class="line">print(c.x)  <span class="comment"># 调用getter</span></span><br><span class="line">c.x = <span class="string">'value'</span>  <span class="comment"># 调用setter</span></span><br><span class="line"><span class="keyword">del</span> c.x  <span class="comment"># 调用deleter</span></span><br></pre></td></tr></table></figure><ul><li><code>@property</code>装饰器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面类与上述例子具有相同的效果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._x = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""I'm the 'x' property."""</span></span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line"></span><br><span class="line"><span class="meta">    @x.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._x = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @x.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self._x</span><br><span class="line">c = C()</span><br><span class="line"></span><br><span class="line">print(c.x)  <span class="comment"># 调用getter</span></span><br><span class="line">c.x = <span class="string">'value'</span>  <span class="comment"># 调用setter</span></span><br><span class="line"><span class="keyword">del</span> c.x  <span class="comment"># 调用deleter</span></span><br></pre></td></tr></table></figure><hr><h3 id="类方法-classmethod"><a href="#类方法-classmethod" class="headerlink" title="类方法(@classmethod)"></a>类方法(@classmethod)</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>类方法的调用可以在类上进行也可以在实例上进行。<br>@classmethod装饰器将一个方法封装成类方法。</p><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><ul><li>python中的类方法解决了python中不可以通过不同的参数来重载不同的构造函数的问题。即python可以通过类方法实现在实例化前进行某些操作，进而实现类似于多个构造函数的效果。</li><li>对于某些需要在类实例化之前做些交互操作提供实现方法。</li><li>在继承的时，保证了子类使用可选构造函数构造出来的类是子类的实例而不是父类的实例。</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar_1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'this is bar_1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar_2</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'this is bar_2'</span>)</span><br><span class="line">        cls().bar_1()</span><br><span class="line"></span><br><span class="line">Foo.bar_2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">this <span class="keyword">is</span> bar_2</span><br><span class="line">this <span class="keyword">is</span> bar_1</span><br></pre></td></tr></table></figure><hr><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>静态方法的调用可以在类上进行也可以在实例上进行。</p><h4 id="意义-1"><a href="#意义-1" class="headerlink" title="意义"></a>意义</h4><p>静态方法其本质是函数，虽然静态方法定义在类中，但是静态方法并不是类或者类实例的方法，而可以理解为与类没有直接关系的函数，那么静态方法定义在类中的意义是因为可以将一些功能性的工具函数放在类中，方便调用。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar_1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'this is bar_1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar_2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'this is bar_2'</span>)</span><br><span class="line"></span><br><span class="line">Foo.bar_2()</span><br></pre></td></tr></table></figure><hr><h3 id="特殊成员方法-魔术方法"><a href="#特殊成员方法-魔术方法" class="headerlink" title="特殊成员方法(魔术方法)"></a>特殊成员方法(魔术方法)</h3><h4 id="常用魔术方法"><a href="#常用魔术方法" class="headerlink" title="常用魔术方法"></a>常用魔术方法</h4><p><code>__new__(cls[, …])</code>：<br>python3中在类实例化过程中首先要调用<code>__new__(cls[, …])</code>方法，其第一个参数是当前类，其余参数在随后的过程中传递至<code>__init__</code>方法。</p><p><code>__init__(self[, …])</code>：<br>可以理解为python中的构造方法，当一个实例被创建时进行初始化的方法。</p><p><code>__del__(self)</code>：<br>python中的析构方法，当实例被销毁时调用该方法，可以执行清理相关功能。</p><p><code>__call__(self[, args…])</code>：<br>允许一个类的实例像函数一样被调用：foo(x, y) 调用 <code>foo.__ call__(x, y)</code></p><p><code>__len__(self)</code>：<br>调用len() 时的操作</p><p><code>__repr__(self)</code>：<br>调用repr() 时的操作</p><p><code>__str__(self)</code>：<br>调用str() 时的操作</p><p><code>__bytes__(self)</code>：<br>调用bytes() 时的操作</p><p><code>__hash__(self)</code>：<br>调用hash() 时的操作</p><p><code>__bool__(self)</code>：<br>调用bool() 时的操作，返回True或False</p><p><code>__format__(self, format_spec)</code>：<br>调用format() 时的操作</p><h4 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h4><p><code>__getattr__(self, name)</code>：<br>当尝试获取不存在的属性时的操作</p><p><code>__getattribute__(self, name)</code>：<br>当前类的属性被访问时的操作</p><p><code>__setattr__(self, name, value)</code>：<br>定义当一个属性被设置时的行为</p><p><code>__delattr__(self, name)</code>：<br>当属性被删除时的操作</p><p><code>__dir__(self)</code>：<br>调用dir()时的操作</p><p><code>__get__(self, instance, owner)</code>：<br>当获得描述符的值时的操作</p><p><code>__set__(self, instance, value)</code>：<br>当修改描述符的值时的操作</p><p><code>__delete__(self, instance)</code>：<br>当删除描述符的值时的操作</p><h4 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h4><p><code>__lt__(self, other)</code>：<br>调用小于号时的操作：即x &lt; y 调用 x.lt(y)<br><code>__le__(self, other)</code>：<br>调用小于等于号时的操作：即x &lt;= y 调用 x.le(y)<br><code>__eq__(self, other)</code>：<br>调用等于号时的操作：即x == y 调用 x.eq(y)<br><code>__ne__(self, other)</code>：<br>调用不等于号时的操作：即x != y 调用 x.ne(y)<br><code>__gt__(self, other)</code>：<br>调用大于号时的操作：即x &gt; y 调用 x.gt(y)<br><code>__ge__(self, other)</code>：<br>调用大于等于号时的操作：即x &gt;= y 调用 x.ge(y)</p><h4 id="算数运算符-amp-反运算"><a href="#算数运算符-amp-反运算" class="headerlink" title="算数运算符 &amp; 反运算"></a>算数运算符 &amp; 反运算</h4><blockquote><p>反运算：即当左操作数不存在对应方法时，则检查右操作数是否有相对应的反运算符，若有则进行对应运算，若没有则抛出异常</p></blockquote><p><code>__radd/add__(self, other)</code>：<br>调用加法时的操作：<code>+</code></p><p><code>__rsub/sub__(self, other)</code>：<br>调用减法时的操作：<code>-</code></p><p><code>__rmul/mul__(self, other)</code>：<br>调用乘法时的操作：<code>*</code></p><p><code>__rtruediv/truediv__(self, other)</code>：<br>调用除法时的操作：<code>/</code></p><p><code>__rfloordiv/floordiv__(self, other)</code>：<br>调用整除时的操作：<code>//</code></p><p><code>__rmod/mod__(self, other)</code>：<br>调用取模运算时的操作：<code>%</code></p><p><code>__rdivmod/divmod__(self, other)</code>：<br>调用 divmod() 时的操作</p><p><code>__rpow/pow__(self, other[, modulo])</code>：<br>调用 power() 或 <code>**</code> 时的操作</p><p><code>__rlshift/lshift__(self, other)</code>：<br>调用按位左移时的操作：<code>&lt;&lt;</code></p><p><code>__rrshift/rshift__(self, other)</code>：<br>调用按位右移时的操作：<code>&gt;&gt;</code></p><p><code>__rand/and__(self, other)</code>：<br>调用按位与时的操作：<code>&amp;</code></p><p><code>__rxor/xor__(self, other)</code>：<br>调用按位异或时的操作：<code>^</code></p><p><code>__ror/or__(self, other)</code>：<br>调用按位或时的操作：<code>|</code></p><h4 id="增量赋值运算"><a href="#增量赋值运算" class="headerlink" title="增量赋值运算"></a>增量赋值运算</h4><p>上述算数运算符前增加<code>i</code>，则转换为对应的增量赋值运算符，对应操作转换为赋值运算<br>例如：<code>__iadd__(self, other)</code>，则调用赋值加法时的操作，即<code>+=</code></p><h4 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h4><p><code>__pos__(self)</code>：<br>调用正号时的操作</p><p><code>__neg__(self)</code>：<br>调用负号时的操作</p><p><code>__abs__(self)</code>：<br>调用 abs() 时的操作</p><p><code>__invert__(self)</code>：<br>调用按位求反时的操作</p><h4 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h4><p><code>__complex__(self)</code>：<br>调用 complex() 时的操作</p><p><code>__int__(self)</code>：<br>调用 int() 时的操作</p><p><code>__float__(self)</code>：<br>调用 float() 时的操作</p><p><code>__round__(self[, n])</code>：<br>调用 round() 时的操作</p><p><code>__index__(self)</code>：<br>调用此方法以实现 operator.index() 以及 Python 需要无损地将数字对象转换为整数对象的场合（例如切片或是内置的 bin(), hex() 和 oct() 函数)。存在此方法表明数字对象属于整数类型。必须返回一个整数。</p><h4 id="上下文管理"><a href="#上下文管理" class="headerlink" title="上下文管理"></a>上下文管理</h4><p><code>__enter__(self)</code>：<br>当使用 with 语句时，返回值被 with 语句的目标或者 as 后的名字绑定。</p><p><code>__exit__(self, exc_type, exc_value, traceback)</code>：<br>退出关联到此对象的运行时上下文。通常用于处理异常、清除处理或做一些代码块执行完毕之后的日常工作。</p><h4 id="容器类型"><a href="#容器类型" class="headerlink" title="容器类型"></a>容器类型</h4><p><code>__len__(self)</code>：<br>调用 len() 时的操作</p><p><code>__getitem__(self, key)</code>：<br>获取容器中元素时的操作: self[key]</p><p><code>__setitem__(self, key, value)</code>：<br>设置容器中元素时的操作: self[key] = value</p><p><code>__delitem__(self, key)</code>：<br>删除容器中元素时的操作: del self[key]</p><p><code>__iter__(self)</code>：<br>对容器中元素进行迭代时的操作</p><p><code>__reversed__(self)</code>：<br>被 reversed() 调用时的操作</p><p><code>__contains__(self, item)</code>：<br>调用 in 时的操作</p><h4 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a><code>__slots__</code></h4><ul><li><p>概念<br><code>__slots__</code> 允许我们显式地声明数据成员并禁止创建 <code>__dict__</code> 和 <code>__weakref__</code> (除非是在 <strong>slots</strong> 中显式地声明或是在父类中可用。)</p></li><li><p>意义及作用</p></li><li><p>相比使用 <strong>dict</strong> 此方式可以显著地节省空间。 </p></li><li><p>属性查找速度也可得到显著的提升。</p></li><li><p><code>__slots__</code>不可被继承，也不可动态添加属性</p></li><li><p>示例</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    __slots__ = [<span class="string">'x'</span>, <span class="string">'y'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">f = Foo(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">print(f.x) <span class="comment"># 输出 'a'</span></span><br><span class="line">print(f.y) <span class="comment"># 输出 'b'</span></span><br><span class="line">f.z = <span class="string">'new'</span> <span class="comment"># 抛出 AttributeError 异常</span></span><br></pre></td></tr></table></figure><hr><h3 id="反射（自省）"><a href="#反射（自省）" class="headerlink" title="反射（自省）"></a>反射（自省）</h3><h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><p>反射的概念是由Smith在1982年首次提出的，主要是指程序可以访问、检测和修改它本身状态或行为的一种能力（自省）。这一概念的提出很快引发了计算机科学领域关于应用反射性的研究。它首先被程序语言的设计领域所采用,并在Lisp和面向对象方面取得了成绩。</p><h4 id="python中的反射"><a href="#python中的反射" class="headerlink" title="python中的反射"></a>python中的反射</h4><p>通过字符串的形式操作对象相关的属性，python中的一切事物都是对象（都可以使用反射）。</p><h4 id="反射的实现"><a href="#反射的实现" class="headerlink" title="反射的实现"></a>反射的实现</h4><ul><li><p>hasattr(obj, name)<br>返回obj对象是否具有name所描述的属性</p></li><li><p>getattr(obj, name)<br>从obj对象中获取到name所描述的属性</p></li><li><p>setattr(obj, name, value)<br>给obj对象设置一个名为name的属性，属性值为value</p></li><li><p>delattr(obj, name)<br>从obj对象中删除名为name的属性</p></li></ul><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  反射示例中的属性和方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    static_var = <span class="string">'类的静态变量'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this is bar'</span>)</span><br><span class="line"></span><br><span class="line">foo = Foo(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用hasattr函数检测是否含有某属性</span></span><br><span class="line">print(hasattr(foo, <span class="string">'x'</span>))</span><br><span class="line">print(hasattr(foo, <span class="string">'y'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用getattr获取属性</span></span><br><span class="line">print(getattr(foo, <span class="string">'x'</span>))</span><br><span class="line"></span><br><span class="line">func=getattr(foo, <span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">func() <span class="comment"># 输出'a'</span></span><br><span class="line"></span><br><span class="line">print(getattr(foo, <span class="string">'m'</span>, <span class="string">'不存在'</span>))  <span class="comment"># 报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用setattr设置属性</span></span><br><span class="line">setattr(foo, <span class="string">'z'</span>, <span class="string">'c'</span>)</span><br><span class="line">setattr(foo, <span class="string">'new_attr'</span>, <span class="keyword">lambda</span> self:self.x + <span class="string">'_new_attr'</span>)</span><br><span class="line">print(foo.__dict__)</span><br><span class="line">print(foo.bar(foo))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用delattr删除属性</span></span><br><span class="line">delattr(foo, <span class="string">'x'</span>)</span><br><span class="line">delattr(foo, <span class="string">'y'</span>)</span><br><span class="line">delattr(foo, <span class="string">'not_exist_func'</span>) <span class="comment"># 不存在,报错</span></span><br><span class="line"></span><br><span class="line">print(foo.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反射类的方法和属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    static_var = <span class="string">"类的静态属性"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'人身苦短'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'我用python'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'bar func...'</span></span><br><span class="line"></span><br><span class="line">print(getattr(Foo, <span class="string">'static_var'</span>))</span><br><span class="line">print(getattr(Foo, <span class="string">'func'</span>))</span><br><span class="line">print(getattr(Foo, <span class="string">'bar'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反射模块的属性和方法(内置模块也是可以的)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">程序目录：</span></span><br><span class="line"><span class="string">    module_test.py</span></span><br><span class="line"><span class="string">    index.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当前文件：</span></span><br><span class="line"><span class="string">    index.py</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> module_test <span class="keyword">as</span> obj</span><br><span class="line"></span><br><span class="line">print(hasattr(obj, <span class="string">'test'</span>))</span><br><span class="line"></span><br><span class="line">print(getattr(obj, <span class="string">'test'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反射自身模块中的函数</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'funx_1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funx_2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'funx_2'</span>)</span><br><span class="line"></span><br><span class="line">this_module = sys.modules[__name__]  <span class="comment"># 返回自己的模块</span></span><br><span class="line"></span><br><span class="line">print(hasattr(this_module, <span class="string">'func_1'</span>))</span><br><span class="line">print(getattr(this_module, <span class="string">'funx_2'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;h3 id=&quot;属性方法&quot;&gt;&lt;a href=&quot;#属性方法&quot; class=&quot;headerlink&quot; title=&quot;属性方法&quot;&gt;&lt;/a&gt;属性方法&lt;/h
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python面向对象的三大特征</title>
    <link href="https://elijahyg.github.io/2020/06/27/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81/"/>
    <id>https://elijahyg.github.io/2020/06/27/Python面向对象的三大特征/</id>
    <published>2020-06-27T10:21:47.000Z</published>
    <updated>2020-06-27T10:23:03.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h2><p>封装、继承、多态作为面向对象编程的三大特征，其概念也是循序渐进的，首先需要有类的概念，随后将类进行封装，对外只暴露需要暴露的部分，简化对外交互；而后类与类之间会有继承关系；进而有了多态的概念。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>封装是指一种将抽象性函数接口的实现细节部分包装、隐藏起来的方法。同时，它也是一种防止外界调用端访问对象内部实现细节的手段。</p><h4 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h4><p>封装的目的是隐藏对象的属性和实现细节，仅对外公开访问方法，并且控制访问级别。所以对于封装的原则，大致可以归纳为高内聚，低耦合。<br>1、高内聚：高内聚是指一个模块中各个部分之间关联应该是紧密的。<br>2、低耦合：低耦合是指多个模块之间的关联应该是松散的。</p><h4 id="评价标准"><a href="#评价标准" class="headerlink" title="评价标准"></a>评价标准</h4><p>不同程序员对于同样的类也可能会有不同的封装方法，评价类是否较好的完成封装这一特征的标准大致包含以下几方面：</p><ul><li>功能单一性</li><li>可扩展性</li><li>明确的输入输出</li></ul><hr><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>继承是一种创建新类的方式，在python中，新建的类可以继承一个或多个父类，父类又可称为基类或超类，新建的类称为派生类或子类。</p><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><p>所谓抽象，与我们平时理解的抽象大致相同。就是将有共同特征的一类事物进行归纳，将其共有的、本质性的特征归纳抽象出来。</p><h4 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h4><p>所谓继承，就是基于抽象出来的共同特征定义父类之后，需要定义和父类具有相同的属性和方法的子类，即称子类继承于父类，子类中仍可以重新定义、追加属性和方法等。</p><ul><li>继承与重用的区别<br>所谓代码重用是将已经编写完成的代码复制，在新的编码中重用之前程序已经完成的代码功能，代码重用可以虽然可以节省开发周期，简化编码难度。<br>而继承与重用的核心区别就是继承是基于对类进行抽象之后，对于类进行的抽象归纳之后认为其所具有的相同的方法/属性。对于编码而言，不需要将原有代码复制到新的编码之中，而只需要声明其继承于某个已经完成的类作为父类即可。相比重用，减少了代码量，增加了代码的可读性。</li></ul><h4 id="继承相关名词概念解释"><a href="#继承相关名词概念解释" class="headerlink" title="继承相关名词概念解释"></a>继承相关名词概念解释</h4><ul><li><p>父类 &amp; 子类<br>所谓父类即作为抽象的类可以产生相关子类的类。<br>所谓子类就是通过继承其他类所创建出来的类。</p></li><li><p>基类 &amp; 派生类<br>基类概念同父类，派生类概念同子类。</p></li><li><p>新式类 &amp; 经典类</p><ul><li><p>新式类：<br>1、在Python 3.x中取消了经典类，默认都是新式类，创建新式类时不必显式的继承object。<br>2、新式类多继承的原则是：广度优先。总结而言，即在新式类中对于子类继承多个父类的情况，如果继承的多个父类中有属性相同的，则越<code>靠后</code>继承的父类中的属性会覆盖靠前继承的父类的相同属性。<br>3、新式类中增加了<code>__slots__</code>内置属性, <code>__slots__</code>的作用是可以限定实例属性的种类。<br>4、新式类中增加了<code>__getattribute__</code>方法，对于访问类/实例中任何存在与否的方法/属性时都会调用<code>__getattribute__</code>方法。<br>5、新式类内置增加了<code>__new__</code>方法。</p></li><li><p>经典类：<br>1、在Python2.x中，默认都是经典类，只有显式继承了object创建的才是新式类。<br>2、经典类多继承的原则是：深度优先。总结而言，即在新式类中对于子类继承多个父类的情况，如果继承的多个父类中有属性相同的，则越<code>靠前</code>继承的父类中的属性会覆盖靠后继承的父类的相同属性。</p></li></ul></li><li><p>单继承 &amp; 多继承<br>单继承是指子类只可以继承自一个父类。<br>多继承是指一个子类同时继承自多个父类。</p></li></ul><h4 id="抽象类-amp-接口类"><a href="#抽象类-amp-接口类" class="headerlink" title="抽象类&amp;接口类"></a>抽象类&amp;接口类</h4><ul><li>抽象类<br>抽象类只能被继承，而不能被实例化。其作用在于规定继承它的子类需要实现什么方法，而不是其本身实现了什么功能。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc  <span class="comment"># 利用abc模块实现抽象类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义父类Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(metaclass=abc.ABCMeta)</span>:</span></span><br><span class="line">    all_type = <span class="string">'person'</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod  # 定义抽象方法，无需具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'子类需定义睡觉方法'</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod  # 定义抽象方法，无需具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'子类需定义吃饭方法'</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子类Student</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">student = Student()  <span class="comment"># 此处抛出异常，因为子类没有定义抽象方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子类Worker</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Worker睡觉方法'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Worker吃方法'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子类Teacher</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Teacher睡觉方法'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Teacher吃方法'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子类Farmer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Farmer</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Farmer睡觉方法'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Farmer吃方法'</span>)</span><br><span class="line"></span><br><span class="line">worker=Worker()</span><br><span class="line"></span><br><span class="line">teacher=Teacher()</span><br><span class="line"></span><br><span class="line">farmer=Farmer()</span><br><span class="line"></span><br><span class="line"><span class="comment">#  此处体现了归一化思想，即相同方法在不同子类中的具体实现不同，但是调用者的调用方式相同</span></span><br><span class="line">worker.sleep()</span><br><span class="line">worker.eat()</span><br><span class="line"></span><br><span class="line">teacher.sleep()</span><br><span class="line">teacher.eat()</span><br><span class="line"></span><br><span class="line">farmer.sleep()</span><br><span class="line">farmer.eat()</span><br></pre></td></tr></table></figure><ul><li>接口类<br>继承的作用可以大致分类两方面：代码复用和实现接口继承。<br>那么，什么是接口继承呢？接口继承的意义在于需要一种抽象类，该抽象类实现了一种兼容功能，使得调用者无需关心类的内部实现细节，便可以统一处理特定接口。这被称为”归一化”。归一化的意义在于外部功能的调用者不用关注细节，便可以统一的处理所有接口兼容的对象。<br>同时，便要引出编程的”依赖倒置”原则。即：<br>1、高层模块不应该依赖低层模块，二者都应该依赖其抽象；<br>2、抽象不应该应该依赖细节，细节应该依赖抽象。<br>总而言之，即程序要针对接口编程，而不是针对实现编程</li></ul><hr><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>多态指的是一类事物具有多种形态，同时，多态是继承的具体展现形式。</p><h4 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h4><p>多态性是指在不考虑实例类型的情况下使用实例。</p><h4 id="鸭子类型（Duck-Type）"><a href="#鸭子类型（Duck-Type）" class="headerlink" title="鸭子类型（Duck Type）"></a>鸭子类型（Duck Type）</h4><ul><li>鸭子类型概念<br>If it walks like a duck and quacks like a duck, it must be a duck。(如果它走起路来像鸭子，叫起来也像鸭子，那么它就是鸭子。)<br>鸭子类型是计算机领域中的一种设计风格，其意义即对象的特征不取决于其父类，而取决于对象本身的实现。</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义父类Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(metaclass=abc.ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'子类需定义吃饭方法'</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子类Worker</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Worker吃方法'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子类Teacher</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Teacher吃方法'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义子类Farmer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Farmer</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Farmer吃方法'</span>)</span><br><span class="line"></span><br><span class="line">worker=Worker()</span><br><span class="line">teacher=Teacher()</span><br><span class="line">farmer=Farmer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处worker、teacher、farmer都有吃的方法，但是具体的实现不同，所以eat方法本身不取决于Person父类中的eat方法，而是由每个子类所产生的实例自己决定</span></span><br><span class="line">worker.eat()</span><br><span class="line">teacher.eat()</span><br><span class="line">farmer.eat()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们也可以进一步的统一调用方式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">someone_eat</span><span class="params">(obj)</span>:</span></span><br><span class="line">    obj.eat()</span><br><span class="line"></span><br><span class="line">someone_eat(worker)</span><br><span class="line">someone_eat(teacher)</span><br><span class="line">someone_eat(farmer)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象三大特征&quot;&gt;&lt;a href=&quot;#面向对象三大特征&quot; class=&quot;headerlink&quot; title=&quot;面向对象三大特征&quot;&gt;&lt;/a&gt;面向对象三大特征&lt;/h2&gt;&lt;p&gt;封装、继承、多态作为面向对象编程的三大特征，其概念也是循序渐进的，首先需要有类的概念，随后将
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python面向对象初识</title>
    <link href="https://elijahyg.github.io/2020/06/07/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E8%AF%86/"/>
    <id>https://elijahyg.github.io/2020/06/07/Python面向对象初识/</id>
    <published>2020-06-07T12:19:28.000Z</published>
    <updated>2020-06-07T12:21:18.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面相对象初识"><a href="#面相对象初识" class="headerlink" title="面相对象初识"></a>面相对象初识</h2><ul><li><p>面向过程编程<br>面向过程编程即流程式编程，根据问题进行分析，抽象出解决问题所需要的步骤，并按步骤逐步进行函数调用解决问题。</p></li><li><p>函数式编程<br>函数式编程是一种编程范式，即给定输入值，经过函数处理后给出返回值，即为函数式编程。比起指令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。</p></li><li><p>面向对象编程<br>面向对象编程是种具有对象概念的程序编程典范，同时也是一种程序开发的抽象方针。它可能包含数据、属性、代码与方法。</p></li></ul><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><ul><li><p>概念<br>定义了一件事物的抽象特点，类的定义包含了数据的形式以及对数据的操作。</p></li><li><p>意义<br>类的出现，为面向对象编程的三个最重要的特性，即封装性、继承性、多态性，提供了实现的手段。</p></li><li><p>作用<br>属性引用、实例化</p></li></ul><ul><li>声明类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="string">"description of class"</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ul><li><p>概念<br>对象即类的实例</p></li><li><p>意义<br>类相当于是蓝图，定义了一件特定事物的抽象特点，而对象则是类的真实实例，实现了类定义。</p></li><li><p>作用<br>属性引用</p></li><li><p>创建对象</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="string">"description of class"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">foo = Foo()  <span class="comment"># 类的实例化，python中类的实例化会自动调用类的__init__方法</span></span><br></pre></td></tr></table></figure><hr><h3 id="属性与方法"><a href="#属性与方法" class="headerlink" title="属性与方法"></a>属性与方法</h3><ul><li><p>概念<br>在Python中 , 我们将静态属性 就称为<code>属性</code>, 将动态属性就称为<code>方法</code>, 以变量表示<code>属性</code>, 以函数表示<code>方法</code>。</p></li><li><p>调用<br>类/实例调用属性/方法的方式为：<code>类名/实例名 . 属性名/方法名</code></p></li><li><p>特殊的类属性</p></li></ul><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>_<em>dict_</em></td><td>查看类/实例成员, 返回字典</td></tr><tr><td>_<em>name_</em></td><td>查看类名</td></tr><tr><td>_<em>doc_</em></td><td>查看类的描述信息, 即类的注释</td></tr><tr><td>_<em>base_</em></td><td>查看当前类的第一个父类</td></tr><tr><td>_<em>bases_</em></td><td>查看当前类的所有父类, 返回元组</td></tr><tr><td>_<em>module_</em></td><td>查看当前类所在模块</td></tr><tr><td>_<em>class_</em></td><td>查看当前实例的父类</td></tr></tbody></table><hr><h3 id="构造方法-amp-析构方法"><a href="#构造方法-amp-析构方法" class="headerlink" title="构造方法 &amp; 析构方法"></a>构造方法 &amp; 析构方法</h3><ul><li><p>构造方法<br><code>\__init\__</code>被称作构造方法，其作用是用于对类进行初始化，如果需要对类设置属性，则可以在构造方法中进行初始化设置。</p></li><li><p>析构方法<br><code>\__del\__</code>被称作析构方法，当对象的生命周期结束时，它会自动地被调用运行。它最主要的目的在于，清空并释放对象先前创建或是占用的存储器资源。</p></li></ul><hr><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>命名空间它表示着一个标识符的可见范围，在定义类的时候会产生类的命名空间，同样在类实例化对象之后，对象也会对应产生命名空间。当调用类/实例的属性/方法时，Python解释器首先会到该实例的命名空间中去找对应属性/方法,如果没有找到则继续向上去类的命名空间去找,如果都没有找到对应调用的属性/方法，则抛出异常。</p><hr><h3 id="类-实例中的属性-方法绑定关系"><a href="#类-实例中的属性-方法绑定关系" class="headerlink" title="类/实例中的属性/方法绑定关系"></a>类/实例中的属性/方法绑定关系</h3><ul><li>Python作为一种动态语言，其所有的赋值机制都是通过动态绑定实现。</li><li>类中的属性/方法可供其创建的所有实例使用</li><li>实例中的属性/方法只适用于实例本身</li></ul><hr><h3 id="对象交互-amp-类的组合"><a href="#对象交互-amp-类的组合" class="headerlink" title="对象交互&amp;类的组合"></a>对象交互&amp;类的组合</h3><ul><li>对象交互</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">interactive</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(<span class="string">"【&#123;&#125;】 interactive 【&#123;&#125;】"</span>.format(self.x, other.x))</span><br><span class="line"></span><br><span class="line">obj_a = Foo(<span class="string">'obj_a'</span>)</span><br><span class="line">obj_b = Foo(<span class="string">'obj_b'</span>)</span><br><span class="line">obj_a.interactive(obj_b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">【obj_a】 interactive 【obj_b】</span><br></pre></td></tr></table></figure><ul><li>类的组合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传参</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, person)</span>:</span></span><br><span class="line">        self.person = person</span><br><span class="line"></span><br><span class="line">person = Worker(Person(<span class="string">'Yang'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, person)</span>:</span></span><br><span class="line">        self.person = Person(<span class="string">'Yang'</span>)</span><br><span class="line"></span><br><span class="line">worker = Worker()</span><br></pre></td></tr></table></figure><hr><h3 id="metaclass（元类）"><a href="#metaclass（元类）" class="headerlink" title="metaclass（元类）"></a>metaclass（元类）</h3><blockquote><p><a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#metaclasses" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3.8/reference/datamodel.html#metaclasses</a></p></blockquote><h4 id="概念及作用"><a href="#概念及作用" class="headerlink" title="概念及作用"></a>概念及作用</h4><ul><li>概念<br>一种用于创建类的类。<br>类定义包含类名、类字典和基类列表。<br>元类负责接受上述三个参数并创建相应的类。<br>大部分面向对象的编程语言都会提供一个默认实现。<br>Python 的特别之处在于可以创建自定义元类。<br>大部分用户永远不需要这个工具，但当需要出现时，元类可提供强大而优雅的解决方案。</li><li>作用<br>它们已被用于记录属性访问日志、添加线程安全性、跟踪对象创建、实现单例，以及其他许多任务。</li></ul><h4 id="元类的原理及定义类的执行过程"><a href="#元类的原理及定义类的执行过程" class="headerlink" title="元类的原理及定义类的执行过程"></a>元类的原理及定义类的执行过程</h4><ul><li><p>元类的原理<br>默认情况下，类是使用 type() 来构建的。类体会在一个新的命名空间内执行，类名会被局部绑定到 type(name, bases, namespace) 的结果。<br>类创建过程可通过在定义行传入 metaclass 关键字参数，或是通过继承一个包含此参数的现有类来进行定制。</p></li><li><p>类定义的执行过程</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、解析 MRO 条目:</span><br><span class="line">如果在类定义中出现的基类不是 type 的实例，则使用 __mro_entries__ 方法对其进行搜索，当找到结果时，它会以原始基类元组做参数进行调用。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、确定适当的元类:</span><br><span class="line">在类定义时确定元类的流程：</span><br><span class="line">    ①如果没有基类且没有显式指定元类，则使用 type()；</span><br><span class="line">    ②如果给出一个显式元类且不是 type() 的实例，则其会被直接用作元类；</span><br><span class="line">    ③如果给出一个 type() 的实例作为显式元类，或是定义了基类，则使用最近派生的元类。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、准备类命名空间:</span><br><span class="line">在类定义之时确定元类的命名空间原则：</span><br><span class="line">    ①如果元类具有 __prepare__ 属性，它会以 namespace = metaclass.__prepare__(name, bases, **kwds) 的形式被调用（其中如果有任何额外的关键字参数，则应来自类定义）。 __prepare__ 方法的实现应当为 classmethod()。</span><br><span class="line">    ②如果元类没有 __prepare__ 属性，则类命名空间将初始化为一个空的有序映射。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、执行类主体:</span><br><span class="line">    类主体会以（类似于） exec(body, globals(), namespace) 的形式被执行。普通调用与 exec() 的关键区别在于当类定义发生于函数内部时，词法作用域允许类主体（包括任何方法）引用来自当前和外部作用域的名称。</span><br><span class="line">    但是，即使当类定义发生于函数内部时，在类内部定义的方法仍然无法看到在类作用域层次上定义的名称。类变量必须通过实例的第一个形参或类方法来访问，或者是通过隐式词法作用域的 __class__ 引用。</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、创建类对象:</span><br><span class="line">一旦执行类主体完成填充类命名空间，将通过调用 metaclass(name, bases, namespace, **kwds) 创建类对象（此处的附加关键字参数与传入 __prepare__ 的相同）。</span><br><span class="line"></span><br><span class="line">如果类主体中有任何方法引用了 __class__ 或 super，这个类对象会通过零参数形式的 super(). __class__ 所引用，这是由编译器所创建的隐式闭包引用。这使用零参数形式的 super() 能够正确标识正在基于词法作用域来定义的类，而被用于进行当前调用的类或实例则是基于传递给方法的第一个参数来标识的。</span><br><span class="line"></span><br><span class="line">当使用默认的元类 type 或者任何最终会调用 type.__new__ 的元类时，以下额外的自定义步骤将在创建类对象之后被发起调用:</span><br><span class="line">    ①首先，type.__new__ 将收集类命名空间中所有定义了 __set_name__() 方法的描述器；</span><br><span class="line">    ②接下来，所有这些 __set_name__ 方法将使用所定义的类和特定描述器所赋的名称进行调用；</span><br><span class="line">    ③最后，将在新类根据方法解析顺序所确定的直接父类上调用 __init_subclass__() 钩子。</span><br><span class="line"></span><br><span class="line">在类对象创建之后，它会被传给包含在类定义中的类装饰器（如果有的话），得到的对象将作为已定义的类绑定到局部命名空间。</span><br><span class="line"></span><br><span class="line">当通过 type.__new__ 创建一个新类时，提供以作为命名空间形参的对象会被复制到一个新的有序映射并丢弃原对象。这个新副本包装于一个只读代理中，后者则成为类对象的 __dict__ 属性。</span><br></pre></td></tr></table></figure><hr><h3 id="单例模式的四种方式"><a href="#单例模式的四种方式" class="headerlink" title="单例模式的四种方式"></a>单例模式的四种方式</h3><ul><li><code>__new__</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""单例模式"""</span></span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br></pre></td></tr></table></figure><ul><li>模块导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得单例对象</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">my_singleton = My_Singleton()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上面的代码保存在文件 mysingleton.py 中，然后这样使用：</span></span><br><span class="line"><span class="keyword">from</span> mysingleton <span class="keyword">import</span> my_singleton</span><br><span class="line">my_singleton.foo()</span><br></pre></td></tr></table></figure><ul><li>装饰器（decorator）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line"><span class="meta">    @wraps(cls)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getinstance</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> getinstance</span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>元类（metaclass）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonType</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for Singleton"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args,**kwargs)</span>:</span></span><br><span class="line">        super(SingletonType, self).__init__(*args,**kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls,*args,**kwargs)</span>:</span></span><br><span class="line">        obj = cls.__new__(cls,*args,**kwargs)</span><br><span class="line">        cls.__init__(obj,*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(metaclass=SingletonType)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for Foo"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> object.__new__(cls)</span><br><span class="line">obj = Foo(<span class="string">'xxx'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面相对象初识&quot;&gt;&lt;a href=&quot;#面相对象初识&quot; class=&quot;headerlink&quot; title=&quot;面相对象初识&quot;&gt;&lt;/a&gt;面相对象初识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;面向过程编程&lt;br&gt;面向过程编程即流程式编程，根据问题进行分析，抽象出解决问题所需要的步骤
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python常用的模块&amp;包</title>
    <link href="https://elijahyg.github.io/2020/05/10/Python%E5%B8%B8%E7%94%A8%E7%9A%84%E6%A8%A1%E5%9D%97&amp;%E5%8C%85/"/>
    <id>https://elijahyg.github.io/2020/05/10/Python常用的模块&amp;包/</id>
    <published>2020-05-10T15:07:02.000Z</published>
    <updated>2020-05-10T15:09:13.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用模块-amp-包"><a href="#常用模块-amp-包" class="headerlink" title="常用模块&amp;包"></a>常用模块&amp;包</h2><h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><h4 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h4><ul><li><p>概念<br>又称正则表示式、正则表示法、规则表达式、常规表示法，是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。</p></li><li><p>字符组<br>在同一个位置可能出现的各种字符组成了一个字符组，在正则表达式中用<code>[]</code>表示。</p></li></ul><table><thead><tr><th>正则表达式</th><th>待匹配字符串</th><th>解释</th></tr></thead><tbody><tr><td>[0123456789]</td><td>6</td><td>字符组里包含待匹配字符</td></tr><tr><td>[abcdefghij]</td><td>a</td><td>字符组里包含待匹配字符</td></tr><tr><td>[0-9]</td><td>a</td><td>字符组里使用-作为范围，包含待匹配字符</td></tr><tr><td>[a-z]</td><td>a</td><td>字符组里使用-作为范围，包含待匹配字符</td></tr><tr><td>[A-Za-z0-9]</td><td>a</td><td>字符组里使用-作为范围，可以包含多个范围，包含待匹配字符</td></tr></tbody></table><ul><li>字符</li></ul><table><thead><tr><th>元字符</th><th>解释</th></tr></thead><tbody><tr><td>.</td><td>可以匹配除换行符(\n)外的任意字符</td></tr><tr><td>\w</td><td>可以匹配数字、字母、下划线(_)</td></tr><tr><td>\s</td><td>可以匹配任何空白字符，包括空格、制表符、换页符等等。等价于字符组用法的：[\f\n\r\t\v]</td></tr><tr><td>\d</td><td>可以匹配数字</td></tr><tr><td>\n</td><td>可以匹配一个换行符</td></tr><tr><td>\t</td><td>可以匹配一个制表符</td></tr><tr><td>\b</td><td>定位符,可以匹配一个单词的边界,这个位置的一侧是构成单词的字符,另一侧为非单词字符、字符串的开始或结束位置,”\b”是零宽度的</td></tr><tr><td>^</td><td>可以匹配字符串的开始</td></tr><tr><td>$</td><td>可以匹配字符串的结尾</td></tr><tr><td>\W</td><td>可以匹配非字母或数字或下划线</td></tr><tr><td>\D</td><td>可以匹配非数字</td></tr><tr><td>\S</td><td>可以匹配非空白符</td></tr><tr><td>\B</td><td>定位符,可以匹配一个非单词的边界</td></tr><tr><td>a|b</td><td>可以匹配字符a或字符b</td></tr><tr><td>()</td><td>可以匹配括号内的表达式，也表示一个组</td></tr><tr><td>[…]</td><td>可以匹配字符组中的字符</td></tr><tr><td>[^…]</td><td>可以匹配除了字符组中字符的所有字符</td></tr></tbody></table><ul><li>量词</li></ul><table><thead><tr><th>量词</th><th>解释</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><ul><li>转义符<code>\</code>与r</li></ul><table><thead><tr><th>字符</th><th>解释</th></tr></thead><tbody><tr><td><code>\</code></td><td>元字符中很多都包括<code>\</code>，如果需要匹配反斜杠<code>\</code>的话，则需要对其转义，在<code>\</code>前增加一个<code>\</code>变为<code>\\</code></td></tr><tr><td>r</td><td>如果需要转义的<code>\</code>过多，或者觉得麻烦，可以在正则表达式中使用r，则正则表达式字符串中的<code>\</code>视为<code>\</code>，不当做元字符的一部分</td></tr></tbody></table><ul><li>贪婪匹配原则<br>在满足匹配条件时，匹配尽可能长的字符串，默认情况下，采用贪婪匹配</li></ul><h4 id="re模块介绍"><a href="#re模块介绍" class="headerlink" title="re模块介绍"></a>re模块介绍</h4><p>re模块使Python拥有全部的正则表达式功能,re模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数</p><h4 id="re模块常用方法"><a href="#re模块常用方法" class="headerlink" title="re模块常用方法"></a>re模块常用方法</h4><ul><li>findall(): 返回所有满足匹配条件的结果至列表中</li><li>search(): 返回第一个包含匹配条件的信息对象，可以调用该对象的group()方法将匹配的字符输出，如果没有匹配到则调用group()方法会报错</li><li>match(): 与search()方法类似，但是仅在字符串开始出匹配，返回第一个包含匹配条件的信息对象，调用该对象的group()方法将匹配的字符输出，如果没有匹配到则调用group()方法会报错</li><li>split(): 逐个按符合条件的字符串对待匹配字符串进行切分，返回结果列表</li><li>sub(): 将待匹配字符串中满足匹配条件的内容进行替换，最后一个参数指定替换的次数，返回替换后的字符串</li><li>subn(): 与sub()方法类型，但是无法指定替换的次数，并且输出的是一个元组，包括替换后的字符串和替换的总次数</li><li>compile(): 将正则表达式编译成为一个正则表达式对象，之后可以用re模块中的方法对对象进行操作</li><li>finditer(): finditer返回一个存放匹配结果的迭代器，用next等方法取出存放结果的对象，再用group()方法取出结果</li><li>findall的优先级查询: 将findall()方法中匹配条件中加括号后，只会输出匹配到的字符串；可以在括号中加入?:取消权限</li><li>split的优先级查询: 将split()方法中的匹配条件加括号后，会将满足条件的切分字符也输出值最终列表中，同样可以在括号中加入?:取消权限</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">'life1is2short,I3use4python5'</span> <span class="comment"># 待匹配字符串</span></span><br><span class="line"></span><br><span class="line">res = re.findall(<span class="string">"\d"</span>, s)</span><br><span class="line">print(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = re.search(<span class="string">"1"</span>, s)</span><br><span class="line">print(res.group())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = re.match(<span class="string">"1"</span>, s)</span><br><span class="line">print(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = re.split(<span class="string">"\d"</span>, s)</span><br><span class="line">print(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'life'</span>, <span class="string">'is'</span>, <span class="string">'short,I'</span>, <span class="string">'use'</span>, <span class="string">'python'</span>, <span class="string">''</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = re.sub(<span class="string">"\d"</span>, <span class="string">"___"</span>, s, <span class="number">2</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"life___is___short,I3use4python5"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = re.subn(<span class="string">"\d"</span>, <span class="string">"___"</span>, s)</span><br><span class="line">print(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"life___is___short,I___use___python___"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">prog = re.compile(<span class="string">"\d"</span>)</span><br><span class="line">res = prog.match(s)</span><br><span class="line"><span class="comment"># 等价于 res = re.match("\d", s)</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = re.finditer(<span class="string">"\d"</span>, s)</span><br><span class="line">print([i.group() <span class="keyword">for</span> i <span class="keyword">in</span> res]) <span class="comment"># 返回为一个迭代器 iterator 保存了 匹配对象 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="collections模块"><a href="#collections模块" class="headerlink" title="collections模块"></a>collections模块</h3><h4 id="collections模块介绍"><a href="#collections模块介绍" class="headerlink" title="collections模块介绍"></a>collections模块介绍</h4><p>这个模块实现了特定目标的容器，以提供Python标准内建容器 dict , list , set , 和 tuple 的替代选择。</p><h4 id="collections模块常用方法"><a href="#collections模块常用方法" class="headerlink" title="collections模块常用方法"></a>collections模块常用方法</h4><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>namedtuple()</td><td>创建命名元组子类的工厂函数</td></tr><tr><td>deque</td><td>类似列表(list)的容器，实现了在两端快速添加(append)和弹出(pop)</td></tr><tr><td>ChainMap</td><td>类似字典(dict)的容器类，将多个映射集合到一个视图里面</td></tr><tr><td>Counter</td><td>字典的子类，提供了可哈希对象的计数功能</td></tr><tr><td>OrderedDict</td><td>字典的子类，保存了他们被添加的顺序</td></tr><tr><td>defaultdict</td><td>字典的子类，提供了一个工厂函数，为字典查询提供一个默认值</td></tr><tr><td>UserDict</td><td>封装了字典对象，简化了字典子类化</td></tr><tr><td>UserList</td><td>封装了列表对象，简化了列表子类化</td></tr><tr><td>UserString</td><td>封装了列表对象，简化了字符串子类化</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"><span class="comment"># namedtuple</span></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"></span><br><span class="line">这个新的子类用于创建类元组的对象，可以通过域名来获取属性值，同样也可以通过索引和迭代获取值。</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Point = namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span><br><span class="line">p = Point(<span class="number">11</span>, y=<span class="number">22</span>)</span><br><span class="line">res = p[<span class="number">0</span>] + p[<span class="number">1</span>]</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">33</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"><span class="comment"># deque</span></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line">返回一个新的双向队列对象，从左到右初始化(用方法 append()) ，从迭代对象数据创建。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = deque(<span class="string">'ghi'</span>) <span class="comment"># 创建一个新的deque</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> elem <span class="keyword">in</span> d: <span class="comment"># 循环输出deque中的元素</span></span><br><span class="line"><span class="meta">... </span>print(elem.upper())</span><br><span class="line">G</span><br><span class="line">H</span><br><span class="line">I</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.append(<span class="string">'j'</span>) <span class="comment"># 从右边插入新元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.appendleft(<span class="string">'f'</span>) <span class="comment"># 从左边插入新元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d <span class="comment"># 输出deque所有元素</span></span><br><span class="line">deque([<span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop() <span class="comment"># 从右边推出最后一个元素</span></span><br><span class="line"><span class="string">'j'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.popleft() <span class="comment"># 从左边推出最后一个元素</span></span><br><span class="line"><span class="string">'f'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(d) <span class="comment"># 输出deque所有元素</span></span><br><span class="line">[<span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">0</span>] <span class="comment"># 输出最左边元素</span></span><br><span class="line"><span class="string">'g'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">-1</span>] <span class="comment"># 输出最右边元素</span></span><br><span class="line"><span class="string">'i'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(reversed(d)) <span class="comment"># 逆向输出deque所有元素</span></span><br><span class="line">[<span class="string">'i'</span>, <span class="string">'h'</span>, <span class="string">'g'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'h'</span> <span class="keyword">in</span> d <span class="comment"># 在deque中查找元素</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.extend(<span class="string">'jkl'</span>) <span class="comment"># 一次性添加多个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.rotate(<span class="number">1</span>) <span class="comment"># 所有元素向右移动</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">'l'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.rotate(<span class="number">-1</span>) <span class="comment"># 所有元素向左移动</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>deque(reversed(d)) <span class="comment"># 创建一个新的deque</span></span><br><span class="line">deque([<span class="string">'l'</span>, <span class="string">'k'</span>, <span class="string">'j'</span>, <span class="string">'i'</span>, <span class="string">'h'</span>, <span class="string">'g'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.clear() <span class="comment"># 清空deque</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop() <span class="comment"># 空deque不能推出元素</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File <span class="string">"&lt;pyshell#6&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> -toplevel-</span><br><span class="line">        d.pop()</span><br><span class="line">IndexError: pop <span class="keyword">from</span> an empty deque</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.extendleft(<span class="string">'abc'</span>) <span class="comment"># 一次性添加多个元素，从左边开始插入</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"><span class="comment"># ChainMap</span></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line">将多个字典或者其他映射组合在一起，创建一个单独的可更新的视图。</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line">baseline = &#123;<span class="string">'music'</span>: <span class="string">'bach'</span>, <span class="string">'art'</span>: <span class="string">'rembrandt'</span>&#125;</span><br><span class="line">adjustments = &#123;<span class="string">'art'</span>: <span class="string">'van gogh'</span>, <span class="string">'opera'</span>: <span class="string">'carmen'</span>&#125;</span><br><span class="line">print(list(ChainMap(adjustments, baseline)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'music'</span>, <span class="string">'opera'</span>, <span class="string">'art'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line">baseline = &#123;<span class="string">'music'</span>: <span class="string">'bach'</span>, <span class="string">'art'</span>: <span class="string">'rembrandt'</span>&#125;</span><br><span class="line">adjustments = &#123;<span class="string">'art'</span>: <span class="string">'van gogh'</span>, <span class="string">'opera'</span>: <span class="string">'carmen'</span>&#125;</span><br><span class="line">combined = baseline.copy()</span><br><span class="line">combined.update(adjustments)</span><br><span class="line">print(list(combined))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'music'</span>, <span class="string">'art'</span>, <span class="string">'opera'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"><span class="comment"># Counter:</span></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line">是dict的子类，用于计数可哈希对象。它是一个集合，元素像字典键(key)一样存储，它们的计数存储为值。</span><br><span class="line"></span><br><span class="line">c = Counter() <span class="comment"># 创建新的空Counter对象</span></span><br><span class="line">c = Counter(<span class="string">'gallahad'</span>) <span class="comment"># 创建字符串的Counter对象</span></span><br><span class="line">c = Counter(&#123;<span class="string">'red'</span>: <span class="number">4</span>, <span class="string">'blue'</span>: <span class="number">2</span>&#125;) <span class="comment"># 创建映射关系的Counter对象</span></span><br><span class="line">c = Counter(cats=<span class="number">4</span>, dogs=<span class="number">8</span>) <span class="comment"># 创建关键字的Counter对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"><span class="comment"># OrderedDict</span></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"></span><br><span class="line">它具有专门用于重新排列字典顺序的方法。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = OrderedDict.fromkeys(<span class="string">'abcde'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.move_to_end(<span class="string">'b'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join(d.keys())</span><br><span class="line"><span class="string">'acdeb'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.move_to_end(<span class="string">'b'</span>, last=<span class="literal">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join(d.keys())</span><br><span class="line"><span class="string">'bacde'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"><span class="comment"># defaultdict</span></span><br><span class="line"><span class="comment"># ------------------- </span></span><br><span class="line">一个新的类似字典的对象。它重载了一个方法并添加了一个可写的实例变量。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [(<span class="string">'yellow'</span>, <span class="number">1</span>), (<span class="string">'blue'</span>, <span class="number">2</span>), (<span class="string">'yellow'</span>, <span class="number">3</span>), (<span class="string">'blue'</span>, <span class="number">4</span>), (<span class="string">'red'</span>, <span class="number">1</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = defaultdict(list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> s:</span><br><span class="line"><span class="meta">... </span>d[k].append(v)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(d.items())</span><br><span class="line">[(<span class="string">'blue'</span>, [<span class="number">2</span>, <span class="number">4</span>]), (<span class="string">'red'</span>, [<span class="number">1</span>]), (<span class="string">'yellow'</span>, [<span class="number">1</span>, <span class="number">3</span>])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"><span class="comment"># UserDict</span></span><br><span class="line"><span class="comment"># ------------------- </span></span><br><span class="line">模拟一个字典类。这个实例的内容保存为一个正常字典， 可以通过 UserDict 实例的 data 属性存取。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"><span class="comment"># UserList</span></span><br><span class="line"><span class="comment"># ------------------- </span></span><br><span class="line">这个类封装了列表对象。它是一个有用的基础类，对于你想自定义的类似列表的类，可以继承和覆盖现有的方法，也可以添加新的方法。这样我们可以对列表添加新的行为。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"><span class="comment"># UserString</span></span><br><span class="line"><span class="comment"># ------------------- </span></span><br><span class="line">用作字符串对象的外包装。对这个类的需求已部分由直接创建 str 的子类的功能所替代</span><br></pre></td></tr></table></figure><hr><h3 id="时间模块"><a href="#时间模块" class="headerlink" title="时间模块"></a>时间模块</h3><h4 id="表示时间的三种方式"><a href="#表示时间的三种方式" class="headerlink" title="表示时间的三种方式"></a>表示时间的三种方式</h4><ul><li>时间戳：通常来说，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.time())</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1515570662.77503</span></span><br></pre></td></tr></table></figure><ul><li>结构化时间：结构化时间元组共有9个元素(年，月，日，时，分，秒，一年中第几周，一年中第几天等）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.localtime())</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">1</span>, tm_mday=<span class="number">10</span>, tm_hour=<span class="number">16</span>, tm_min=<span class="number">0</span>, tm_sec=<span class="number">33</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">10</span>, tm_isdst=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>时间字符串：以字符串表示年、月、日、时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.strftime(<span class="string">"%Y-%m-%d %H-%M-%S"</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2018</span><span class="number">-01</span><span class="number">-10</span> <span class="number">15</span><span class="number">-59</span><span class="number">-16</span></span><br></pre></td></tr></table></figure><h4 id="几种格式之间的转换"><a href="#几种格式之间的转换" class="headerlink" title="几种格式之间的转换"></a>几种格式之间的转换</h4><ul><li>时间戳–&gt;结构化时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># time.gmtime(时间戳) #UTC时间，与英国伦敦当地时间一致</span></span><br><span class="line"><span class="comment"># time.localtime(时间戳) #当地时间。例如当地时间为北京时间，与UTC时间相差8小时，UTC时间+8小时 = 北京时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">timestamp = <span class="number">1515570662.77503</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳 → 当地时间</span></span><br><span class="line">print(time.localtime(timestamp))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">1</span>, tm_mday=<span class="number">10</span>, tm_hour=<span class="number">15</span>, tm_min=<span class="number">51</span>, tm_sec=<span class="number">2</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">10</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳 → UTC时间</span></span><br><span class="line">print(time.gmtime(timestamp))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">1</span>, tm_mday=<span class="number">10</span>, tm_hour=<span class="number">7</span>, tm_min=<span class="number">51</span>, tm_sec=<span class="number">2</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">10</span>, tm_isdst=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>结构化时间–&gt;时间戳</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># time.mktime(结构化时间)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time_tuple  = time.localtime(<span class="number">1500000000</span>)</span><br><span class="line">print(time.mktime(time_tuple))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1500000000.0</span></span><br></pre></td></tr></table></figure><ul><li>字符串时间–&gt;结构化时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># time.strptime(时间字符串,字符串对应格式)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.strftime(<span class="string">"%Y-%m-%d %X"</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2018</span><span class="number">-01</span><span class="number">-10</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">46</span></span><br><span class="line">print(time.strftime(<span class="string">"%Y-%m-%d"</span>,time.localtime(<span class="number">1515570662.77503</span>)))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2018</span><span class="number">-01</span><span class="number">-10</span></span><br></pre></td></tr></table></figure><ul><li>结构化时间–&gt;字符串时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># time.strftime(“格式定义”,”结构化时间”) 结构化时间参数若不传，则现实当前时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.strptime(<span class="string">"2017-03-16"</span>,<span class="string">"%Y-%m-%d"</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.struct_time(tm_year=<span class="number">2017</span>, tm_mon=<span class="number">3</span>, tm_mday=<span class="number">16</span>, tm_hour=<span class="number">0</span>, tm_min=<span class="number">0</span>, tm_sec=<span class="number">0</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">75</span>, tm_isdst=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">print(time.strptime(<span class="string">"07/24/2017"</span>,<span class="string">"%m/%d/%Y"</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.struct_time(tm_year=<span class="number">2017</span>, tm_mon=<span class="number">7</span>, tm_mday=<span class="number">24</span>, tm_hour=<span class="number">0</span>, tm_min=<span class="number">0</span>, tm_sec=<span class="number">0</span>, tm_wday=<span class="number">0</span>, tm_yday=<span class="number">205</span>, tm_isdst=<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h3><h4 id="random模块介绍"><a href="#random模块介绍" class="headerlink" title="random模块介绍"></a>random模块介绍</h4><p>该模块实现了各种分布的伪随机数生成器。</p><h4 id="random模块常用方法"><a href="#random模块常用方法" class="headerlink" title="random模块常用方法"></a>random模块常用方法</h4><ul><li>随机小数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.random()) <span class="comment"># 随机输出在0-1之间的小数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.11828833626857149</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.uniform(<span class="number">1</span>,<span class="number">5</span>)) <span class="comment"># 随机输出在范围之间的小数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2.164732131520036</span></span><br></pre></td></tr></table></figure><ul><li>随机整数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.randint(<span class="number">5</span>,<span class="number">10</span>)) <span class="comment"># randint中的范围包括首尾</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.randrange(<span class="number">5</span>,<span class="number">10</span>,<span class="number">2</span>)) <span class="comment"># randrange中的范围顾首不顾尾，可以指定步长</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">7</span></span><br></pre></td></tr></table></figure><ul><li>随机返回列表元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.choice([<span class="number">1</span>,<span class="string">'23'</span>,[<span class="number">4</span>,<span class="number">5</span>],(<span class="number">6</span>,<span class="number">7</span>)]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">6</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure><ul><li>随机返回多个列表元素，可以指定返回的个数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.sample([<span class="number">1</span>,<span class="string">'23'</span>,[<span class="number">4</span>,<span class="number">5</span>],(<span class="number">6</span>,<span class="number">7</span>)],<span class="number">2</span>)) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(<span class="number">6</span>, <span class="number">7</span>), <span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>打乱顺序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">item=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">random.shuffle(item)</span><br><span class="line">print(item)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h3><h4 id="os模块介绍"><a href="#os模块介绍" class="headerlink" title="os模块介绍"></a>os模块介绍</h4><p>本模块提供了一种使用与操作系统相关的功能的便捷式途径。</p><h4 id="os模块常用方法"><a href="#os模块常用方法" class="headerlink" title="os模块常用方法"></a>os模块常用方法</h4><ul><li>进程参数: 这些函数和数据项提供了操作当前进程和用户的信息。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">os.ctermid(): 返回与进程控制终端对应的文件名。</span><br><span class="line">os.environ: 一个表示字符串环境的 mapping 对象。</span><br><span class="line">os.environb:字节版本的 environ: 一个以字节串表示环境的 mapping 对象。</span><br><span class="line">os.fsencode(filename)：编码 路径类 文件名 为文件系统接受的形式，使用 <span class="string">'surrogateescape'</span> 代理转义编码错误处理器，在Windows系统上会使用 <span class="string">'strict'</span> ；返回 bytes 字节类型不变。</span><br><span class="line">os.fsdecode(filename)：从文件系统编码方式解码为 路径类 文件名，使用 <span class="string">'surrogateescape'</span> 代理转义编码错误处理器，在Windows系统上会使用 <span class="string">'strict'</span> ；返回 str 字符串不变。</span><br><span class="line">os.fspath(path):返回路径的文件系统表示。</span><br><span class="line">os.getenv(key, default=<span class="literal">None</span>):如果存在，返回环境变量 key 的值，否则返回 default。 key ， default 和返回值均为 str 字符串类型。</span><br><span class="line">os.getenvb(key, default=<span class="literal">None</span>):如果存在环境变量 key 那么返回其值，否则返回 default。 key ， default 和返回值均为bytes字节串类型。</span><br><span class="line">os.get_exec_path(env=<span class="literal">None</span>):返回将用于搜索可执行文件的目录列表，与在外壳程序中启动一个进程时相似。</span><br><span class="line">os.getegid():返回当前进程的有效组ID。</span><br><span class="line">os.geteuid():返回当前进程的有效用户ID。</span><br><span class="line">os.getgid():返回当前进程的实际组ID。</span><br><span class="line">os.getgrouplist(user, group):返回该用户所在的组 ID 列表。</span><br><span class="line">os.getgroups(): 返回当前进程对应的组ID列表</span><br><span class="line">os.getlogin():返回通过控制终端进程进行登录的用户名。</span><br><span class="line">os.getpgid(pid):根据进程id pid 返回进程的组 ID 列表。</span><br><span class="line">os.getpgrp():返回当时进程组的ID</span><br><span class="line">os.getpid():返回当前进程ID</span><br><span class="line">os.getppid():返回父进程ID。</span><br><span class="line">os.getpriority(which, who):获取程序调度优先级。</span><br><span class="line">os.getresuid():返回一个由 (ruid, euid, suid) 所组成的元组，分别表示当前进程的真实用户ID，有效用户ID和甲暂存用户ID。</span><br><span class="line">os.getresgid():返回一个由 (rgid, egid, sgid) 所组成的元组，分别表示当前进程的真实组ID，有效组ID和暂存组ID。</span><br><span class="line">os.getuid():返回当前进程的真实用户ID。</span><br><span class="line">os.initgroups(username, gid):调用系统 initgroups()，使用指定用户所在的所有值来初始化组访问列表，包括指定的组ID</span><br><span class="line">os.putenv(key, value):将名为 key 的环境变量值设置为 value。</span><br><span class="line">os.setegid(egid):设置当前进程的有效组ID。</span><br><span class="line">os.seteuid(euid):设置当前进程的有效用户ID。</span><br><span class="line">os.setgid(gid):设置当前进程的组ID。</span><br><span class="line">os.setgroups(groups):将 group 参数值设置为与当进程相关联的附加组ID列表</span><br><span class="line">os.setpgrp():根据已实现的版本（如果有）来调用系统 setpgrp() 或 setpgrp(<span class="number">0</span>, <span class="number">0</span>) 。</span><br><span class="line">os.setpgid(pid, pgrp):使用系统调用 setpgid()，将 pid 对应进程的组ID设置为 pgrp。</span><br><span class="line">os.setpriority(which, who, priority):设置程序调度优先级。</span><br><span class="line">os.setregid(rgid, egid):设置当前进程的真实和有效组ID。</span><br><span class="line">os.setresgid(rgid, egid, sgid):设置当前进程的真实，有效和暂存组ID。</span><br><span class="line">os.setresuid(ruid, euid, suid):设置当前进程的真实，有效和暂存用户ID。</span><br><span class="line">os.setreuid(ruid, euid):设置当前进程的真实和有效用户ID。</span><br><span class="line">os.getsid(pid):调用系统调用 getsid()。</span><br><span class="line">os.setsid():使用系统调用 getsid()。</span><br><span class="line">os.setuid(uid):设置当前进程的用户ID。</span><br><span class="line">os.strerror(code):根据 code 中的错误码返回错误消息。</span><br><span class="line">os.supports_bytes_environ:如果操作系统上原生环境类型是字节型则为 <span class="literal">True</span> (例如在 Windows 上为 <span class="literal">False</span>)。</span><br><span class="line">os.umask(mask):设定当前数值掩码并返回之前的掩码。</span><br><span class="line">os.uname():返回当前操作系统的识别信息。</span><br><span class="line">os.unsetenv(key):取消设置（删除）名为 key 的环境变量。</span><br></pre></td></tr></table></figure><ul><li>创建文件对象: 这些函数创建新的 file objects。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.fdopen(fd, *args, **kwargs)：返回打开文件描述符 fd 对应文件的对象。</span><br></pre></td></tr></table></figure><ul><li>文件描述符操作: 这些函数对文件描述符所引用的 I/O 流进行操作。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> os.close(fd):关闭文件描述符 fd</span><br><span class="line"> os.closerange(fd_low, fd_high):关闭从 fd_low （包括）到 fd_high （排除）间的文件描述符，并忽略错误。</span><br><span class="line"> os.copy_file_range(src, dst, count, offset_src=<span class="literal">None</span>, offset_dst=<span class="literal">None</span>):从文件描述符 src 复制 count 字节，从偏移量 offset_src 开始读取，到文件描述符 dst，从偏移量 offset_dst 开始写入。</span><br><span class="line"> os.device_encoding(fd):如果连接到终端，则返回一个与 fd 关联的设备描述字符，否则返回 <span class="literal">None</span>。</span><br><span class="line"> os.dup(fd):返回一个文件描述符 fd 的副本。</span><br><span class="line"> os.dup2(fd, fd2, inheritable=<span class="literal">True</span>):把文件描述符 fd 复制为 fd2，必要时先关闭后者。</span><br><span class="line"> os.fchmod(fd, mode):将 fd 指定文件的权限状态修改为 mode。</span><br><span class="line"> os.fchown(fd, uid, gid):分别将 fd 指定文件的所有者和组 ID 修改为 uid 和 gid 的值。</span><br><span class="line"> os.fdatasync(fd):强制将文件描述符 fd 指定文件写入磁盘。</span><br><span class="line"> os.fpathconf(fd, name):返回与打开的文件有关的系统配置信息。</span><br><span class="line"> os.fstat(fd):获取文件描述符 fd 的状态. 返回一个 stat_result 对象。</span><br><span class="line"> os.fstatvfs(fd):返回文件系统的信息，该文件系统是文件描述符 fd 指向的文件所在的文件系统，与 statvfs() 一样。从 Python <span class="number">3.3</span> 开始，它等效于 os.statvfs(fd)。</span><br><span class="line"> os.fsync(fd):强制将文件描述符 fd 指向的文件写入磁盘。</span><br><span class="line"> os.ftruncate(fd, length):将文件描述符 fd 指向的文件切分开，以使其最大为 length 字节。从 Python <span class="number">3.3</span> 开始，它等效于 os.truncate(fd, length)。</span><br><span class="line"> os.get_blocking(fd):获取文件描述符的阻塞模式：如果设置了 O_NONBLOCK 标志位，返回 <span class="literal">False</span>，如果该标志位被清除，返回 <span class="literal">True</span>。</span><br><span class="line"> os.isatty(fd):如果文件描述符 fd 打开且已连接至 tty 设备（或类 tty 设备），返回 <span class="literal">True</span>，否则返回 <span class="literal">False</span>。</span><br><span class="line"> os.lockf(fd, cmd, len):在打开的文件描述符上，使用、测试或删除 POSIX 锁。</span><br><span class="line"> os.lseek(fd, pos, how):将文件描述符 fd 的当前位置设置为 pos，</span><br><span class="line"> os.open(path, flags, mode=<span class="number">0o777</span>, *, dir_fd=<span class="literal">None</span>):打开文件 path，根据 flags 设置各种标志位，并根据 mode 设置其权限模式。</span><br><span class="line"> os.openpty():打开一对新的伪终端，返回一对文件描述符``（主，从）``，分别为 pty 和 tty。</span><br><span class="line"> os.pipe():创建一个管道，返回一对分别用于读取和写入的文件描述符 (r, w)。</span><br><span class="line"> os.pipe2(flags):创建带有 flags 标志位的管道。</span><br><span class="line"> os.posix_fallocate(fd, offset, len):确保为 fd 指向的文件分配了足够的磁盘空间，该空间从偏移量 offset 开始，到 len 字节为止。</span><br><span class="line"> os.posix_fadvise(fd, offset, len, advice):声明即将以特定模式访问数据，使内核可以提前进行优化。</span><br><span class="line"> os.pread(fd, n, offset):从文件描述符 fd 所指向文件的偏移位置 offset 开始，读取至多 n 个字节，而保持文件偏移量不变。</span><br><span class="line"> os.preadv(fd, buffers, offset, flags=<span class="number">0</span>):从文件描述符 fd 所指向文件的偏移位置 offset 开始，将数据读取至可变 字节类对象 缓冲区 buffers 中，保持文件偏移量不变。</span><br><span class="line"> os.RWF_NOWAIT:不要等待无法立即获得的数据。</span><br><span class="line"> os.RWF_HIPRI:高优先级读/写。</span><br><span class="line"> os.pwrite(fd, str, offset):将 str 中的字节串 (bytestring) 写入文件描述符 fd 的偏移位置 offset 处，保持文件偏移量不变。</span><br><span class="line"> os.pwritev(fd, buffers, offset, flags=<span class="number">0</span>):将缓冲区 buffers 的内容写入文件描述符 fd 的偏移位置 offset 处，保持文件偏移量不变。</span><br><span class="line"> os.RWF_DSYNC:提供立即写入功能，等效于 O_DSYNC open(<span class="number">2</span>) 标志</span><br><span class="line"> os.RWF_SYNC:提供立即写入功能，等效于 O_SYNC open(<span class="number">2</span>) 标志。</span><br><span class="line"> os.read(fd, n):从文件描述符 fd 中读取至多 n 个字节。</span><br><span class="line"> os.sendfile(out, <span class="keyword">in</span>, offset, count, [headers, ][trailers, ]flags=<span class="number">0</span>):将文件描述符 <span class="keyword">in</span> 中的 count 字节复制到文件描述符 out 的偏移位置 offset 处。返回复制的字节数，如果到达 EOF，返回 <span class="number">0</span>。</span><br><span class="line"> os.set_blocking(fd, blocking):设置指定文件描述符的阻塞模式：如果 blocking 为 <span class="literal">False</span>，则为该描述符设置 O_NONBLOCK 标志位，反之则清除该标志位。</span><br><span class="line"> os.readv(fd, buffers):从文件描述符 fd 将数据读取至多个可变的 字节类对象 缓冲区 buffers 中。</span><br><span class="line"> os.tcgetpgrp(fd):返回与 fd 指定的终端相关联的进程组（fd 是由 os.open() 返回的已打开的文件描述符）</span><br><span class="line"> os.tcsetpgrp(fd, pg):设置与 fd 指定的终端相关联的进程组为 pg*（*fd 是由 os.open() 返回的已打开的文件描述符）。</span><br><span class="line"> os.ttyname(fd):返回一个字符串，该字符串表示与文件描述符 fd 关联的终端。</span><br><span class="line"> os.write(fd, str):将 str 中的字节串 (bytestring) 写入文件描述符 fd。</span><br><span class="line"> os.writev(fd, buffers):将缓冲区 buffers 的内容写入文件描述符 fd。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询终端的尺寸</span></span><br><span class="line"> os.get_terminal_size(fd=STDOUT_FILENO):返回终端窗口的尺寸，格式为 (columns, lines)，它是类型为 terminal_size 的元组。</span><br><span class="line"> os.terminal_size:元组的子类，存储终端窗口尺寸 (columns, lines)。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件描述符的继承</span></span><br><span class="line"> os.get_inheritable(fd):获取指定文件描述符的“可继承”标志位（为布尔值）。</span><br><span class="line"> os.set_inheritable(fd, inheritable):设置指定文件描述符的“可继承”标志位。</span><br><span class="line"> os.get_handle_inheritable(handle):获取指定句柄的“可继承”标志位（为布尔值）。</span><br><span class="line"> os.set_handle_inheritable(handle, inheritable):设置指定句柄的“可继承”标志位。</span><br></pre></td></tr></table></figure><ul><li>文件和目录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">os.access(path, mode, *, dir_fd=<span class="literal">None</span>, effective_ids=<span class="literal">False</span>, follow_symlinks=<span class="literal">True</span>):使用 实际用户ID/用户组ID 测试对 path 的访问。</span><br><span class="line">os.chdir(path):将当前工作目录更改为 path。</span><br><span class="line">os.chflags(path, flags, *, follow_symlinks=<span class="literal">True</span>):将 path 的 flags 设置为其他由数字表示的 flags。</span><br><span class="line">os.chmod(path, mode, *, dir_fd=<span class="literal">None</span>, follow_symlinks=<span class="literal">True</span>):将 path 的 mode 更改为其他由数字表示的 mode。 </span><br><span class="line">os.chown(path, uid, gid, *, dir_fd=<span class="literal">None</span>, follow_symlinks=<span class="literal">True</span>):将 path 的用户和组 ID 分别修改为数字形式的 uid 和 gid。 </span><br><span class="line">os.chroot(path):将当前进程的根目录更改为 path。 </span><br><span class="line">os.fchdir(fd):将当前工作目录更改为文件描述符 fd 指向的目录。fd 必须指向打开的目录而非文件。从 Python <span class="number">3.3</span> 开始，它等效于 os.chdir(fd)。</span><br><span class="line">os.getcwd():返回表示当前工作目录的字符串。</span><br><span class="line">os.getcwdb():返回表示当前工作目录的字节串 (bytestring)。</span><br><span class="line">os.lchflags(path, flags):将 path 的 flags 设置为其他由数字表示的 flags，与 chflags() 类似，但不跟踪符号链接。</span><br><span class="line">os.lchmod(path, mode):将 path 的权限状态修改为 mode。</span><br><span class="line">os.lchown(path, uid, gid):将 path 的用户和组 ID 分别修改为数字形式的 uid 和 gid，本函数不跟踪符号链接。从 Python <span class="number">3.3</span> 开始，它等效于 os.chown(path, uid, gid, follow_symlinks=<span class="literal">False</span>)。</span><br><span class="line">os.link(src, dst, *, src_dir_fd=<span class="literal">None</span>, dst_dir_fd=<span class="literal">None</span>, follow_symlinks=<span class="literal">True</span>):创建一个指向 src 的硬链接，名为 dst。</span><br><span class="line">os.listdir(path=<span class="string">'.'</span>):返回一个列表，该列表包含了 path 中所有文件与目录的名称。</span><br><span class="line">os.lstat(path, *, dir_fd=<span class="literal">None</span>)：在给定路径上执行本函数，其操作相当于 lstat() 系统调用，类似于 stat() 但不跟踪符号链接。返回值是 stat_result 对象。</span><br><span class="line">os.mkdir(path, mode=<span class="number">0o777</span>, *, dir_fd=<span class="literal">None</span>):创建目录path，并使用数字定义模式。</span><br><span class="line">os.makedirs(name, mode=<span class="number">0o777</span>, exist_ok=<span class="literal">False</span>):Recursive directory creation function. Like mkdir(), but makes all intermediate-level directories needed to contain the leaf directory.</span><br><span class="line">os.rmdir(path, *, dir_fd=<span class="literal">None</span>):Remove (delete) the directory path.</span><br><span class="line">os.stat(path, *, dir_fd=<span class="literal">None</span>, follow_symlinks=<span class="literal">True</span>): Get the status of a file <span class="keyword">or</span> a file descriptor.</span><br><span class="line">os.walk(top, topdown=<span class="literal">True</span>, onerror=<span class="literal">None</span>, followlinks=<span class="literal">False</span>):Generate the file names <span class="keyword">in</span> a directory tree by walking the tree either top-down <span class="keyword">or</span> bottom-up. For each directory <span class="keyword">in</span> the tree rooted at directory top (including top itself), it yields a <span class="number">3</span>-tuple (dirpath, dirnames, filenames).</span><br></pre></td></tr></table></figure><ul><li>进程管理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">os.abort():Generate a SIGABRT signal to the current process.</span><br><span class="line">os.add_dll_directory(path):Add a path to the DLL search path.</span><br><span class="line"></span><br><span class="line">These functions all execute a new program, replacing the current process; they do <span class="keyword">not</span> <span class="keyword">return</span>.</span><br><span class="line">   os.execl(path, arg0, arg1, ...)</span><br><span class="line">   os.execle(path, arg0, arg1, ..., env)</span><br><span class="line">   os.execlp(file, arg0, arg1, ...)</span><br><span class="line">   os.execlpe(file, arg0, arg1, ..., env)</span><br><span class="line">   os.execv(path, args)</span><br><span class="line">   os.execve(path, args, env)</span><br><span class="line">   os.execvp(file, args)</span><br><span class="line">   os.execvpe(file, args, env)</span><br><span class="line"></span><br><span class="line">Execute the program path <span class="keyword">in</span> a new process.</span><br><span class="line">   os.spawnl(mode, path, ...)</span><br><span class="line">   os.spawnle(mode, path, ..., env)</span><br><span class="line">   os.spawnlp(mode, file, ...)</span><br><span class="line">   os.spawnlpe(mode, file, ..., env)</span><br><span class="line">   os.spawnv(mode, path, args)</span><br><span class="line">   os.spawnve(mode, path, args, env)</span><br><span class="line">   os.spawnvp(mode, file, args)</span><br><span class="line">   os.spawnvpe(mode, file, args, env)</span><br></pre></td></tr></table></figure><ul><li>调度器接口</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.sched_get_priority_min(policy):获取 policy 的最小优先级数值。 policy 是以上调度策略常量之一。</span><br><span class="line">os.sched_get_priority_max(policy):获取 policy 的最高优先级数值。 policy 是以上调度策略常量之一。</span><br></pre></td></tr></table></figure><ul><li>杂项系统信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">os.confstr(name):Return string-valued system configuration values.</span><br><span class="line">os.cpu_count():Return the number of CPUs <span class="keyword">in</span> the system.该数量不同于当前进程可以使用的CPU数量。可用的CPU数量可以由 len(os.sched_getaffinity(<span class="number">0</span>)) 方法获得。</span><br><span class="line">os.curdir:The constant string used by the operating system to refer to the current directory.</span><br><span class="line">os.pardir:The constant string used by the operating system to refer to the parent directory.</span><br><span class="line">os.sep:The character used by the operating system to separate pathname components.</span><br></pre></td></tr></table></figure><ul><li>随机数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.getrandom(size, flags=<span class="number">0</span>):Get up to size random bytes.</span><br><span class="line">os.urandom(size):Return a string of size random bytes suitable <span class="keyword">for</span> cryptographic use.</span><br></pre></td></tr></table></figure><hr><h3 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h3><h4 id="sys模块介绍"><a href="#sys模块介绍" class="headerlink" title="sys模块介绍"></a>sys模块介绍</h4><p>该模块提供了一些变量和函数。这些变量可能被解释器使用，也可能由解释器提供。</p><h4 id="sys模块常用方法"><a href="#sys模块常用方法" class="headerlink" title="sys模块常用方法"></a>sys模块常用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sys.argv: 命令行参数List，第一个元素是程序本身路径</span><br><span class="line">sys.exit(n): 退出程序，正常退出时exit(<span class="number">0</span>),错误退出sys.exit(<span class="number">1</span>)</span><br><span class="line">sys.version: 获取Python解释程序的版本信息</span><br><span class="line">sys.path: 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</span><br><span class="line">sys.platform: 返回操作系统平台名称</span><br></pre></td></tr></table></figure><hr><h3 id="序列化相关模块"><a href="#序列化相关模块" class="headerlink" title="序列化相关模块"></a>序列化相关模块</h3><h4 id="序列化概念"><a href="#序列化概念" class="headerlink" title="序列化概念"></a>序列化概念</h4><p>wiki中对于序列化的解释：在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。<br>简而言之，将原本的字典、列表等内容转换成一个字符串的过程叫做序列化，其反过程叫反序列化。</p><h4 id="序列化目的"><a href="#序列化目的" class="headerlink" title="序列化目的"></a>序列化目的</h4><ul><li>以某种存储形式使自定义对象持久化</li><li>将对象从一个地方传递到另一个地方</li><li>使程序更具维护性</li></ul><h4 id="序列化相关模块介绍"><a href="#序列化相关模块介绍" class="headerlink" title="序列化相关模块介绍"></a>序列化相关模块介绍</h4><ul><li>json: 由 RFC 7159 (which obsoletes RFC 4627) 和 ECMA-404 指定，是一个受 JavaScript 的对象字面量语法启发的轻量级数据交换格式，尽管它不仅仅是一个严格意义上的 JavaScript 的字集。</li><li>pickle: 模块 pickle 实现了对一个 Python 对象结构的二进制序列化和反序列化。</li><li>shelve: “Shelf” 是一种持久化的类似字典的对象。 与 “dbm” 数据库的区别在于 Shelf 中的值（不是键！）实际上可以为任意 Python 对象, 即 pickle 模块能够处理的任何东西。</li><li>marshal: 此模块包含一此能以二进制格式来读写 Python 值的函数。这不是一个通用的“持久化”模块。 对于通用的持久化以及通过 RPC 调用传递 Python 对象，请参阅 pickle 和 shelve 等模块。</li></ul><h4 id="序列化相关模块常用方法"><a href="#序列化相关模块常用方法" class="headerlink" title="序列化相关模块常用方法"></a>序列化相关模块常用方法</h4><ul><li>json: 用于字符串(包括其他支持json的语言)和python数据类型间进行转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 序列化dumps</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化列表list</span></span><br><span class="line">print(json.dumps([<span class="string">'foo'</span>, &#123;<span class="string">'bar'</span>: (<span class="string">'baz'</span>, <span class="literal">None</span>, <span class="number">1.0</span>, <span class="number">2</span>)&#125;]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'["foo", &#123;"bar": ["baz", null, 1.0, 2]&#125;]'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化字符串string</span></span><br><span class="line">print(json.dumps(<span class="string">"\"foo\bar"</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"\"foo\bar"</span></span><br><span class="line"></span><br><span class="line">print(json.dumps(<span class="string">'\u1234'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"\u1234"</span></span><br><span class="line"></span><br><span class="line">print(json.dumps(<span class="string">'\\'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"\\"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化字典dict</span></span><br><span class="line">print(json.dumps(&#123;<span class="string">"c"</span>: <span class="number">0</span>, <span class="string">"b"</span>: <span class="number">0</span>, <span class="string">"a"</span>: <span class="number">0</span>&#125;, sort_keys=<span class="literal">True</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;"a": 0, "b": 0, "c": 0&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 反序列化loads</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">print(json.loads(<span class="string">'["foo", &#123;"bar":["baz", null, 1.0, 2]&#125;]'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'foo'</span>, &#123;<span class="string">'bar'</span>: [<span class="string">'baz'</span>, <span class="literal">None</span>, <span class="number">1.0</span>, <span class="number">2</span>]&#125;]</span><br><span class="line"></span><br><span class="line">json.loads(<span class="string">'"\\"foo\\bar"'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'"foo\x08ar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 序列化dump(文件)</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dic = &#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>,<span class="string">'k3'</span>:<span class="string">'v3'</span>&#125;</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'json_file'</span>,mode=<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    dic_fd=json.dump(dic,f)</span><br><span class="line"><span class="comment"># 文件中的内容：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">"k3"</span>: <span class="string">"v3"</span>, <span class="string">"k2"</span>: <span class="string">"v2"</span>, <span class="string">"k1"</span>: <span class="string">"v1"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 反序列化load(文件)</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'json_file'</span>,mode=<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    dic_fs=json.load(f)</span><br><span class="line">print(dic_fs)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k3'</span>: <span class="string">'v3'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>shelve: 只提供一个open方法，用key来访问，使用起来与字典类似</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 序列化(文件)</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="keyword">import</span> shelve</span><br><span class="line"><span class="keyword">with</span> shelve.open(<span class="string">'shelve_file'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f[<span class="string">'key'</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 反序列化(文件)</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="keyword">import</span> shelve</span><br><span class="line"><span class="keyword">with</span> shelve.open(<span class="string">'shelve_file'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f[<span class="string">'key'</span>]</span><br><span class="line">print(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 额外支持的两个方法</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line">Shelf.sync(): 如果 Shelf 打开时将 writeback 设为 <span class="literal">True</span> 则写回缓存中的所有条目。 如果可行还会清空缓存并将持久化字典同步到磁盘。 此方法会在使用 close() 关闭 Shelf 时自动被调用。</span><br><span class="line">Shelf.close():同步并关闭持久化 dict 对象。 对已关闭 Shelf 的操作将失败并引发 ValueError。</span><br></pre></td></tr></table></figure><ul><li>pickle: 用于python特有的类型和python的数据类型间进行转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 序列化dumps</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化列表list</span></span><br><span class="line">print(pickle.dumps([<span class="string">'foo'</span>, &#123;<span class="string">'bar'</span>: (<span class="string">'baz'</span>, <span class="literal">None</span>, <span class="number">1.0</span>, <span class="number">2</span>)&#125;]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\x80\x03]q\x00(X\x03\x00\x00\x00fooq\x01&#125;q\x02X\x03\x00\x00\x00barq\x03(X\x03\x00\x00\x00bazq\x04NG?\xf0\x00\x00\x00\x00\x00\x00K\x02tq\x05se.'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化字符串string</span></span><br><span class="line">print(pickle.dumps(<span class="string">"\"foo\bar"</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\x80\x03X\x07\x00\x00\x00"foo\x08arq\x00.'</span></span><br><span class="line"></span><br><span class="line">print(pickle.dumps(<span class="string">'\u1234'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\x80\x03X\x03\x00\x00\x00\xe1\x88\xb4q\x00.'</span></span><br><span class="line"></span><br><span class="line">print(pickle.dumps(<span class="string">'\\'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\x80\x03X\x01\x00\x00\x00\\q\x00.'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化字典dict</span></span><br><span class="line">print(pickle.dumps(&#123;<span class="string">"c"</span>: <span class="number">0</span>, <span class="string">"b"</span>: <span class="number">0</span>, <span class="string">"a"</span>: <span class="number">0</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\x80\x03&#125;q\x00(X\x01\x00\x00\x00cq\x01K\x00X\x01\x00\x00\x00bq\x02K\x00X\x01\x00\x00\x00aq\x03K\x00u.'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 反序列化loads</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">print(pickle.loads(<span class="string">b'\x80\x03]q\x00(X\x03\x00\x00\x00fooq\x01&#125;q\x02X\x03\x00\x00\x00barq\x03(X\x03\x00\x00\x00bazq\x04NG?\xf0\x00\x00\x00\x00\x00\x00K\x02tq\x05se.'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'foo'</span>, &#123;<span class="string">'bar'</span>: [<span class="string">'baz'</span>, <span class="literal">None</span>, <span class="number">1.0</span>, <span class="number">2</span>]&#125;]</span><br><span class="line"></span><br><span class="line">print(pickle.loads(<span class="string">b'\x80\x03X\x07\x00\x00\x00"foo\x08arq\x00.'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'"foo\x08ar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 序列化dump(文件)</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">dic = &#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>,<span class="string">'k3'</span>:<span class="string">'v3'</span>&#125;</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'pickle_file'</span>,mode=<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    dic_fd=pickle.dump(dic,f)</span><br><span class="line"><span class="comment"># 文件中的内容：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8003</span> <span class="number">7</span>d71 <span class="number">0028</span> <span class="number">5802</span> <span class="number">0000</span> <span class="number">006</span>b <span class="number">3171</span> <span class="number">0158</span></span><br><span class="line"><span class="number">0200</span> <span class="number">0000</span> <span class="number">7631</span> <span class="number">7102</span> <span class="number">5802</span> <span class="number">0000</span> <span class="number">006</span>b <span class="number">3271</span></span><br><span class="line"><span class="number">0358</span> <span class="number">0200</span> <span class="number">0000</span> <span class="number">7632</span> <span class="number">7104</span> <span class="number">5802</span> <span class="number">0000</span> <span class="number">006</span>b</span><br><span class="line"><span class="number">3371</span> <span class="number">0558</span> <span class="number">0200</span> <span class="number">0000</span> <span class="number">7633</span> <span class="number">7106</span> <span class="number">752</span>e </span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="comment"># 反序列化load(文件)</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'pickle_file'</span>,mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    dic_fs=pickle.load(f)</span><br><span class="line">print(dic_fs)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>, <span class="string">'k3'</span>: <span class="string">'v3'</span>, <span class="string">'k2'</span>: <span class="string">'v2'</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>marshal：Python 有一个更原始的序列化模块称为 marshal，但一般地 pickle 应该是序列化 Python 对象时的首选。marshal 存在主要是为了支持 Python 的 <code>.pyc</code> 文件.</li></ul><h4 id="Pickle-vs-Json-vs-Marshal"><a href="#Pickle-vs-Json-vs-Marshal" class="headerlink" title="Pickle vs Json vs Marshal"></a><code>Pickle</code> vs <code>Json</code> vs <code>Marshal</code></h4><ul><li><p><code>pickle</code> vs <code>json</code></p><ul><li>pickle 模块会跟踪已被序列化的对象，所以该对象之后再次被引用时不会再次被序列化。marshal 不会这么做。</li><li>这隐含了递归对象和共享对象。递归对象指包含对自己的引用的对象。这种对象并不会被 marshal 接受，并且实际上尝试 marshal 递归对象会让你的 Python 解释器崩溃。对象共享发生在对象层级中存在多处引用同一对象时。pickle 只会存储这些对象一次，并确保其他的引用指向同一个主副本。共享对象将保持共享，这可能对可变对象非常重要。</li><li>marshal 不能被用于序列化用户定义类及其实例。pickle 能够透明地存储并保存类实例，然而此时类定义必须能够从与被存储时相同的模块被引入。</li><li>同样用于序列化的 marshal 格式不保证数据能移植到不同的 Python 版本中。因为它的主要任务是支持 .pyc 文件，必要时会以破坏向后兼容的方式更改这种序列化格式，为此 Python 的实现者保留了更改格式的权利。pickle 序列化格式可以在不同版本的 Python 中实现向后兼容，前提是选择了合适的 pickle 协议。如果你的数据要在 Python 2 与 Python 3 之间跨越传递，封存和解封的代码在 2 和 3 之间也是不同的。</li></ul></li><li><p><code>pickle</code> vs <code>marshal</code></p><ul><li>JSON 是一个文本序列化格式（它输出 unicode 文本，尽管在大多数时候它会接着以 utf-8 编码），而 pickle 是一个二进制序列化格式；</li><li>JSON 是我们可以直观阅读的，而 pickle 不是；</li><li>JSON是可互操作的，在Python系统之外广泛使用，而pickle则是Python专用的；</li><li>默认情况下，JSON 只能表示 Python 内置类型的子集，不能表示自定义的类；但 pickle 可以表示大量的 Python 数据类型（可以合理使用 Python 的对象内省功能自动地表示大多数类型，复杂情况可以通过实现 specific object APIs 来解决）。</li><li>不像pickle，对一个不信任的JSON进行反序列化的操作本身不会造成任意代码执行漏洞。</li></ul></li></ul><hr><h3 id="hashlib模块"><a href="#hashlib模块" class="headerlink" title="hashlib模块"></a>hashlib模块</h3><h4 id="hashlib模块介绍"><a href="#hashlib模块介绍" class="headerlink" title="hashlib模块介绍"></a>hashlib模块介绍</h4><p>该模块为许多不同的安全哈希和消息摘要算法实现了一个通用接口。包括FIPS安全哈希算法SHA1，SHA224，SHA256，SHA384和SHA512以及RSA的MD5算法。术语“安全哈希”和“消息摘要”是等价的，旧称消息摘要，现在称安全哈希。</p><h4 id="hashlib的作用"><a href="#hashlib的作用" class="headerlink" title="hashlib的作用"></a>hashlib的作用</h4><p>它通过一个函数，把任意长度的数据转换为一个长度固定的数据串，用以验证原始数据是否被篡改，保证数据的一致性。</p><h4 id="hashlib模块应用场景"><a href="#hashlib模块应用场景" class="headerlink" title="hashlib模块应用场景"></a>hashlib模块应用场景</h4><ul><li>摘要算法</li><li>密码的密文存储</li><li>文件的一致性验证</li></ul><h4 id="hashlib模块示例"><a href="#hashlib模块示例" class="headerlink" title="hashlib模块示例"></a>hashlib模块示例</h4><ul><li>MD5</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用md5进行哈希</span></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">b'life is short'</span>)</span><br><span class="line">print(md5.hexdigest())</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">617</span>d2b938b9b59b347b92f19f84436bd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sha256进行哈希</span></span><br><span class="line">m = hashlib.sha256()</span><br><span class="line">m.update(<span class="string">b"Nobody inspects"</span>)</span><br><span class="line">m.update(<span class="string">b" the spammish repetition"</span>)</span><br><span class="line">m.digest()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\x03\x1e\xdd&#125;Ae\x15\x93\xc5\xfe\\\x00o\xa5u+7\xfd\xdf\xf7\xbcN\x84:\xa6\xaf\x0c\x95\x0fK\x94\x06'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sha224进行哈希</span></span><br><span class="line">hashlib.sha224(<span class="string">b"Nobody inspects the spammish repetition"</span>).hexdigest()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2'</span></span><br></pre></td></tr></table></figure><hr><h3 id="configparser模块"><a href="#configparser模块" class="headerlink" title="configparser模块"></a>configparser模块</h3><h4 id="configparser模块介绍"><a href="#configparser模块介绍" class="headerlink" title="configparser模块介绍"></a>configparser模块介绍</h4><p>该模块提供了ConfigParser类，该类实现了一种基本配置语言，该语言提供的结构类似于Microsoft Windows INI文件中的结构。您可以使用它来编写可由最终用户轻松定制的Python程序。</p><h4 id="configparser模块示例"><a href="#configparser模块示例" class="headerlink" title="configparser模块示例"></a>configparser模块示例</h4><ul><li>常见配置文档格式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">ServerAliveInterval = <span class="number">45</span></span><br><span class="line">Compression = yes</span><br><span class="line">CompressionLevel = <span class="number">9</span></span><br><span class="line">ForwardX11 = yes</span><br><span class="line"></span><br><span class="line">[bitbucket.org]</span><br><span class="line">User = hg</span><br><span class="line"></span><br><span class="line">[topsecret.server.com]</span><br><span class="line">Port = <span class="number">50022</span></span><br><span class="line">ForwardX11 = no</span><br></pre></td></tr></table></figure><ul><li>configparser创建Python配置文档</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用configparser实现上述配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line">config[<span class="string">'DEFAULT'</span>] = &#123;</span><br><span class="line">                        <span class="string">'ServerAliveInterval'</span>: <span class="string">'45'</span>,</span><br><span class="line">                        <span class="string">'Compression'</span>: <span class="string">'yes'</span>,</span><br><span class="line">                        <span class="string">'CompressionLevel'</span>: <span class="string">'9'</span></span><br><span class="line">                    &#125;</span><br><span class="line">config[<span class="string">'bitbucket.org'</span>] = &#123;&#125;</span><br><span class="line">config[<span class="string">'bitbucket.org'</span>][<span class="string">'User'</span>] = <span class="string">'hg'</span></span><br><span class="line">config[<span class="string">'topsecret.server.com'</span>] = &#123;&#125;</span><br><span class="line">topsecret = config[<span class="string">'topsecret.server.com'</span>]</span><br><span class="line">topsecret[<span class="string">'Port'</span>] = <span class="string">'50022'</span></span><br><span class="line">topsecret[<span class="string">'ForwardX11'</span>] = <span class="string">'no'</span></span><br><span class="line">config[<span class="string">'DEFAULT'</span>][<span class="string">'ForwardX11'</span>] = <span class="string">'yes'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'example.ini'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> configfile:</span><br><span class="line">    config.write(configfile)</span><br></pre></td></tr></table></figure><ul><li>增删改查CURD操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------</span></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line"><span class="comment"># --------</span></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用set方法增加配置</span></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line">config.add_section(<span class="string">'new_added'</span>)</span><br><span class="line">config.set(<span class="string">'new_added'</span>,<span class="string">'config_key_1'</span>,<span class="string">'Value'</span>)</span><br><span class="line">config.write(open(<span class="string">'sample_add.ini'</span>, <span class="string">"w"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------</span></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line"><span class="comment"># --------</span></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用remove_section/remove_option方法删除</span></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line">config.read(<span class="string">'sample.ini'</span>)</span><br><span class="line">config.remove_section(<span class="string">'new_added'</span>)</span><br><span class="line">config.remove_option(<span class="string">'new_added_2'</span>,<span class="string">"config_key_2"</span>)</span><br><span class="line">config.write(open(<span class="string">'sample_del.ini'</span>, <span class="string">"w"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------</span></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line"><span class="comment"># --------</span></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用read读取，set方法进行覆盖修改操作</span></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line">config.read(<span class="string">'sample.ini'</span>)</span><br><span class="line">config.set(<span class="string">'config_section_2'</span>,<span class="string">'user'</span>,<span class="string">'python'</span>)</span><br><span class="line">config.write(open(<span class="string">'sample_modi.ini'</span>, <span class="string">"w"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------</span></span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line"><span class="comment"># --------</span></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似于字典的方式进行查询操作</span></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line">print(config.sections())</span><br><span class="line"></span><br><span class="line">config.read(<span class="string">'example.ini'</span>)</span><br><span class="line"></span><br><span class="line">print(config.sections())</span><br><span class="line">print(<span class="string">'bitbucket.org'</span> <span class="keyword">in</span> config) <span class="comment"># True</span></span><br><span class="line">print(config[<span class="string">'bitbucket.org'</span>][<span class="string">"user"</span>])</span><br></pre></td></tr></table></figure><hr><h3 id="logging模块"><a href="#logging模块" class="headerlink" title="logging模块"></a>logging模块</h3><h4 id="logging模块介绍"><a href="#logging模块介绍" class="headerlink" title="logging模块介绍"></a>logging模块介绍</h4><p>logging模块为应用与库定义了实现灵活的事件日志系统的函数与类。</p><h4 id="logging模块详解"><a href="#logging模块详解" class="headerlink" title="logging模块详解"></a>logging模块详解</h4><ul><li>日志级别</li></ul><table><thead><tr><th>级别</th><th>数值</th></tr></thead><tbody><tr><td>CRITICAL</td><td>50</td></tr><tr><td>ERROR</td><td>40</td></tr><tr><td>WARNING</td><td>30</td></tr><tr><td>INFO</td><td>20</td></tr><tr><td>DEBUG</td><td>10</td></tr><tr><td>NOTSET</td><td>0</td></tr></tbody></table><ul><li>Log相关对象</li></ul><table><thead><tr><th>对象类型</th><th>说明</th></tr></thead><tbody><tr><td>Logger</td><td>日志，暴露函数给应用程序，基于日志记录器和过滤器级别决定哪些日志有效。</td></tr><tr><td>LogRecord</td><td>日志记录器，将日志传到相应的处理器处理。</td></tr><tr><td>Handler</td><td>处理器, 将(日志记录器产生的)日志记录发送至合适的目的地。</td></tr><tr><td>Filter</td><td>过滤器, 提供了更好的粒度控制,它可以决定输出哪些日志记录。</td></tr><tr><td>Formatter</td><td>格式化器, 指明了最终输出中日志记录的布局。</td></tr></tbody></table><ul><li>basicConfig()方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(filename=<span class="string">"logging.log"</span>, filemode=<span class="string">"w"</span>, format=<span class="string">"%(asctime)s %(name)s:%(levelname)s:%(message)s"</span>, datefmt=<span class="string">"%d-%M-%Y %H:%M:%S"</span>, level=logging.DEBUG)</span><br><span class="line">logging.debug(<span class="string">'This is a debug message'</span>)</span><br><span class="line">logging.info(<span class="string">'This is an info message'</span>)</span><br><span class="line">logging.warning(<span class="string">'This is a warning message'</span>)</span><br><span class="line">logging.error(<span class="string">'This is an error message'</span>)</span><br><span class="line">logging.critical(<span class="string">'This is a critical message'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出至logging.log文件中</span></span><br><span class="line"><span class="number">19</span><span class="number">-10</span><span class="number">-18</span> <span class="number">14</span>:<span class="number">28</span>:<span class="number">57</span> root:DEBUG:This <span class="keyword">is</span> a debug message</span><br><span class="line"><span class="number">19</span><span class="number">-10</span><span class="number">-18</span> <span class="number">14</span>:<span class="number">28</span>:<span class="number">57</span> root:INFO:This <span class="keyword">is</span> an info message</span><br><span class="line"><span class="number">19</span><span class="number">-10</span><span class="number">-18</span> <span class="number">14</span>:<span class="number">28</span>:<span class="number">57</span> root:WARNING:This <span class="keyword">is</span> a warning message</span><br><span class="line"><span class="number">19</span><span class="number">-10</span><span class="number">-18</span> <span class="number">14</span>:<span class="number">28</span>:<span class="number">57</span> root:ERROR:This <span class="keyword">is</span> an error message</span><br><span class="line"><span class="number">19</span><span class="number">-10</span><span class="number">-18</span> <span class="number">14</span>:<span class="number">28</span>:<span class="number">57</span> root:CRITICAL:This <span class="keyword">is</span> a critical message</span><br></pre></td></tr></table></figure><ul><li>logging对象方式：解决了basicconfig方式的中文支持问题和终端、文本同时输出的问题，推荐使用</li></ul><blockquote><p>注意永远不要直接实例化Loggers，应当通过模块级别的函数 logging.getLogger(name)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分别定义终端、文件中的日志输出级别，可以设置 Logger 对象为最低级别，之后设置两个不同级别的Handler 对象来实现。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">"logger"</span>)</span><br><span class="line"></span><br><span class="line">handler_console = logging.StreamHandler()</span><br><span class="line">handler_file = logging.FileHandler(filename=<span class="string">"logging.log"</span>)</span><br><span class="line"></span><br><span class="line">logger.setLevel(logging.DEBUG)  <span class="comment"># 级别为30</span></span><br><span class="line">handler_console.setLevel(logging.WARNING)  <span class="comment"># 级别为10</span></span><br><span class="line">handler_file.setLevel(logging.DEBUG)  <span class="comment"># 级别为30</span></span><br><span class="line"></span><br><span class="line">formatter = logging.Formatter(<span class="string">"%(asctime)s %(name)s %(levelname)s %(message)s"</span>)</span><br><span class="line">handler_console.setFormatter(formatter)</span><br><span class="line">handler_file.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">logger.addHandler(handler_console)</span><br><span class="line">logger.addHandler(handler_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(handler1.level)  # 10</span></span><br><span class="line"><span class="comment"># print(handler2.level)  # 30</span></span><br><span class="line"><span class="comment"># print(logger.level)  # 30</span></span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">'This is a customer debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'This is an customer info message'</span>)</span><br><span class="line">logger.warning(<span class="string">'This is a customer warning message'</span>)</span><br><span class="line">logger.error(<span class="string">'This is an customer error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'This is a customer critical message'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制台输出结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-10</span><span class="number">-18</span> <span class="number">15</span>:<span class="number">29</span>:<span class="number">54</span>,<span class="number">392</span> logger WARNING This <span class="keyword">is</span> a customize warning message</span><br><span class="line"><span class="number">2019</span><span class="number">-10</span><span class="number">-18</span> <span class="number">15</span>:<span class="number">29</span>:<span class="number">54</span>,<span class="number">392</span> logger ERROR This <span class="keyword">is</span> an customize error message</span><br><span class="line"><span class="number">2019</span><span class="number">-10</span><span class="number">-18</span> <span class="number">15</span>:<span class="number">29</span>:<span class="number">54</span>,<span class="number">392</span> logger CRITICAL This <span class="keyword">is</span> a customize critical message</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件输出结果</span></span><br><span class="line"><span class="number">2019</span><span class="number">-10</span><span class="number">-13</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">13</span>,<span class="number">417</span> logger DEBUG This <span class="keyword">is</span> a customize debug message</span><br><span class="line"><span class="number">2019</span><span class="number">-10</span><span class="number">-13</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">13</span>,<span class="number">417</span> logger INFO This <span class="keyword">is</span> an customize info message</span><br><span class="line"><span class="number">2019</span><span class="number">-10</span><span class="number">-13</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">13</span>,<span class="number">417</span> logger WARNING This <span class="keyword">is</span> a customize warning message</span><br><span class="line"><span class="number">2019</span><span class="number">-10</span><span class="number">-13</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">13</span>,<span class="number">417</span> logger ERROR This <span class="keyword">is</span> an customize error message</span><br><span class="line"><span class="number">2019</span><span class="number">-10</span><span class="number">-13</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">13</span>,<span class="number">417</span> logger CRITICAL This <span class="keyword">is</span> a customize critical message</span><br></pre></td></tr></table></figure><hr><h3 id="pymysql模块"><a href="#pymysql模块" class="headerlink" title="pymysql模块"></a>pymysql模块</h3><h4 id="pymysql模块介绍"><a href="#pymysql模块介绍" class="headerlink" title="pymysql模块介绍"></a>pymysql模块介绍</h4><p>该软件包包含一个基于PEP 249的纯Python MySQL客户端库。</p><h4 id="pymysql模块使用示例"><a href="#pymysql模块使用示例" class="headerlink" title="pymysql模块使用示例"></a>pymysql模块使用示例</h4><ul><li>版本要求 &amp; 安装</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 版本要求</span></span><br><span class="line">Python – one of the following:</span><br><span class="line">    CPython &gt;= <span class="number">2.7</span> <span class="keyword">or</span> &gt;= <span class="number">3.5</span></span><br><span class="line">    Latest PyPy</span><br><span class="line">MySQL Server – one of the following:</span><br><span class="line">    MySQL &gt;= <span class="number">5.5</span></span><br><span class="line">    MariaDB &gt;= <span class="number">5.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">python3 -m pip install PyMySQL</span><br></pre></td></tr></table></figure><ul><li>基本使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库插入数据</span></span><br><span class="line">CREATE TABLE `users` (</span><br><span class="line">    `id` int(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    `email` varchar(<span class="number">255</span>) COLLATE utf8_bin NOT NULL,</span><br><span class="line">    `password` varchar(<span class="number">255</span>) COLLATE utf8_bin NOT NULL,</span><br><span class="line">    PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin</span><br><span class="line">AUTO_INCREMENT=<span class="number">1</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用PyMySQL连接数据库</span></span><br><span class="line"><span class="keyword">import</span> pymysql.cursors</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to the database</span></span><br><span class="line">connection = pymysql.connect(host=<span class="string">'localhost'</span>,</span><br><span class="line">                             user=<span class="string">'user'</span>,</span><br><span class="line">                             password=<span class="string">'passwd'</span>,</span><br><span class="line">                             db=<span class="string">'db'</span>,</span><br><span class="line">                             charset=<span class="string">'utf8mb4'</span>,</span><br><span class="line">                             cursorclass=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">        <span class="comment"># Create a new record</span></span><br><span class="line">        sql = <span class="string">"INSERT INTO `users` (`email`, `password`) VALUES (%s, %s)"</span></span><br><span class="line">        cursor.execute(sql, (<span class="string">'webmaster@python.org'</span>, <span class="string">'very-secret'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># connection is not autocommit by default. So you must commit to save</span></span><br><span class="line">    <span class="comment"># your changes.</span></span><br><span class="line">    connection.commit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">        <span class="comment"># Read a single record</span></span><br><span class="line">        sql = <span class="string">"SELECT `id`, `password` FROM `users` WHERE `email`=%s"</span></span><br><span class="line">        cursor.execute(sql, (<span class="string">'webmaster@python.org'</span>,))</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        print(result)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    connection.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">&#123;<span class="string">'password'</span>: <span class="string">'very-secret'</span>, <span class="string">'id'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="redis模块"><a href="#redis模块" class="headerlink" title="redis模块"></a>redis模块</h3><h4 id="redis模块介绍"><a href="#redis模块介绍" class="headerlink" title="redis模块介绍"></a>redis模块介绍</h4><p>Redis键值存储的Python接口。</p><h4 id="redis模块使用示例"><a href="#redis模块使用示例" class="headerlink" title="redis模块使用示例"></a>redis模块使用示例</h4><ul><li>版本要求 &amp; 安装</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 版本要求</span></span><br><span class="line">redis-py <span class="number">3.0</span> supports Python <span class="number">2.7</span> <span class="keyword">and</span> Python <span class="number">3.5</span>+.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install redis</span><br></pre></td></tr></table></figure><ul><li>基本使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">r = redis.Redis(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</span><br><span class="line">r.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br><span class="line"></span><br><span class="line">r.get(<span class="string">'foo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'bar'</span></span><br></pre></td></tr></table></figure><hr><h3 id="PyMongo模块"><a href="#PyMongo模块" class="headerlink" title="PyMongo模块"></a>PyMongo模块</h3><h4 id="PyMongo模块介绍"><a href="#PyMongo模块介绍" class="headerlink" title="PyMongo模块介绍"></a>PyMongo模块介绍</h4><p>PyMongo是一个Python发行版，其中包含用于MongoDB的工具，并且是从Python使用MongoDB的推荐方式。</p><h4 id="PyMongo模块使用示例"><a href="#PyMongo模块使用示例" class="headerlink" title="PyMongo模块使用示例"></a>PyMongo模块使用示例</h4><ul><li>版本要求 &amp; 安装</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 版本要求</span></span><br><span class="line">PyMongo supports MongoDB <span class="number">2.6</span>, <span class="number">3.0</span>, <span class="number">3.2</span>, <span class="number">3.4</span>, <span class="number">3.6</span>, <span class="number">4.0</span> <span class="keyword">and</span> <span class="number">4.2</span>.</span><br><span class="line">PyMongo supports CPython <span class="number">2.7</span>, <span class="number">3.4</span>+, PyPy, <span class="keyword">and</span> PyPy3<span class="number">.5</span>+.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">python -m pip install pymongo[snappy,gssapi,srv,tls,zstd]</span><br></pre></td></tr></table></figure><ul><li>基本使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(<span class="string">"localhost"</span>, <span class="number">27017</span>)</span><br><span class="line">db = client.test</span><br><span class="line">db.name</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'test'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.my_collection</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Collection(Database(MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>), <span class="string">u'test'</span>), <span class="string">u'my_collection'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.my_collection.insert_one(&#123;<span class="string">"x"</span>: <span class="number">10</span>&#125;).inserted_id</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ObjectId(<span class="string">'4aba15ebe23f6b53b0000000'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.my_collection.insert_one(&#123;<span class="string">"x"</span>: <span class="number">8</span>&#125;).inserted_id</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ObjectId(<span class="string">'4aba160ee23f6b543e000000'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.my_collection.insert_one(&#123;<span class="string">"x"</span>: <span class="number">11</span>&#125;).inserted_id</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ObjectId(<span class="string">'4aba160ee23f6b543e000002'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.my_collection.find_one()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">u'x'</span>: <span class="number">10</span>, <span class="string">u'_id'</span>: ObjectId(<span class="string">'4aba15ebe23f6b53b0000000'</span>)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> db.my_collection.find():</span><br><span class="line">    print(item[<span class="string">"x"</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.my_collection.create_index(<span class="string">"x"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'x_1'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> db.my_collection.find().sort(<span class="string">"x"</span>, pymongo.ASCENDING):</span><br><span class="line">    print(item[<span class="string">"x"</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[item[<span class="string">"x"</span>] <span class="keyword">for</span> item <span class="keyword">in</span> db.my_collection.find().limit(<span class="number">2</span>).skip(<span class="number">1</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">8</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用模块-amp-包&quot;&gt;&lt;a href=&quot;#常用模块-amp-包&quot; class=&quot;headerlink&quot; title=&quot;常用模块&amp;amp;包&quot;&gt;&lt;/a&gt;常用模块&amp;amp;包&lt;/h2&gt;&lt;h3 id=&quot;re模块&quot;&gt;&lt;a href=&quot;#re模块&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python包</title>
    <link href="https://elijahyg.github.io/2020/04/14/Python%E5%8C%85/"/>
    <id>https://elijahyg.github.io/2020/04/14/Python包/</id>
    <published>2020-04-14T14:06:48.000Z</published>
    <updated>2020-04-14T14:07:24.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>包是一种通过使用<code>.模块名</code>来组织python模块名称空间的方式。</p><h3 id="导入包的本质"><a href="#导入包的本质" class="headerlink" title="导入包的本质"></a>导入包的本质</h3><p>import 包，产生的名称空间的名字同样来源于文件，即包下的<code>__init__.py</code>文件，导入包本质就是在导入该文件</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>在导入语句中包含有<code>.</code>，说明是包导入。</li><li>包是目录级的，包是一种包含<code>__init__.py</code>文件的目录。</li><li>import导入文件时，产生名称空间中的名字来源于文件；import导入包，产生的名称空间的名字同样来源于文件，即包下的<code>__init__.py</code>文件，导入包本质就是在导入该文件。</li><li>在python3中，即使包下没有<code>__init__.py</code>文件，import 包仍然不会报错，而在python2中，包下一定要有该文件，否则import导入包报错。</li><li>创建包的目的不是为了运行，而是被导入使用，包只是模块的一种形式而已，包即模块。</li><li>凡是在导入时带<code>.</code>的，<code>.</code>的左边都必须是一个包，否则非法。可以带有一连串的<code>.</code>,但都必须遵循这个原则。</li><li>对于导入包之后，<code>.</code>的左边可以是包,模块，函数，类等,它们都可以用<code>.</code>的方式调用自己的属性。</li><li>对比<code>import item</code> 和<code>from item import name</code>，如果想直接使用<code>name</code>则必须使用后者的导入方式。</li></ul><h3 id="包的使用"><a href="#包的使用" class="headerlink" title="包的使用"></a>包的使用</h3><h4 id="import用法"><a href="#import用法" class="headerlink" title="import用法"></a>import用法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试python文件与包同目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> package.nextpackage.models</span><br><span class="line">package.nextpackage.models.models_function(<span class="string">'func_1'</span>)</span><br></pre></td></tr></table></figure><h4 id="from-…-import-…用法"><a href="#from-…-import-…用法" class="headerlink" title="from … import …用法"></a>from … import …用法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：from ... import ... 中import后面必须是类、方法等，且不能包含点(.)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试python文件与包同目录</span></span><br><span class="line"><span class="comment"># 1、导入某个模块</span></span><br><span class="line"><span class="keyword">from</span> package.nextpackage <span class="keyword">import</span> models</span><br><span class="line">models.models_function(<span class="string">'func_1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、导入模块中的某个方法</span></span><br><span class="line"><span class="keyword">from</span> package.nextpackage.models <span class="keyword">import</span> models_function</span><br><span class="line">models_function(<span class="string">'func_1'</span>)</span><br></pre></td></tr></table></figure><h4 id="init-py文件"><a href="#init-py文件" class="headerlink" title="__init__.py文件"></a><code>__init__.py</code>文件</h4><p>不管是哪种方式，只要是第一次导入包或者是包的任何其他部分，都会依次执行包下的<code>__init__.py</code>文件，这个文件可以为空，也可以进行一些初始化的工作。</p><h4 id="from-import-用法"><a href="#from-import-用法" class="headerlink" title="from ... import *用法"></a><code>from ... import *</code>用法</h4><ul><li><code>from ... import *</code>意在导入包中所有类、方法等，实际上该语句只会导入包下<code>__init__.py</code>文件中定义的名字，我们可以在这个文件中定义<code>__all__</code>变量</li></ul><h4 id="绝对导入和相对导入"><a href="#绝对导入和相对导入" class="headerlink" title="绝对导入和相对导入"></a>绝对导入和相对导入</h4><ul><li>绝对导入：以项目根路径作为起始</li><li>相对导入：用<code>.</code>或者<code>..</code>的方式最为起始（只能在一个包中使用，不能用于不同目录内）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件路径</span></span><br><span class="line">package/nextpackage/models.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绝对导入</span></span><br><span class="line"><span class="keyword">from</span> package.nextpackage <span class="keyword">import</span> models</span><br><span class="line">models.models_function()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相对导入</span></span><br><span class="line"><span class="keyword">from</span> ..nextpackage <span class="keyword">import</span> models</span><br><span class="line">models.models_function()</span><br></pre></td></tr></table></figure><h4 id="单独导入包"><a href="#单独导入包" class="headerlink" title="单独导入包"></a>单独导入包</h4><ul><li>单独导入包名称时不会导入包中所有包含的所有子模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试python文件与包同目录，在py程序中直接引入方法</span></span><br><span class="line"><span class="keyword">import</span> package</span><br><span class="line">package.nextpackage.models.models_function()</span><br><span class="line"><span class="comment"># 输出报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>AttributeError: module <span class="string">'package'</span> has no attribute <span class="string">'nextpackage'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方法</span></span><br><span class="line"><span class="comment">#package/__init__.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> nextpackage</span><br><span class="line"></span><br><span class="line"><span class="comment">#package/nextpackage/__init__.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="comment"># 测试python文件与包同目录</span></span><br><span class="line"><span class="keyword">import</span> package</span><br><span class="line">package.nextpackage.models.models_function()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;包&quot;&gt;&lt;a href=&quot;#包&quot; class=&quot;headerlink&quot; title=&quot;包&quot;&gt;&lt;/a&gt;包&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;包是一种通过使
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python模块</title>
    <link href="https://elijahyg.github.io/2020/04/07/Python%E6%A8%A1%E5%9D%97/"/>
    <id>https://elijahyg.github.io/2020/04/07/Python模块/</id>
    <published>2020-04-07T14:41:44.000Z</published>
    <updated>2020-04-07T14:43:12.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="什么是模块"><a href="#什么是模块" class="headerlink" title="什么是模块"></a>什么是模块</h3><ul><li>已经被编译为共享库或DLL的C/C++扩展</li><li>使用C编写并链接到python解释器的内置模块</li></ul><h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><ul><li>模块的意义在于方便功能的复用，在系统以及</li></ul><h3 id="模块导入规范"><a href="#模块导入规范" class="headerlink" title="模块导入规范"></a>模块导入规范</h3><ul><li>导入的内置模块应该写在前面：内置模块 -&gt; 扩展模块 -&gt; 自定义模块</li><li>模块不会被重复导入</li><li>模块导入的根路径: sys.path</li><li>import用法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、import 模块名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、import 模块名.变量名：与代码文件中的变量名完全不冲突</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、import 模块名 as 重命名的模块名：提高代码的兼容性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、import 模块1，模块2</span></span><br></pre></td></tr></table></figure><ul><li><code>from ... import ...</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、from 模块名 import 变量名</span></span><br><span class="line">  - 直接使用 变量名 就可以完成操作</span><br><span class="line">  - 如果代码文件中有相同的变量名会发生冲突</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、from 模块名 import 变量名字 as 重命名变量名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、from 模块名 import 变量名1，变量名2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、from 模块名 import *</span></span><br><span class="line"> - 将模块中的所有变量名都放到内存中</span><br><span class="line"> - 如果代码文件中有相同的变量名会发生冲突</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、from 模块名 import * 和 __all__变量搭配使用</span></span><br><span class="line"> - 如果没有__all__变量，就会导入该模块的所有变量名</span><br><span class="line"> - 如果有__all__变量则只导入__all__变量列表中的名字</span><br></pre></td></tr></table></figure><ul><li><code>__name__</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、在模块中 有一个变量__name__，</span></span><br><span class="line"><span class="comment"># 2、当我们直接执行这个模块的时候，__name__ == '__main__'</span></span><br><span class="line"><span class="comment"># 3、当我们执行其他模块，在其他模块中引用这个模块的时候，这个模块中的__name__ == '模块的名字'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;h3 id=&quot;什么是模块&quot;&gt;&lt;a href=&quot;#什么是模块&quot; class=&quot;headerlink&quot; title=&quot;什么是模块&quot;&gt;&lt;/a&gt;什么是模
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python迭代器&amp;生成器</title>
    <link href="https://elijahyg.github.io/2020/03/28/Python%E8%BF%AD%E4%BB%A3%E5%99%A8&amp;%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>https://elijahyg.github.io/2020/03/28/Python迭代器&amp;生成器/</id>
    <published>2020-03-28T07:59:44.000Z</published>
    <updated>2020-03-28T08:07:11.582Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>内部实现了<code>__iter__()</code>方法</p><h4 id="验证方法"><a href="#验证方法" class="headerlink" title="验证方法"></a>验证方法</h4><ul><li>使用dir()方法查看数据类型中的方法是否包含<code>__iter__()</code></li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>可迭代对象执行<code>__iter__()</code>方法后会生成一个迭代器对象</li></ul><h4 id="标识"><a href="#标识" class="headerlink" title="标识"></a>标识</h4><ul><li>拥有<code>__iter__()</code>方法的对象 </li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'abc'</span> <span class="comment"># 可迭代对象</span></span><br><span class="line">it = iter(s) <span class="comment"># 调用迭代方法，等同于 s.__iter__()</span></span><br><span class="line"></span><br><span class="line">print(it)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">&lt;str_iterator object at <span class="number">0x7f0234b10eb8</span>&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>迭代器是一个有状态的对象，它能在调用next()方法的时候返回容器中的下一个值，任何实现了<code>__iter__()</code>和<code>__next__()</code>方法的对象都是迭代器，<code>__iter__</code>返回迭代器自身，<code>__next__</code>返回容器中的下一个值，如果容器中没有下一个值则抛出<code>StopIteration</code>异常。</p><h4 id="迭代器-vs-可迭代对象区别"><a href="#迭代器-vs-可迭代对象区别" class="headerlink" title="迭代器 vs 可迭代对象区别"></a>迭代器 vs 可迭代对象区别</h4><ul><li><p>迭代器拥有<code>__length_hint__</code>: 获取迭代器中元素的长度 </p></li><li><p>迭代器拥有<code>__setstate__</code>: 根据索引值指定从哪里开始迭代</p></li><li><p>迭代器拥有<code>__next__</code>: 获取迭代器对象的下一个值</p></li></ul><h4 id="标识-1"><a href="#标识-1" class="headerlink" title="标识"></a>标识</h4><ul><li>拥有<code>__iter__()</code>和<code>__next__()</code>方法的对象 </li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'abc'</span></span><br><span class="line">it = iter(s)</span><br><span class="line">print(it) <span class="comment"># 输出迭代器对象</span></span><br><span class="line"></span><br><span class="line">print(next(it)) <span class="comment"># 输出'a'</span></span><br><span class="line">print(next(it)) <span class="comment"># 输出'b'</span></span><br><span class="line">print(next(it)) <span class="comment"># 输出'c'</span></span><br><span class="line">print(next(it)) <span class="comment"># 没有下一个值，抛出StopIteration异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">&lt;str_iterator object at <span class="number">0x7fbe85382f60</span>&gt;</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"main.py"</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(next(it))</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><hr><h3 id="生成器（本质是迭代器）"><a href="#生成器（本质是迭代器）" class="headerlink" title="生成器（本质是迭代器）"></a>生成器（本质是迭代器）</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>生成器是一种特殊的迭代器，它用于创建迭代器的简单而强大的工具。 它们的写法类似标准的函数，但当它们要返回数据时会使用<code>yield</code>语句。 每次对生成器调用<code>next()</code>时，它会从上次离开位置恢复执行（它会记住上次执行语句时的所有数据值）。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>惰性运算，开发者自定义</li><li>本质是迭代器</li></ul><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li><p>生成器函数<br>一个包含<code>yield</code>关键字的函数就是一个生成器函数。<code>yield</code>可以为我们从函数中返回值，但是<code>yield</code>又不同于<code>return</code>，<code>return</code>的执行意味着程序的结束，调用生成器函数不会得到返回的具体的值，而是得到一个可迭代的对象。每一次获取这个可迭代对象的值，就能推动函数的执行，获取新的返回值。直到函数执行结束。</p></li><li><p>生成器函数进阶：<code>send()</code></p><ul><li>send和next的作用相同</li><li>第一次不能用send</li><li>函数中的最后一个yield不能接受新的值</li></ul></li><li><p>生成器表达式<br>类似于列表推导，但是生成器返回按需产生结果的一个对象，而不是一次构建一个结果列表。</p></li></ul><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><ul><li>简单应用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genrator_fun1</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    print(<span class="string">'现在定义了a变量'</span>)</span><br><span class="line">    <span class="keyword">yield</span> a</span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    print(<span class="string">'现在又定义了b变量'</span>)</span><br><span class="line">    <span class="keyword">yield</span> b</span><br><span class="line"></span><br><span class="line">g1 = genrator_fun1()</span><br><span class="line">print(<span class="string">'g1 : '</span>,g1) <span class="comment">#打印g1可以发现g1就是一个生成器</span></span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">20</span>) <span class="comment">#我是华丽的分割线</span></span><br><span class="line">print(next(g1))</span><br><span class="line">time.sleep(<span class="number">1</span>) <span class="comment">#sleep一秒看清执行过程</span></span><br><span class="line">print(next(g1))</span><br></pre></td></tr></table></figure><ul><li>避免一次性读取数据到内存中导致内存溢出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tail</span><span class="params">(filename)</span>:</span></span><br><span class="line">    f = open(filename)</span><br><span class="line">    f.seek(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">#从文件末尾算起</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = f.readline() <span class="comment"># 读取文件中新的文本行</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">yield</span> line</span><br><span class="line"></span><br><span class="line">tail_g = tail(<span class="string">'tmp'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> tail_g:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure><ul><li>yield from</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">'AB'</span>:</span><br><span class="line">        <span class="keyword">yield</span> c</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">print(list(gen1()))</span><br><span class="line"></span><br><span class="line">以上是将生成器中的数据以列表的方式打印</span><br><span class="line">以下的执行效果与上面相同，运用了<span class="keyword">yield</span> <span class="keyword">from</span> 语法</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> <span class="string">'AB'</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> range(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(list(gen2()))</span><br></pre></td></tr></table></figure><ul><li>生成器函数进阶：<code>send()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算移动平均值的例子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span><span class="params">()</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    avg = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num = <span class="keyword">yield</span> avg</span><br><span class="line">        sum += num</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        avg = sum / count</span><br><span class="line"></span><br><span class="line">avg_g = average()</span><br><span class="line">avg_g.__next__()</span><br><span class="line"></span><br><span class="line">print(avg_g.send(<span class="number">20</span>))</span><br><span class="line">print(avg_g.send(<span class="number">40</span>))</span><br><span class="line">print(avg_g.send(<span class="number">60</span>))</span><br></pre></td></tr></table></figure><ul><li>预激生成器的装饰器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预激生成器的装饰器——在装饰器中首先调用了__next__方法，方便用户直接进行调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        g = func(*args,**kwargs)</span><br><span class="line">        g.__next__()</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@init</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span><span class="params">()</span>:</span></span><br><span class="line">    sum,avg,count = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num = <span class="keyword">yield</span> avg</span><br><span class="line">        sum += num</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        avg = sum/count</span><br><span class="line"></span><br><span class="line">avg_g = average()</span><br><span class="line">print(avg_g.send(<span class="number">10</span>))</span><br><span class="line">print(avg_g.send(<span class="number">20</span>))</span><br><span class="line">print(avg_g.send(<span class="number">30</span>))</span><br></pre></td></tr></table></figure><ul><li>推导式汇总</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -------------列表推导-------------</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[每一个元素或者是和元素相关的操作 for 元素 in 可迭代数据类型] #遍历之后挨个处理</span></span><br><span class="line"><span class="string">[满足条件的元素相关的操作 for 元素 in 可迭代数据类型 if 元素相关的条件] #筛选功能</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># -------------简单的列表推导-------------</span></span><br><span class="line">l = [i ** <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(l)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">64</span>, <span class="number">125</span>, <span class="number">216</span>, <span class="number">343</span>, <span class="number">512</span>, <span class="number">729</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------带筛选的列表推导-------------</span></span><br><span class="line">l = [i ** <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line">print(l)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">0</span>, <span class="number">27</span>, <span class="number">216</span>, <span class="number">729</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------多层列表推导-------------</span></span><br><span class="line">double_l = [[<span class="string">'Tom'</span>, <span class="string">'Billy'</span>, <span class="string">'Jefferson'</span>, <span class="string">'Andrew'</span>, <span class="string">'Wesley'</span>, <span class="string">'Steven'</span>, <span class="string">'Joe'</span>],</span><br><span class="line">            [<span class="string">'Alice'</span>, <span class="string">'Jill'</span>, <span class="string">'Ana'</span>, <span class="string">'Wendy'</span>, <span class="string">'Jennifer'</span>, <span class="string">'Sherry'</span>, <span class="string">'Eva'</span>]]</span><br><span class="line">l = [name <span class="keyword">for</span> lst <span class="keyword">in</span> double_l <span class="keyword">for</span> name <span class="keyword">in</span> lst <span class="keyword">if</span> name.count(<span class="string">'e'</span>) &gt;= <span class="number">2</span>]</span><br><span class="line">print(l)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'Jefferson'</span>, <span class="string">'Wesley'</span>, <span class="string">'Steven'</span>, <span class="string">'Jennifer'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------字典推导-------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例一：将一个字典的key和value对调</span></span><br><span class="line">mcase = &#123;<span class="string">'a'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">34</span>&#125;</span><br><span class="line">mcase_frequency = &#123;mcase[k]: k <span class="keyword">for</span> k <span class="keyword">in</span> mcase&#125;</span><br><span class="line">print(mcase_frequency)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">34</span>: <span class="string">'b'</span>, <span class="number">10</span>: <span class="string">'a'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例二：合并大小写对应的value值，将k统一成小写</span></span><br><span class="line">mcase = &#123;<span class="string">'a'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">34</span>, <span class="string">'A'</span>: <span class="number">7</span>, <span class="string">'Z'</span>: <span class="number">3</span>&#125;</span><br><span class="line">mcase_frequency = &#123;k.lower(): mcase.get(k.lower(), <span class="number">0</span>) + mcase.get(k.upper(), <span class="number">0</span>) <span class="keyword">for</span> k <span class="keyword">in</span> mcase.keys()&#125;</span><br><span class="line">print(mcase_frequency)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'b'</span>: <span class="number">34</span>, <span class="string">'a'</span>: <span class="number">17</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------集合推导-------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算列表中每个值的平方，自带去重功能</span></span><br><span class="line">squared = &#123;x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">-1</span>, <span class="number">2</span>]&#125;</span><br><span class="line">print(squared)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h3><p><img src="/images/post_imgs/iterator.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;可迭代对象&quot;&gt;&lt;a href=&quot;#可迭代对象&quot; class=&quot;headerlink&quot; title=&quot;可迭代对象&quot;&gt;&lt;/a&gt;可迭代对象&lt;/h3&gt;&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python闭包&amp;装饰器</title>
    <link href="https://elijahyg.github.io/2020/03/14/Python%E9%97%AD%E5%8C%85&amp;%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://elijahyg.github.io/2020/03/14/Python闭包&amp;装饰器/</id>
    <published>2020-03-14T08:42:22.000Z</published>
    <updated>2020-03-14T08:43:40.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闭包-amp-装饰器"><a href="#闭包-amp-装饰器" class="headerlink" title="闭包 &amp; 装饰器"></a>闭包 &amp; 装饰器</h2><h3 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h3><ul><li>开放：对于添加新功能是开放的</li><li>封闭：对于修改原功能是封闭的</li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>内部函数包含对外部作用域而非全剧作用域变量的引用，则称该内部函数称为闭包函数。</p><h4 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h4><p>输出的<code>__closure__</code>是否有cell元素</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>为函数增加功能</li><li>为函数提前赋值</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x+y</span><br><span class="line">    <span class="keyword">return</span> bar</span><br></pre></td></tr></table></figure><hr><h3 id="装饰器（闭包应用）"><a href="#装饰器（闭包应用）" class="headerlink" title="装饰器（闭包应用）"></a>装饰器（闭包应用）</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>在不更改原函数调用方式的前提下对原函数添加新功能</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>利用闭包原理，通过在内部函数中调用外部函数的变量，实现在不改变原函数调用方式的前提下对原函数添加新功能。</p><h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><ul><li>简单装饰器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">"""原函数前添加的功能"""</span></span><br><span class="line">        f()</span><br><span class="line">        <span class="string">"""原函数后添加的功能"""</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'这是原函数！'</span>)</span><br><span class="line"></span><br><span class="line">func = deco(func)</span><br><span class="line">func()</span><br></pre></td></tr></table></figure><ul><li>装饰器的语法糖</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">"""原函数前添加的功能"""</span></span><br><span class="line">        f()</span><br><span class="line">        <span class="string">"""原函数后添加的功能"""</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco # ——&gt;此处效果等同于 func = deco(func)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'这是原函数'</span>)</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><ul><li>带返回值的装饰器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">"""原函数前添加的功能"""</span></span><br><span class="line">        res = f()</span><br><span class="line">        <span class="string">"""原函数后添加的功能"""</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'这是原函数'</span>)</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><ul><li>带参数、带返回值的装饰器（标准格式）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""原函数前添加的功能"""</span></span><br><span class="line">        res = f(*args,**kwargs)</span><br><span class="line">        <span class="string">"""原函数后添加的功能"""</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'这是原函数'</span>)</span><br><span class="line"></span><br><span class="line">func(*args,**kwargs)</span><br></pre></td></tr></table></figure><ul><li>多层装饰器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outer_wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner_wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">            <span class="string">"""原函数前添加的功能"""</span></span><br><span class="line">            res = f(*args,**kwargs)</span><br><span class="line">            <span class="string">"""原函数后添加的功能"""</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> inner_wrapper</span><br><span class="line">    <span class="keyword">return</span> outer_wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'这是原函数'</span>)</span><br><span class="line"></span><br><span class="line">func(*args,**kwargs)</span><br></pre></td></tr></table></figure><ul><li>多个装饰器修饰同一个函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco1</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""原函数前添加的功能"""</span></span><br><span class="line">        res = f(*args,**kwargs)</span><br><span class="line">        <span class="string">"""原函数后添加的功能"""</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco2</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""原函数前添加的功能"""</span></span><br><span class="line">        res = f(*args,**kwargs)</span><br><span class="line">        <span class="string">"""原函数后添加的功能"""</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco1  # 其次执行</span></span><br><span class="line"><span class="meta">@deco2  # 首先执行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'这是原函数'</span>)</span><br><span class="line"></span><br><span class="line">func(*args,**kwargs)</span><br></pre></td></tr></table></figure><ul><li>装饰器wraps版本（标准格式）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func) #加在最内层函数正上方</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">origin_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    这是原函数的注释</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">'这是原函数'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虽然已经执行了装饰器，origin_func已经指向wrapper，但是如果用了@wraps(func)装饰器之后调用origin_func的双下划线方法依然是原函数origin_func的</span></span><br><span class="line">print(origin_func.__name__)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>origin_func</span><br><span class="line"></span><br><span class="line">print(origin_func.__doc__)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>这是原函数的注释</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>:<span class="keyword">return</span>:</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闭包-amp-装饰器&quot;&gt;&lt;a href=&quot;#闭包-amp-装饰器&quot; class=&quot;headerlink&quot; title=&quot;闭包 &amp;amp; 装饰器&quot;&gt;&lt;/a&gt;闭包 &amp;amp; 装饰器&lt;/h2&gt;&lt;h3 id=&quot;开放封闭原则&quot;&gt;&lt;a href=&quot;#开放封闭原则&quot; cla
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python各种函数</title>
    <link href="https://elijahyg.github.io/2020/03/14/Python%E5%90%84%E7%A7%8D%E5%87%BD%E6%95%B0/"/>
    <id>https://elijahyg.github.io/2020/03/14/Python各种函数/</id>
    <published>2020-03-14T08:33:42.000Z</published>
    <updated>2020-03-14T08:34:49.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="各种函数"><a href="#各种函数" class="headerlink" title="各种函数"></a>各种函数</h2><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><h4 id="内置函数概念"><a href="#内置函数概念" class="headerlink" title="内置函数概念"></a>内置函数概念</h4><p>内置函数就是Python解释器已经写好可以提供给用户直接使用的函数。目前Python的内置函数一共是69个。</p><h4 id="Python内置函数"><a href="#Python内置函数" class="headerlink" title="Python内置函数"></a>Python内置函数</h4><table><thead><tr><th align="center"></th><th align="center"></th><th align="center">内置函数</th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#abs" title="abs" target="_blank" rel="noopener">abs()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#delattr" title="delattr" target="_blank" rel="noopener">delattr()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#hash" title="hash" target="_blank" rel="noopener">hash()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#func-memoryview" target="_blank" rel="noopener">memoryview()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#func-set" target="_blank" rel="noopener">set()</a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#all" title="all" target="_blank" rel="noopener">all()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#func-dict" target="_blank" rel="noopener">dict()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#help" title="help" target="_blank" rel="noopener">help()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#min" title="min" target="_blank" rel="noopener">min()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#setattr" title="setattr" target="_blank" rel="noopener">setattr()</a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#any" title="any" target="_blank" rel="noopener">any()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#dir" title="dir" target="_blank" rel="noopener">dir()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#hex" title="hex" target="_blank" rel="noopener">hex()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#next" title="next" target="_blank" rel="noopener">next()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#slice" title="slice" target="_blank" rel="noopener">slice()</a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#ascii" title="ascii" target="_blank" rel="noopener">ascii()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#divmod" title="divmod" target="_blank" rel="noopener">divmod()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#id" title="id" target="_blank" rel="noopener">id()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#object" title="object" target="_blank" rel="noopener">object()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#sorted" title="sorted" target="_blank" rel="noopener">sorted()</a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#bin" title="bin" target="_blank" rel="noopener">bin()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#enumerate" title="enumerate" target="_blank" rel="noopener">enumerate()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#input" title="input" target="_blank" rel="noopener">input()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#oct" title="oct" target="_blank" rel="noopener">oct()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#staticmethod" title="staticmethod" target="_blank" rel="noopener">staticmethod()</a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#bool" title="bool" target="_blank" rel="noopener">bool()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#eval" title="eval" target="_blank" rel="noopener">eval()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#int" title="int" target="_blank" rel="noopener">int()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#open" title="open" target="_blank" rel="noopener">open()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#func-str" target="_blank" rel="noopener">str()</a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#breakpoint" title="breakpoint" target="_blank" rel="noopener">breakpoint()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#exec" title="exec" target="_blank" rel="noopener">exec()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#isinstance" title="isinstance" target="_blank" rel="noopener">isinstance()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#ord" title="ord" target="_blank" rel="noopener">ord()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#sum" title="sum" target="_blank" rel="noopener">sum()</a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#func-bytearray" target="_blank" rel="noopener">bytearray()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#filter" title="filter" target="_blank" rel="noopener">filter()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#issubclass" title="issubclass" target="_blank" rel="noopener">issubclass()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#pow" title="pow" target="_blank" rel="noopener">pow()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#super" title="super" target="_blank" rel="noopener">super()</a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#func-bytes" target="_blank" rel="noopener">bytes()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#float" title="float" target="_blank" rel="noopener">float()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#iter" title="iter" target="_blank" rel="noopener">iter()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#print" title="print" target="_blank" rel="noopener">print()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#func-tuple" target="_blank" rel="noopener">tuple()</a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#callable" title="callable" target="_blank" rel="noopener">callable()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#format" title="format" target="_blank" rel="noopener">format()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#len" title="len" target="_blank" rel="noopener">len()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#property" title="property" target="_blank" rel="noopener">property()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#type" title="type" target="_blank" rel="noopener">type()</a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#chr" title="chr" target="_blank" rel="noopener">chr()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#func-frozenset" target="_blank" rel="noopener">frozenset()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#func-list" target="_blank" rel="noopener">list()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#func-range" target="_blank" rel="noopener">range()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#vars" title="vars" target="_blank" rel="noopener">vars()</a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#classmethod" title="classmethod" target="_blank" rel="noopener">classmethod()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#getattr" title="getattr" target="_blank" rel="noopener">getattr()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#locals" title="locals" target="_blank" rel="noopener">locals()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#repr" title="repr" target="_blank" rel="noopener">repr()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#zip" title="zip" target="_blank" rel="noopener">zip()</a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#compile" title="compile" target="_blank" rel="noopener">compile()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#globals" title="globals" target="_blank" rel="noopener">globals()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#map" title="map" target="_blank" rel="noopener">map()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#reversed" title="reversed" target="_blank" rel="noopener">reversed()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#__import__" title="__import__" target="_blank" rel="noopener">__import__()</a></td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#complex" title="complex" target="_blank" rel="noopener">complex()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#hasattr" title="hasattr" target="_blank" rel="noopener">hasattr()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#max" title="max" target="_blank" rel="noopener">max()</a></td><td align="center"><a href="https://docs.python.org/zh-cn/3/library/functions.html?#round" title="round" target="_blank" rel="noopener">round()</a></td><td align="center"></td></tr></tbody></table><h4 id="内置函数分类"><a href="#内置函数分类" class="headerlink" title="内置函数分类"></a>内置函数分类</h4><ul><li>数据类型相关</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一、基础数据类型</span></span><br><span class="line">bool(): 用于将给定参数转换为布尔类型，如果没有参数，返回 <span class="literal">False</span>。</span><br><span class="line">int(): 用于将一个字符串或数字转换为整型。</span><br><span class="line">float(): 用于将整数和字符串转换成浮点数。</span><br><span class="line">complex(): 用于创建一个值为 real + imag * j 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数</span><br><span class="line">str(): 将对象转化为字符串形式</span><br><span class="line">list(): 用于将元组转换为列表。</span><br><span class="line">tuple(): 将列表转换为元组。</span><br><span class="line">dict(): 用于创建一个字典</span><br><span class="line">set(): 用于创建一个集合</span><br><span class="line">frozenset(): 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二、进制转换</span></span><br><span class="line">bin(): 返回一个整数 int 或者长整数 long int 的二进制表示。</span><br><span class="line">oct(): 将一个整数转换成<span class="number">8</span>进制字符串。</span><br><span class="line">hex(): 于将<span class="number">10</span>进制整数转换成<span class="number">16</span>进制，以字符串形式表示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三、数学运算</span></span><br><span class="line">abs(): 返回数字的绝对值。</span><br><span class="line">divmod(): 把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a // b, a % b)</span><br><span class="line">min(): 返回给定参数的最小值，参数可以为序列</span><br><span class="line">max(): 返回给定参数的最大值，参数可以为序列</span><br><span class="line">sum(): 对可迭代对象进行求和计算</span><br><span class="line">round(): 返回浮点数的四舍六入五留双</span><br><span class="line">pow(): 返回 xy（x的y次方）的值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四、字符串操作</span></span><br><span class="line">ascii(): 类似 repr() 函数, 返回一个表示对象的字符串</span><br><span class="line">ord(): 以一个字符（长度为<span class="number">1</span>的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值</span><br><span class="line">chr(): 用一个范围在 range（<span class="number">256</span>）内的（就是<span class="number">0</span>～<span class="number">255</span>）整数作参数，返回一个对应的字符</span><br><span class="line">format(): 格式化编辑字符串</span><br><span class="line">repr(): 将对象转化为供解释器读取的形式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 五、序列操作（包含二进制序列）</span></span><br><span class="line">bytes(): 返回一个新的数组对象，这个数组对象不能对数组元素进行修改。</span><br><span class="line">bytearray(): 返回一个新字节数组。这个数组里的元素是可变的，并且每个元素的值范围:</span><br><span class="line">memoryview(): 返回给定参数的内存查看对象(Momory view)。</span><br><span class="line">reversed(): 反转一个序列对象，将其元素从后向前颠倒构建成一个新的迭代器</span><br><span class="line">slice(): 实现切片对象，主要用在切片操作函数里的参数传递</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 六、功能性方法</span></span><br><span class="line">len(): 返回对象（字符、列表、元组等）长度或项目个数。</span><br><span class="line">sorted(): 对所有可迭代的对象进行排序操作；内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</span><br><span class="line">enumerate(): 用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 <span class="keyword">for</span> 循环当中。</span><br><span class="line">all(): 用于判断给定的可迭代参数 iterable 中的所有元素是否不为 <span class="number">0</span>、<span class="string">''</span>、<span class="literal">False</span> 或者 iterable 为空，如果是返回 <span class="literal">True</span>，否则返回 <span class="literal">False</span>。</span><br><span class="line">any(): 用于判断给定的可迭代参数 iterable 是否全部为空对象，如果都为空、<span class="number">0</span>、false，则返回 <span class="literal">False</span>，如果不都为空、<span class="number">0</span>、false，则返回 <span class="literal">True</span>。</span><br><span class="line">zip(): 用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</span><br><span class="line">filter(): 用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</span><br><span class="line">map(): 根据提供的函数对指定序列做映射。</span><br></pre></td></tr></table></figure><ul><li>作用域相关</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">globals(): 获取全局变量的字典。</span><br><span class="line">locals(): 获取执行本方法所在命名空间内的局部变量的字典。</span><br></pre></td></tr></table></figure><ul><li>迭代器、生成器相关</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">range(): 创建一个整数列表，一般用在 <span class="keyword">for</span> 循环中。</span><br><span class="line">next(): 调用可迭代对象或迭代器的next方法，取到一个元素。</span><br><span class="line">iter(): 将可迭代对象转化称迭代器。</span><br></pre></td></tr></table></figure><ul><li>面向对象相关</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一、对象</span></span><br><span class="line">object(): 返回一个没有特征的新对象。object 是所有类的基类。它具有所有 Python 类实例的通用方法。这个函数不接受任何实参。</span><br><span class="line">id(): 返回对象的“标识值”。该值是一个整数，在此对象的生命周期中保证是唯一且恒定的。</span><br><span class="line">hash(): 返回该对象的哈希值（如果它有的话）。</span><br><span class="line">open(): 打开 file 并返回对应的 file object。</span><br><span class="line">callable(): 如果参数 object 是可调用的就返回 <span class="literal">True</span>，否则返回 <span class="literal">False</span>。 </span><br><span class="line">type(): 传入一个参数时，返回 object 的类型。 返回值是一个 type 对象，通常与 object.__class__ 所返回的对象相同。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二、类</span></span><br><span class="line">classmethod(): 把一个方法封装成类方法。一个类方法把类自己作为第一个实参，就像一个实例方法把实例自己作为第一个实参。</span><br><span class="line">staticmethod(): 将方法转换为静态方法。静态方法不会接收隐式的第一个参数。</span><br><span class="line">isinstance(): 如果参数 object 是参数 classinfo 的实例或者是其 (直接、间接或 虚拟) 子类则返回 <span class="literal">True</span>。 如果 object 不是给定类型的对象，函数将总是返回 <span class="literal">False</span>。 </span><br><span class="line">issubclass(): 如果 <span class="class"><span class="keyword">class</span> 是 <span class="title">classinfo</span> 的 <span class="params">(直接、间接或 虚拟)</span> 子类则返回 <span class="title">True</span>。 </span></span><br><span class="line"><span class="class"><span class="title">super</span><span class="params">()</span>:</span> 返回一个代理对象，它会将方法调用委托给 type 的父类或兄弟类。</span><br><span class="line">property(): 返回 property 属性。fget 是获取属性值的函数。 fset 是用于设置属性值的函数。 fdel 是用于删除属性值的函数。并且 doc 为属性对象创建文档字符串。</span><br><span class="line">vars(): 返回模块、类、实例或任何其它具有 __dict__ 属性的对象的 __dict__ 属性。</span><br></pre></td></tr></table></figure><ul><li>反射相关</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hasattr(): 该实参是一个对象和一个字符串。如果字符串是对象的属性之一的名称，则返回 <span class="literal">True</span>，否则返回 <span class="literal">False</span>。</span><br><span class="line">setattr(): 此函数与 getattr() 两相对应。 其参数为一个对象、一个字符串和一个任意值。 字符串指定一个现有属性或者新增属性。 函数会将值赋给该属性，只要对象允许这种操作。 </span><br><span class="line">getattr(): 返回对象命名属性的值。name 必须是字符串。如果该字符串是对象的属性之一，则返回该属性的值。</span><br><span class="line">delattr(): setattr() 相关的函数。实参是一个对象和一个字符串。该字符串必须是对象的某个属性。如果对象允许，该函数将删除指定的属性。</span><br></pre></td></tr></table></figure><ul><li>代码执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eval(): 数据字符串形式的表达式，python解释器可以直接执行。</span><br><span class="line">exec(): 这个函数支持动态执行 Python 代码。object 必须是字符串或者代码对象。</span><br><span class="line">compile(): 将 source 编译成代码或 AST 对象。代码对象可以被 exec() 或 eval() 执行。</span><br></pre></td></tr></table></figure><ul><li>其他</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">help(): 启动内置的帮助系统（此函数主要在交互式中使用）。</span><br><span class="line">print(): 将 objects 打印到 file 指定的文本流，以 sep 分隔并在末尾加上 end。 </span><br><span class="line">input(): 如果存在 prompt 实参，则将其写入标准输出，末尾不带换行符。接下来，该函数从输入中读取一行，将其转换为字符串（除了末尾的换行符）并返回。</span><br><span class="line">dir(): 如果没有实参，则返回当前本地作用域中的名称列表。如果有实参，它会尝试返回该对象的有效属性列表。</span><br><span class="line">breakpoint(): 此函数会在调用时将你陷入调试器中。（<span class="number">3.7</span> 新版功能）</span><br><span class="line">__import__(): 此函数会由 <span class="keyword">import</span> 语句发起调用。（不建议使用）</span><br></pre></td></tr></table></figure><hr><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><h4 id="定义函数的流程"><a href="#定义函数的流程" class="headerlink" title="定义函数的流程"></a>定义函数的流程</h4><ul><li><p>函数定义<br>关键字<code>def</code>引入一个函数定义。<br>它必须后跟函数名称和带括号的形式参数列表。<br>构成函数体的语句从下一行开始，并且必须缩进。</p></li><li><p>函数体<br>函数体的第一个语句可以（可选的）是字符串文字；<br>这个字符串文字是函数的文档字符串或 docstring 。<br>有些工具使用文档字符串自动生成在线或印刷文档，或者让用户以交互式的形式浏览代码；<br>在你编写的代码中包含文档字符串是一种很好的做法，所以要养成习惯。</p></li><li><p>函数执行<br>函数的执行会引入一个用于函数局部变量的新符号表。<br>更确切地说，函数中所有的变量赋值都将存储在局部符号表中；而变量引用会首先在局部符号表中查找，然后是外层函数的局部符号表，再然后是全局符号表，最后是内置名称的符号表。<br>因此，全局变量和外层函数的变量不能在函数内部直接赋值（除非是在 global 语句中定义的全局变量，或者是在 nonlocal 语句中定义的外层函数的变量），尽管它们可以被引用。</p></li><li><p>函数调用<br>在函数被调用时，实际参数（实参）会被引入被调用函数的本地符号表中；<br>因此，实参是通过按值调用传递的（其中值始终是对象 引用而不是对象的值）。<br>当一个函数调用另外一个函数时，将会为该调用创建一个新的本地符号表。</p></li><li><p>函数的使用<br>函数定义会把函数名引入当前的符号表中。<br>函数名称的值具有解释器将其识别为用户定义函数的类型。<br>这个值可以分配给另一个名称，该名称也可以作为一个函数使用。</p></li><li><p>函数返回值<br>事实上，即使没有 return 语句的函数也会返回一个值, 称为 None（内置名称）。</p></li></ul><h4 id="定义函数举例"><a href="#定义函数举例" class="headerlink" title="定义函数举例"></a>定义函数举例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># write Fibonacci series up to n</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"""Print a Fibonacci series up to n."""</span></span><br><span class="line"><span class="meta">... </span>    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> a &lt; n:</span><br><span class="line"><span class="meta">... </span>        print(a, end=<span class="string">' '</span>)</span><br><span class="line"><span class="meta">... </span>        a, b = b, a+b</span><br><span class="line"><span class="meta">... </span>    print()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Now call the function we just defined:</span></span><br><span class="line"><span class="meta">... </span>fib(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># return</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span> <span class="number">610</span> <span class="number">987</span> <span class="number">1597</span></span><br></pre></td></tr></table></figure><hr><h3 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>嵌套函数（Nested function）是在另一个函数（封闭函数）中定义的函数。</p><h4 id="原理依据"><a href="#原理依据" class="headerlink" title="原理依据"></a>原理依据</h4><p>函数属于一类对象。在一个函数内部执行的<code>def</code>语句会定义一个局部函数并可被返回或传递。在嵌套函数中使用的自由变量可以访问包含该<code>def</code>语句的函数的局部变量。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    x=<span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>        y=<span class="number">2</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">print</span> x+y</span><br><span class="line"><span class="meta">... </span>    bar()</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>python支持嵌套函数。</li><li>内层函数可以访问外层函数中定义的变量，但不能重新赋值。</li><li>内层函数的local namespace不包含外层函数定义的变量。</li></ul><hr><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>递归函数就是函数里调用其自身。</li><li>递归函数必须有一个明确的递归结束条件，称之为递归出口，否则递归深度过深会发生堆栈溢出。</li><li>递归的最大深度在python中也有限制，可以通过<code>sys.setrecursionlimit()</code>函数进行调整，除非很清楚应如何调整，否则不建议修改默认的最大递归深度。</li></ul><h4 id="递归函数示例"><a href="#递归函数示例" class="headerlink" title="递归函数示例"></a>递归函数示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现阶乘：n! = 1 × 2 × 3 × … × n，或n! = (n-1)! × n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------迭代的实现方式----------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    result = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line"><span class="meta">... </span>        result *= i</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> result</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>factorial(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>factorial(<span class="number">5</span>)</span><br><span class="line"><span class="number">120</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>factorial(<span class="number">10</span>)</span><br><span class="line"><span class="number">3628800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------递归的实现方式----------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>factorial(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>factorial(<span class="number">5</span>)</span><br><span class="line"><span class="number">120</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>factorial(<span class="number">10</span>)</span><br><span class="line"><span class="number">3628800</span></span><br></pre></td></tr></table></figure><h4 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h4><ul><li>理论上，所有的递归函数都可以写成循环的方式。</li><li>解决递归调用栈溢出的方法是通过尾递归优化。尾递归是指在函数返回的时候，调用其自身，并且return语句不能包含表达式。这样解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。</li></ul><hr><h3 id="匿名函数-Lambda"><a href="#匿名函数-Lambda" class="headerlink" title="匿名函数 Lambda"></a>匿名函数 Lambda</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p>可以用lambda关键字来创建匿名函数。Lambda函数可以在需要函数对象的任何地方使用。它们在语法上限于单个表达式。从语义上来说，它们只是正常函数定义的语法糖。与嵌套函数定义一样，lambda函数可以引用所包含域的变量。</p><h4 id="Lambda函数语法"><a href="#Lambda函数语法" class="headerlink" title="Lambda函数语法"></a>Lambda函数语法</h4><p><code>函数名 = lambda 参数 ：返回值</code></p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----------示例一----------</span></span><br><span class="line"><span class="comment"># lambda表达式来返回一个函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">make_incrementor</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x + n</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = make_incrementor(<span class="number">42</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">0</span>)</span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>)</span><br><span class="line"><span class="number">43</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------示例二----------</span></span><br><span class="line"><span class="comment"># 传递一个函数作为参数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs = [(<span class="number">1</span>, <span class="string">'one'</span>), (<span class="number">2</span>, <span class="string">'two'</span>), (<span class="number">3</span>, <span class="string">'three'</span>), (<span class="number">4</span>, <span class="string">'four'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs.sort(key=<span class="keyword">lambda</span> pair: pair[<span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs</span><br><span class="line">[(<span class="number">4</span>, <span class="string">'four'</span>), (<span class="number">1</span>, <span class="string">'one'</span>), (<span class="number">3</span>, <span class="string">'three'</span>), (<span class="number">2</span>, <span class="string">'two'</span>)]</span><br></pre></td></tr></table></figure><hr><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><p>函数的形参接受另外一个函数的函数名，则称这个函数为高阶函数。</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(add(<span class="number">-5</span>, <span class="number">6</span>, abs))</span><br><span class="line"></span><br><span class="line"><span class="comment"># return</span></span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><h4 id="常用的高阶函数"><a href="#常用的高阶函数" class="headerlink" title="常用的高阶函数"></a>常用的高阶函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、filter()</span><br><span class="line">功能：用 iterable 中函数 function 返回真的那些元素，构建一个新的迭代器。</span><br><span class="line">调用：filter（function，sequence）</span><br><span class="line">示例：</span><br><span class="line"><span class="comment"># 找出偶数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(filter(<span class="keyword">lambda</span> x:x%<span class="number">2</span> == <span class="number">0</span>,x)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># return</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、map()</span><br><span class="line">功能：返回一个将 function 应用于 iterable 中每一项并输出其结果的迭代器。</span><br><span class="line">调用：map(function, iterable, ...)</span><br><span class="line">示例：</span><br><span class="line"><span class="comment"># 计算列表各个元素的平方</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> square(x):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(square,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"> </span><br><span class="line"><span class="comment"># return</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、reduce()</span><br><span class="line">功能：将两个参数的 function 从左至右积累地应用到 iterable 的条目，以便将该可迭代对象缩减为单一的值。</span><br><span class="line">调用：functools.reduce(function, iterable[, initializer])</span><br><span class="line">示例：</span><br><span class="line"><span class="comment"># 计算列表和</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span> </span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(add, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># return</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><hr><h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><h4 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>返回一个新的部分对象，当被调用时其行为类似于func附带位置参数args和关键字参数keywords被调用。 如果为调用提供了更多的参数，它们会被附加到args。如果提供了额外的关键字参数，它们会扩展并重载keywords。</li><li>偏函数是将所要承载的函数作为partial()函数的第一个参数，原函数的各个参数依次作为partial()函数后续的参数，除非使用关键字参数。</li></ul><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----------无关键字参数----------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mod</span><span class="params">( n, m )</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> n % m</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mod_by_100 = partial( mod, <span class="number">100</span> )</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> mod(<span class="number">100</span>, <span class="number">7</span>)</span><br><span class="line"><span class="comment"># return</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> mod_by_100(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># return</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------有关键字参数----------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin2dec = partial( int, base=<span class="number">2</span> )</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> bin2dec( <span class="string">'0b10001'</span> )</span><br><span class="line"><span class="comment"># return</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> bin2dec( <span class="string">'10001'</span> )</span><br><span class="line"><span class="comment"># return</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex2dec = partial( int, base=<span class="number">16</span> )</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> hex2dec( <span class="string">'0x67'</span> )</span><br><span class="line"><span class="comment"># return</span></span><br><span class="line"><span class="number">103</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> hex2dec( <span class="string">'67'</span> )</span><br><span class="line"><span class="comment"># return</span></span><br><span class="line"><span class="number">103</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;各种函数&quot;&gt;&lt;a href=&quot;#各种函数&quot; class=&quot;headerlink&quot; title=&quot;各种函数&quot;&gt;&lt;/a&gt;各种函数&lt;/h2&gt;&lt;h3 id=&quot;内置函数&quot;&gt;&lt;a href=&quot;#内置函数&quot; class=&quot;headerlink&quot; title=&quot;内置函数&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python初识函数</title>
    <link href="https://elijahyg.github.io/2020/02/26/Python%E5%88%9D%E8%AF%86%E5%87%BD%E6%95%B0/"/>
    <id>https://elijahyg.github.io/2020/02/26/Python初识函数/</id>
    <published>2020-02-26T14:07:46.000Z</published>
    <updated>2020-02-26T14:14:07.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识函数"><a href="#初识函数" class="headerlink" title="初识函数"></a>初识函数</h2><h3 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h3><p>wiki百科中解释：函数是一个大型程序中的某部分代码，由一个或多个语句块组成。它负责完成某项特定任务，而且相较于其他代码，具备相对的独立性。一般会有输入参数并有返回值，提供对过程的封装和细节的隐藏。<br>简而言之，函数就是具有输入参数、输出参数的，并且可以独立完成特定功能的程序代码。</p><h3 id="函数与方法的区别"><a href="#函数与方法的区别" class="headerlink" title="函数与方法的区别"></a>函数与方法的区别</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><ul><li>通过<code>函数名()</code>的方式调用</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>通过<code>类的实例.方法名()</code>的方式调用</li></ul><h4 id="判断函数or方法"><a href="#判断函数or方法" class="headerlink" title="判断函数or方法"></a>判断函数or方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> FunctionType, MethodType</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self,<span class="string">"in func"</span>)</span><br><span class="line"></span><br><span class="line">foo = Foo()  <span class="comment"># foo是类Foo的实例</span></span><br><span class="line">foo.func()  <span class="comment"># 类Foo的实例调用func</span></span><br><span class="line">Foo.func(foo)  <span class="comment"># 类Foo调用func，并传入foo实例</span></span><br><span class="line"></span><br><span class="line">print(isinstance(foo.func, FunctionType))  <span class="comment"># False</span></span><br><span class="line">print(isinstance(foo.func, MethodType))   <span class="comment"># True   #说明这是一个方法</span></span><br><span class="line"></span><br><span class="line">print(isinstance(Foo.func, FunctionType))  <span class="comment"># True   #说明这是一个函数。</span></span><br><span class="line">print(isinstance(Foo.func, MethodType))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>wiki百科中的解释：它表示着一个标识符的可见范围。<br>简而言之，命名空间就是对象或变量的作用范围。<br>python中的命名空间：内置命名空间、全局命名空间、局部命名空间</p><ul><li>内置命名空间: python编译器启动时就可以使用的名字存在内置命名空间中</li><li>全局命名空间: 除函数外的代码部分</li><li>局部命名空间: 函数内部的代码部分</li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>wiki百科中解释：作用域是名字（name）与实体（entity）的绑定保持有效的那部分计算机程序。<br>简而言之，作用域就是变量有效的代码区域。<br>python中的作用域分为：全局变量作用域、局部变量作用域</p><ul><li>全局变量作用域：是整个代码范围。</li><li>局部变量作用域：是定义该变量的子程序的代码范围。</li><li>同名变量在全局和局部变量作用域如何划分：在局部变量作用域代码范围内，局部变量起作用;在其他地方全局变量起作用。</li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="参数的概念"><a href="#参数的概念" class="headerlink" title="参数的概念"></a>参数的概念</h4><p>参数可以理解为函数的输入值。</p><h4 id="参数的种类"><a href="#参数的种类" class="headerlink" title="参数的种类"></a>参数的种类</h4><ul><li>形参的角度（函数定义阶段）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位置参数：必须传，且有多少就必须传多少</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_sex</span><span class="params">(name, sex)</span>:</span></span><br><span class="line">    print(<span class="string">'姓名是:'</span> + name + <span class="string">'\n性别是:'</span> + sex)</span><br><span class="line">name_sex(<span class="string">'张三'</span>,<span class="string">'男'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>姓名是:张三</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>性别是:男</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认参数：可传可不传，不传则使用默认值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_sex</span><span class="params">(name, sex=<span class="string">'男'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'姓名是:'</span> + name + <span class="string">'\n性别是:'</span> + sex)</span><br><span class="line">name_sex(<span class="string">'张三'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>姓名是:张三</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>性别是:男</span><br><span class="line"></span><br><span class="line"><span class="comment"># *args：接收的是按照位置传参的值，组织成一个元组</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_sex</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line">name_sex(<span class="string">'张三'</span>,<span class="string">'男'</span>)</span><br><span class="line">&gt;&gt;&gt;(<span class="string">'张三'</span>, <span class="string">'男'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># **kwargs：接受的是按照关键字传参的值，组织成一个字典</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_sex</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    print(kwargs)</span><br><span class="line">name_sex(姓名=<span class="string">'张三'</span>,性别=<span class="string">'男'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'性别'</span>: <span class="string">'男'</span>, <span class="string">'姓名'</span>: <span class="string">'张三'</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>实参的角度（函数调用阶段）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按位置传参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_sex</span><span class="params">(name, sex)</span>:</span></span><br><span class="line">    print(<span class="string">'姓名是:'</span> + name + <span class="string">'\n性别是:'</span> + sex)</span><br><span class="line">name_sex(<span class="string">'张三'</span>, <span class="string">'男'</span>)</span><br><span class="line">&gt;&gt;&gt;姓名是:张三</span><br><span class="line">&gt;&gt;&gt;性别是:男</span><br><span class="line"></span><br><span class="line"><span class="comment"># *按关键字传参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_sex</span><span class="params">(name, sex)</span>:</span></span><br><span class="line">    print(<span class="string">'姓名是:'</span> + name + <span class="string">'\n性别是:'</span> + sex)</span><br><span class="line">name_sex(sex=<span class="string">'男'</span>,name=<span class="string">'张三'</span>)</span><br><span class="line">&gt;&gt;&gt;姓名是:张三</span><br><span class="line">&gt;&gt;&gt;性别是:男</span><br><span class="line"></span><br><span class="line"><span class="comment"># *按位置、按关键字混合传参：必须按照位置参数，再按照关键字传参，不能将参数赋予多个值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_sex</span><span class="params">(name, sex)</span>:</span></span><br><span class="line">    print(<span class="string">'姓名是:'</span> + name + <span class="string">'\n性别是:'</span> + sex)</span><br><span class="line">name_sex(<span class="string">'张三'</span>,sex=<span class="string">'男'</span>)</span><br><span class="line">&gt;&gt;&gt;姓名是:张三</span><br><span class="line">&gt;&gt;&gt;性别是:男</span><br></pre></td></tr></table></figure><h4 id="多种参数混合的顺序"><a href="#多种参数混合的顺序" class="headerlink" title="多种参数混合的顺序"></a>多种参数混合的顺序</h4><ul><li>位置参数 -&gt; *args -&gt; 默认参数 -&gt; **kwargs</li></ul><h4 id="动态参数的另一个传参方式"><a href="#动态参数的另一个传参方式" class="headerlink" title="动态参数的另一个传参方式"></a>动态参数的另一个传参方式</h4><ul><li>站在形参的角度上，给变量加上*，就是组合所有传来的值。</li><li>站在实参的角度上，给一个序列加上*，就是将这个序列按照顺序打散</li></ul><h4 id="默认参数的陷阱"><a href="#默认参数的陷阱" class="headerlink" title="默认参数的陷阱"></a>默认参数的陷阱</h4><ul><li>默认参数是可变数据类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(arg,lst = [])</span>:</span></span><br><span class="line">    lst.append(arg)</span><br><span class="line">    print(lst)</span><br><span class="line"></span><br><span class="line">foo(<span class="string">'python'</span>)</span><br><span class="line">foo(<span class="string">'java'</span>)</span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><h4 id="返回值的概念"><a href="#返回值的概念" class="headerlink" title="返回值的概念"></a>返回值的概念</h4><p>返回值可以理解为函数的输出值。</p><h4 id="返回值的种类"><a href="#返回值的种类" class="headerlink" title="返回值的种类"></a>返回值的种类</h4><ul><li>没有返回值，默认返回None<ul><li>只有return：结束一个函数的继续</li><li>没有return</li><li>return None：不常用</li></ul></li><li>一个返回值<ul><li>可以返回任何数据类型</li><li>只要返回就可以接收到</li><li>如果在一个函数中有多个return，只返回第一个</li></ul></li><li>多个返回值<ul><li>用多个变量接收：有多少返回值就要有多少变量接收</li><li>用一个变量接收：接收到的是一个元组</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初识函数&quot;&gt;&lt;a href=&quot;#初识函数&quot; class=&quot;headerlink&quot; title=&quot;初识函数&quot;&gt;&lt;/a&gt;初识函数&lt;/h2&gt;&lt;h3 id=&quot;函数的概念&quot;&gt;&lt;a href=&quot;#函数的概念&quot; class=&quot;headerlink&quot; title=&quot;函数的概念&quot;&gt;
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python文件操作</title>
    <link href="https://elijahyg.github.io/2020/02/12/Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://elijahyg.github.io/2020/02/12/Python文件操作/</id>
    <published>2020-02-12T15:26:38.000Z</published>
    <updated>2020-02-12T15:27:31.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="文件操作介绍"><a href="#文件操作介绍" class="headerlink" title="文件操作介绍"></a>文件操作介绍</h3><p>众所周知，文件是存储在硬盘或者其他外部存储设备之中的，我们想要操作文件对其内容进行修改的话就涉及到了应用程序对硬件的操作，但是应用程序是无法直接操作硬件设备的，需要操作系统对硬件设备进行操作，所以我们所说的文件操作，其本质上是应用程序利用操作系统所提供的的接口间接的对硬件设备进行操作的。<br>Python语言进行文件操作需要利用open()函数，open()函数获取文件流来对文件内容进行操作，这个流实际上就是一个I/O通道，即通常所说文件描述符。</p><hr><h3 id="文件打开方式"><a href="#文件打开方式" class="headerlink" title="文件打开方式"></a>文件打开方式</h3><h4 id="文件句柄方式"><a href="#文件句柄方式" class="headerlink" title="文件句柄方式"></a>文件句柄方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打开文件，得到文件句柄并赋值给一个变量</span></span><br><span class="line">f = open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 通过句柄对文件进行操作</span></span><br><span class="line">content = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.输出读取到的结果</span></span><br><span class="line">print(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 关闭文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>文件中的内容：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>java</span><br></pre></td></tr></table></figure><h4 id="上下文方式"><a href="#上下文方式" class="headerlink" title="上下文方式"></a>上下文方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. with关键字引导上下文方式打开文件，并将句柄赋予别名f</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 通过句柄对文件进行操作</span></span><br><span class="line">    content = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.输出读取到的结果，用with上下文方式对文件进行操作会在结束操作时默认关闭文件，不必要主动close()</span></span><br><span class="line">    print(content)</span><br></pre></td></tr></table></figure><hr><h3 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h3><p><code>语法：open(file, mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code></p><table><thead><tr><th align="center">操作符</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">‘r’</td><td align="left">读取文件（默认）</td></tr><tr><td align="center">‘w’</td><td align="left">覆盖写入文件</td></tr><tr><td align="center">‘a’</td><td align="left">追加写入文件</td></tr><tr><td align="center">‘b’</td><td align="left">二进制模式</td></tr><tr><td align="center">‘t’</td><td align="left">文本模式（默认）</td></tr><tr><td align="center">‘+’</td><td align="left">更新文件（读取与写入）</td></tr><tr><td align="center"><code>~~&#39;U&#39;~~</code></td><td align="left">universal newline mode (在 Python 3.0 中成为默认行为)</td></tr></tbody></table><h4 id="读"><a href="#读" class="headerlink" title="读"></a>读</h4><ul><li><code>mode=&#39;r&#39;</code>：只读，文件不存在则报错</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target_file.txt文件中原始内容为：人生苦短，我用python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line">    print(content)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>人生苦短，我用python</span><br></pre></td></tr></table></figure><ul><li><p><code>mode=&#39;rb&#39;</code>：以bytes类型读</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target_file.txt文件中原始内容为：人生苦短，我用python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line">    print(content)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xba\xba\xe7\x94\x9f\xe8\x8b\xa6\xe7\x9f\xad\xef\xbc\x8c\xe6\x88\x91\xe7\x94\xa8python'</span></span><br></pre></td></tr></table></figure></li><li><p><code>mode=&#39;r+&#39;</code>：读写，文件不存在不会创建，写则会在指针后添加内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target_file.txt文件中原始内容为：人生苦短，我用python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'r+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line">    f.write(<span class="string">'\n新添加：Life is short , I use python'</span>)</span><br><span class="line">    print(content)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>人生苦短，我用python</span><br><span class="line"><span class="comment"># target_file.txt中的内容为：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>人生苦短，我用python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>新添加：Life <span class="keyword">is</span> short , I use python</span><br></pre></td></tr></table></figure></li><li><p><code>mode=&#39;r+b&#39;</code>：以bytes类型读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target_file.txt文件中原始内容为：人生苦短，我用python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'r+b'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line">    f.write(<span class="string">'\n新添加：Life is short , I use python'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    print(content)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xba\xba\xe7\x94\x9f\xe8\x8b\xa6\xe7\x9f\xad\xef\xbc\x8c\xe6\x88\x91\xe7\x94\xa8python'</span></span><br><span class="line"><span class="comment"># target_file.txt中的内容为：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>人生苦短，我用python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>新添加：Life <span class="keyword">is</span> short , I use python</span><br></pre></td></tr></table></figure></li></ul><h4 id="写"><a href="#写" class="headerlink" title="写"></a>写</h4><ul><li><code>mode=&#39;w&#39;</code>：只写，文件不存在则创建，文件存在则清空再写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target_file.txt文件中原始内容为空，需要向其中写入：人生苦短，我用python</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.write(<span class="string">'人生苦短，我用python'</span>)</span><br><span class="line"><span class="comment"># target_file.txt中的内容为：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>人生苦短，我用python</span><br></pre></td></tr></table></figure><ul><li><code>mode=&#39;x&#39;</code>：只写，文件不存在则创建，文件存在则报错</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target_file.txt文件中原始内容为空，需要向其中写入：人生苦短，我用python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'x'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.write(<span class="string">'人生苦短，我用python'</span>)</span><br><span class="line"><span class="comment"># target_file.txt存在：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Traceback (most recent call last):</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>File <span class="string">"D:/file_operate.py"</span>, line <span class="number">94</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'x'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>FileExistsError: [Errno <span class="number">17</span>] File exists: <span class="string">'target_file.txt'</span></span><br><span class="line"><span class="comment"># target_file.txt不存在：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>人生苦短，我用python</span><br></pre></td></tr></table></figure><ul><li><code>mode=&#39;wb&#39;</code>：以bytes类型写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target_file.txt文件中原始内容为空，需要向其中写入：人生苦短，我用python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.write(<span class="string">'人生苦短，我用python'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>人生苦短，我用python</span><br><span class="line"></span><br><span class="line"><span class="comment"># # ④w+——写读，文件不存在则创建，写会覆盖之前的内容</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.write(<span class="string">'hello,world'</span>)</span><br><span class="line">    date = f.read()</span><br><span class="line">    print(date)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="comment"># target_file.txt中的内容为：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello,world</span><br></pre></td></tr></table></figure><ul><li><code>mode=&#39;w+b&#39;</code>：以bytes类型写读</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target_file.txt文件中原始内容为空，需要向其中写入：人生苦短，我用python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'w+b'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.write(<span class="string">'hello,world'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    date = f.read()</span><br><span class="line">    print(date)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b''</span></span><br><span class="line"><span class="comment"># target_file.txt中的内容为：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello,world</span><br></pre></td></tr></table></figure><h4 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h4><ul><li><code>mode=&#39;a&#39;</code>：追加，文件不存在则创建，文件存在则追加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处target_file.txt文件中原始内容为：人生苦短，我用python，需要在后面添加'谁用谁知道'内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.write(<span class="string">'谁用谁知道'</span>)</span><br><span class="line">target_file.txt中的内容为：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>人生苦短，我用python谁用谁知道</span><br></pre></td></tr></table></figure><ul><li><code>mode=&#39;ab&#39;</code>：以bytes类型追加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处target_file.txt文件中原始内容为：人生苦短，我用python，需要在后面添加'谁用谁知道'内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'ab'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.write(<span class="string">'谁用谁知道'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>人生苦短，我用python谁用谁知道</span><br></pre></td></tr></table></figure><ul><li><p><code>mode=&#39;a+&#39;</code>：可读可写，文件不存在则创建，写则追加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处target_file.txt文件中原始内容为：人生苦短，我用python，需要在后面添加'谁用谁知道'内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'a+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.write(<span class="string">'谁用谁知道'</span>)</span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    date = f.read()</span><br><span class="line">    print(date)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>人生苦短，我用python谁用谁知道</span><br></pre></td></tr></table></figure></li><li><p><code>mode=&#39;a+b&#39;</code>：以bytes类型可读可写</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处target_file.txt文件中原始内容为：人生苦短，我用python，需要在后面添加'谁用谁知道'内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'a+b'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.write(<span class="string">'谁用谁知道'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    date = f.read()</span><br><span class="line">    print(date)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xba\xba\xe7\x94\x9f\xe8\x8b\xa6\xe7\x9f\xad\xef\xbc\x8c\xe6\x88\x91\xe7\x94\xa8python\xe8\xb0\x81\xe7\x94\xa8\xe8\xb0\x81\xe7\x9f\xa5\xe9\x81\x93'</span></span><br><span class="line"><span class="comment"># target_file.txt中的内容为：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>人生苦短，我用python谁用谁知道</span><br></pre></td></tr></table></figure><h4 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h4><blockquote><p>python没有提供直接修改文件的函数，只能新建文件，将源文件的内容修改完成后写入新文件中，再把原文件删除，新文件重命名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'源文件'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f, open(<span class="string">'源文件.bak'</span>, mode=<span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f_w:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'源文件'</span> <span class="keyword">in</span> i:</span><br><span class="line">            i = i.replace(<span class="string">'源文件'</span>, <span class="string">'更改后的源文件'</span>)</span><br><span class="line">        f_w.write(i)</span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">'源文件'</span>)</span><br><span class="line">os.rename(<span class="string">'源文件.bak'</span>,<span class="string">'源文件'</span>)</span><br></pre></td></tr></table></figure><h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><ul><li><p>seek() 移动光标指针位置<br>seek有三种移动方式0，1，2，其中1和2必须在b模式下进行，但无论哪种模式，都是以bytes为单位移动的</p></li><li><p>tell() 返回当前指针所在的位置<br>tell对于英文字符就是占一个,中文字符占三个,参数表示的是字节数区分与read()的不同。</p></li><li><p>truncate() 截断文件<br>truncate是截断文件，所以文件的打开方式必须可写，但是不能用w或w+等方式打开，因为那样直接清空文件了，所以truncate要在r+或a或a+等模式下测试效果。</p></li><li><p>readline() 读取一行</p></li><li><p>readlines() 读取多行，返回为列表</p></li><li><p>readable() 文件是否可读</p></li><li><p>writeline() 写入一行</p></li><li><p>writelines() 写入多行</p></li><li><p>writable() 文件是否可读</p></li><li><p>closed() 文件是否关闭</p></li><li><p>encoding=’utf-8’ 如果文件打开模式为b,则没有该属性</p></li><li><p>flush() 立刻将文件内容从内存刷到硬盘</p></li><li><p>for循环文件句柄</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'target_file.txt'</span>, mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        print(i)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>人生苦短，我用python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>谁用谁知道</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;headerlink&quot; title=&quot;文件操作&quot;&gt;&lt;/a&gt;文件操作&lt;/h2&gt;&lt;h3 id=&quot;文件操作介绍&quot;&gt;&lt;a href=&quot;#文件操作介绍&quot; class=&quot;headerlink&quot; title=&quot;文件操作介
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字符集&amp;编码详解</title>
    <link href="https://elijahyg.github.io/2020/02/01/Python%E5%AD%97%E7%AC%A6%E9%9B%86&amp;%E7%BC%96%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <id>https://elijahyg.github.io/2020/02/01/Python字符集&amp;编码详解/</id>
    <published>2020-02-01T08:00:15.000Z</published>
    <updated>2020-02-01T08:08:25.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符集-amp-编码详解"><a href="#字符集-amp-编码详解" class="headerlink" title="字符集&amp;编码详解"></a>字符集&amp;编码详解</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><ul><li>编码/解码（encode/decode）：计算机中储存的信息都是用二进制数表示的；而我们在屏幕上看到的英文、汉字等字符是二进制数转换之后的结果。通俗的说，按照何种规则将字符存储在计算机中，称为”编码”；反之，将存储在计算机中的二进制数解析显示出来，称为”解码”。如果使用了错误的解码规则，则导致解码错误或者乱码。</li><li>字符集（charset）：是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等</li><li>字符编码（character Encoding）：是一套法则，使用该法则能够在符号集合与数字系统之间建立对应关系。</li></ul><h3 id="2-字符集的发展过程"><a href="#2-字符集的发展过程" class="headerlink" title="2 字符集的发展过程"></a>2 字符集的发展过程</h3><h4 id="2-1-ASCII-字符集-amp-编码"><a href="#2-1-ASCII-字符集-amp-编码" class="headerlink" title="2.1. ASCII 字符集&amp;编码"></a>2.1. ASCII 字符集&amp;编码</h4><p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以勉强显示其他西欧语言。</p><ul><li><p>ASCII字符集：主要包括控制字符（回车键、退格、换行键等）；可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</p></li><li><p>ASCII编码：将ASCII字符集转换为计算机可以接受的数字系统的数的规则。使用7位（bits）表示一个字符，共128字符；但是7位编码的字符集只能支持128个字符，为了表示更多的欧洲常用字符对ASCII进行了扩展，ASCII扩展字符集使用8位（bits）表示一个字符，共256字符。ASCII字符集映射到数字编码规则如下图所示：<br><img src="/images/post_imgs/ascii_1.png" alt><br><img src="/images/post_imgs/ascii_2.png" alt></p></li></ul><h4 id="2-2-GBXXXX-字符集-amp-编码"><a href="#2-2-GBXXXX-字符集-amp-编码" class="headerlink" title="2.2. GBXXXX 字符集&amp;编码"></a>2.2. GBXXXX 字符集&amp;编码</h4><p>计算机发明之初只用应用于美国及西方一些发达国家，ASCII能够很好满足用户的需求。但是当中国也有了计算机之后，为了显示中文，必须设计一套编码规则用于将汉字转换为计算机可以接受的数字系统的数。中国为了解决这个问题规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。上述编码规则就是中国大陆通用的GB2312。GB2312或GB2312-80是中国国家标准简体中文字符集。新加坡等地也采用此编码。GB2312的出现，基本满足了汉字的计算机处理需要，它所收录的汉字已经覆盖中国大陆99.75%的使用频率。对于人名、古汉语等方面出现的罕用字，GB2312不能处理，这导致了后来GBK及GB 18030汉字字符集的出现。</p><p>由于GB2312-80只收录6763个汉字，有不少汉字，并未收录在内。于是微软利用GB 2312-80未使用的编码空间，收录GB13000.1-93全部字符制定了GBK编码，后续国家标准GB18030技术上兼容GBK。<br> <img src="/images/post_imgs/gb2312.png" alt></p><h4 id="2-3-BIG5-字符集-amp-编码"><a href="#2-3-BIG5-字符集-amp-编码" class="headerlink" title="2.3. BIG5 字符集&amp;编码"></a>2.3. BIG5 字符集&amp;编码</h4><p>Big5，又称为大五码或五大码，是使用繁体中文（正体中文）社区中最常用的电脑汉字字符集标准，共收录13060个汉字。2003年，Big5被收录到CNS11643中文标准交换码的附录当中，取得了较正式的地位。这个最新版本被称为Big5-2003。</p><h4 id="2-4-Unicode字符集-amp-UTF编码"><a href="#2-4-Unicode字符集-amp-UTF编码" class="headerlink" title="2.4. Unicode字符集 &amp; UTF编码"></a>2.4. Unicode字符集 &amp; UTF编码</h4><blockquote><p>Unicode是字符集，UTF-32 / UTF-16 / UTF-8是三种字符编码方案</p></blockquote><p>当计算机传到世界各个国家时，为了适合当地语言和字符，设计和实现类似GB232/GBK/GB18030/BIG5的编码方案。这样各搞一套，在本地使用没有问题，一旦出现在网络中，由于不兼容，互相访问就出现了乱码现象。<br>为了解决这个问题，一个伟大的创想产生了——Unicode。Unicode编码系统为表达任意语言的任意字符而设计。它使用4字节的数字来表达每个字母、符号或者表意文字。每个数字代表唯一的至少在某种语言中使用的符号。被几种语言共用的字符通常使用相同的数字来编码，每个字符对应一个数字，每个数字对应一个字符，即不存在二义性。<br>在计算机科学领域中，Unicode（统一码、万国码、单一码、标准万国码）是业界的一种标准，它可以使电脑得以体现世界上数十种文字的系统。Unicode 是基于通用字符集（Universal Character Set）的标准来发展，并且同时也以书本的形式对外发表。Unicode 还不断在扩增，每个新版本插入更多新的字符。直至目前为止的第六版，Unicode 就已经包含了超过十万个字符、一组可用以作为视觉参考的代码图表、一套编码方法与一组标准字符编码、一套包含了上标字、下标字等字符特性的枚举等。</p><ul><li><p>UCS &amp; UNICODE<br>通用字符集（Universal Character Set，UCS）是由ISO制定的ISO 10646标准所定义的标准字符集。历史上存在两个独立的尝试创立单一字符集的组织，即国际标准化组织（ISO）和多语言软件制造商组成的统一码联盟。前者开发的 ISO/IEC 10646 项目，后者开发的统一码项目。因此最初制定了不同的标准。<br>1991年前后，两个项目的参与者都认识到，世界不需要两个不兼容的字符集。于是，虽然两个项目仍都存在，并独立地公布各自的标准。但统一码联盟和ISO/IEC JTC1/SC2都同意保持两者标准的码表兼容，并紧密地共同调整任何未来的扩展。在发布的时候，Unicode一般都会采用有关字码最常见的字型，但ISO 10646一般都尽可能采用Century字型。</p></li><li><p>UTF-32<br>上述使用4字节的数字来表达每个字母、符号，或者表意文字，每个数字代表唯一的至少在某种语言中使用的符号的编码方案，称为UTF-32。UTF-32又称UCS-4是一种将Unicode字符编码的协定，对每个字符都使用4字节。就空间而言，是非常没有效率的。<br>这种方法有其优点，最重要的一点就是可以在常数时间内定位字符串里的第N个字符，因为第N个字符从第4×Nth个字节开始。虽然每一个码位使用固定长定的字节看似方便，它并不如其它Unicode编码使用得广泛。</p></li><li><p>UTF-16<br>尽管有Unicode字符非常多，但是实际上大多数人不会用到超过前65535个以外的字符。因此，就有了另外一种Unicode编码方式，叫做UTF-16(因为16位 = 2字节)。UTF-16将0–65535范围内的字符编码成2个字节。UTF-16编码最明显的优点是它在空间效率上比UTF-32高两倍，因为每个字符只需要2个字节来存储（除去65535范围以外的），而不是UTF-32中的4个字节。</p></li><li><p>UTF-8<br>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码（定长码），也是一种前缀码。它可以用来表示Unicode标准中的任何字符，且其编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部份修改，即可继续使用。因此，它逐渐成为电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一、UTF-8优点</span><br><span class="line">1、UTF-8是ASCII的一个超集。因为一个纯ASCII字符串也是一个合法的UTF-8字符串，所以现存的ASCII文本不需要转换。为传统的扩展ASCII字符集设计的软件通常可以不经修改或很少修改就能与UTF-8一起使用。</span><br><span class="line">2、使用标准的面向字节的排序例程对UTF-8排序将产生与基于Unicode代码点排序相同的结果。（尽管这只有有限的有用性，因为在任何特定语言或文化下都不太可能有仍可接受的文字排列顺序。）</span><br><span class="line">3、UTF-8和UTF-16都是可扩展标记语言文档的标准编码。所有其它编码都必须通过显式或文本声明来指定。</span><br><span class="line">4、任何面向字节的字符串搜索算法都可以用于UTF-8的数据（只要输入仅由完整的UTF-8字符组成）。但是，对于包含字符记数的正则表达式或其它结构必须小心。</span><br><span class="line">5、UTF-8字符串可以由一个简单的算法可靠地识别出来。就是，一个字符串在任何其它编码中表现为合法的UTF-8的可能性很低，并随字符串长度增长而减小。举例说，字符值C0,C1,F5至FF从来没有出现。为了更好的可靠性，可以使用正则表达式来统计非法过长和替代值（可以查看W3 FAQ: Multilingual Forms上的验证UTF-8字符串的正则表达式）。</span><br><span class="line"></span><br><span class="line">二、UTF-8缺点</span><br><span class="line">1、因为每个字符使用不同数量的字节编码，所以寻找串中第N个字符是一个O(N)复杂度的操作——即串越长，则需要更多的时间来定位特定的字符。同时，还需要位变换来把字符编码成字节，把字节解码成字符。</span><br></pre></td></tr></table></figure><h4 id="2-5-字符编码发展图"><a href="#2-5-字符编码发展图" class="headerlink" title="2.5. 字符编码发展图"></a>2.5. 字符编码发展图</h4><p>ASCII → GB2312 → GBK1.0 → GB18030 → Unicode → UTF-32 → UTF-16 → UTF-8</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;字符集-amp-编码详解&quot;&gt;&lt;a href=&quot;#字符集-amp-编码详解&quot; class=&quot;headerlink&quot; title=&quot;字符集&amp;amp;编码详解&quot;&gt;&lt;/a&gt;字符集&amp;amp;编码详解&lt;/h2&gt;&lt;h3 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; cla
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python运算符</title>
    <link href="https://elijahyg.github.io/2020/01/15/Python%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://elijahyg.github.io/2020/01/15/Python运算符/</id>
    <published>2020-01-15T15:40:01.000Z</published>
    <updated>2020-01-15T15:40:48.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加：对两个可相加对象进行加法运算，并返回结果</td><td>a = 10 b = 20 =&gt; a+b = 30</td></tr><tr><td>-</td><td>减：对两个可相减对象进行加法运算，并返回结果</td><td>a = 10 b = 20 =&gt; b-a = 10</td></tr><tr><td>*</td><td>乘：对两个可相乘对象进行加法运算，并返回结果</td><td>a = 10 b = 20 =&gt; a*b = 200</td></tr><tr><td>/</td><td>除：对两个可相除对象进行加法运算，并返回结果</td><td>a = 10 b = 20 =&gt; b/a = 2</td></tr><tr><td>%</td><td>取模：返回除法的余数</td><td>a = 10 b = 20 =&gt; b%a = 0</td></tr><tr><td>**</td><td>幂：返回乘方的结果</td><td>a = 2 b = 4 =&gt; a**b = 16</td></tr><tr><td>//</td><td>取整除：返回商的整数部分</td><td>a = 2 b = 5 =&gt; b%a = 2</td></tr></tbody></table><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>==</td><td>等于：比较两个可比较对象是否相等，并返回布尔结果</td><td>a = 10 b = 20 =&gt; a==b 返回 false</td></tr><tr><td>!=</td><td>不等于：比较两个可比较对象是否不相等，并返回布尔结果</td><td>a = 10 b = 20 =&gt; a!=b 返回 true</td></tr><tr><td>&gt;</td><td>大于：比较对象A是否大于对象B，并返回布尔结果</td><td>a = 10 b = 20 =&gt; a &gt; b 返回 false</td></tr><tr><td>&lt;</td><td>小于：比较对象A是否小于对象B，并返回布尔结果</td><td>a = 10 b = 20 =&gt; a &lt; b 返回 true</td></tr><tr><td>&gt;=</td><td>大于等于：比较对象A是否大于等于对象B，并返回布尔结果</td><td>a = 10 b = 20 =&gt; a &gt;= b 返回 false</td></tr><tr><td>&lt;=</td><td>小于等于：比较对象A是否小于等于对象B，并返回布尔结果</td><td>a = 10 b = 20 =&gt; a &lt;= b 返回 true</td></tr></tbody></table><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>=</td><td>简单赋值运算：将=右边变量赋值给=左边变量</td><td>a = 10 =&gt; b = a, b = 10</td></tr><tr><td>+=</td><td>加法赋值运算</td><td>b += a 等效于 b = b + a</td></tr><tr><td>-=</td><td>减法赋值运算</td><td>b -= a 等效于 b = b - a</td></tr><tr><td>*=</td><td>乘法赋值运算</td><td>b *= a 等效于 b = b * a</td></tr><tr><td>/=</td><td>除法赋值运算</td><td>b /= a 等效于 b = b / a</td></tr><tr><td>%=</td><td>取模赋值运算</td><td>b %= a 等效于 b = b % a</td></tr><tr><td>**=</td><td>幂赋值运算</td><td>b **= a 等效于 b = b ** a</td></tr><tr><td>//=</td><td>取整除赋值运算</td><td>b //= a 等效于 b = b // a</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>and</td><td>布尔与：a and b, 若a为false，a and b返回 false, 否则返回b的计算值</td><td>a = 10 b = 20 =&gt; a and b 返回20</td></tr><tr><td>or</td><td>布尔或：a or b, 若a为非0，a or b返回 a 的值, 否则返回 b 的计算值</td><td>a = 10 b = 20 =&gt; a or b 返回10</td></tr><tr><td>not</td><td>布尔非：not a, 若 a 为 true, 返回false，否则返回true</td><td>not a / not b 返回 false</td></tr></tbody></table><h4 id="布尔与"><a href="#布尔与" class="headerlink" title="布尔与"></a>布尔与</h4><ul><li>在Python 中，and 和 or 执行布尔逻辑演算，如你所期待的一样，但是它们并不返回布尔值；而是，返回它们实际进行比较的值之一。</li><li>在布尔上下文中从左到右演算表达式的值，如果布尔上下文中的所有值都为真，那么 and 返回最后一个值。</li><li>如果布尔上下文中的某个值为假，则 and 返回第一个假值</li></ul><h4 id="布尔或"><a href="#布尔或" class="headerlink" title="布尔或"></a>布尔或</h4><ul><li>使用 or 时，在布尔上下文中从左到右演算值，就像 and 一样。如果有一个值为真，or 立刻返回该值</li><li>使如果所有的值都为假，or 返回最后一个假值</li><li>使注意 or 在布尔上下文中会一直进行表达式演算直到找到第一个真值，然后就会忽略剩余的比较值</li></ul><h4 id="布尔非"><a href="#布尔非" class="headerlink" title="布尔非"></a>布尔非</h4><ul><li>结合了前面的两种语法，推理即可。</li><li>为加强程序可读性，最好与括号连用，例如： （1 and ‘x’) or ‘y’</li></ul><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算：参与运算的两对应位都为1，则该位返回1，否则返回0</td><td>a = 60 b = 13 =&gt; a &amp; b = 12 (0000 1100)</td></tr><tr><td>|</td><td>按位或运算：参与运算的两对应位有一个为1，则该位返回1，否则返回0</td><td>a = 60 b = 13 =&gt; a | b = 61 (0011 1101)</td></tr><tr><td>^</td><td>按位异或：参与运算的两对应位相异时，则该位返回1，否则返回0</td><td>a = 60 b = 13 =&gt; a ^ b = 49 (0011 0001)</td></tr><tr><td>~</td><td>按位取反运算：参与运算的数每位取反，即0、1互换</td><td>a = 60 =&gt; ~a = -61 (1100 0011)有符号二进制数的补码形式</td></tr><tr><td>&lt;&lt;</td><td>左移运算：参与运算的数每位向左移动若干位，高位丢弃，低位补0</td><td>a = 60 =&gt; a &lt;&lt; 2 = 240 (1111 0000))</td></tr><tr><td>&gt;&gt;</td><td>右移运算：参与运算的数每位向右移动若干位，高位补0，低位丢弃</td><td>a = 60 =&gt; a &gt;&gt; 2 = 15 (0000 1111))</td></tr></tbody></table><ul><li>tips<br><code>~ 举例： ~5 = -6 解释： 将二进制数+1之后乘以-1，即~x = -(x+1)，-(101 + 1) = -110</code></li></ul><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到则返回true，否则false</td><td>a = ‘yang’ b = ‘ya’ =&gt; b in a, 返回true</td></tr><tr><td>not in</td><td>如果在指定的序列中找不到则返回true，否则false</td><td>a = ‘yang’ b = ‘ay’ =&gt; b not in a, 返回true</td></tr></tbody></table><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>is</td><td>判断两个变量是不是引用自同一个对象</td><td>a is b =&gt; 若 id(a) == id(b), 则返回1</td></tr><tr><td>is not</td><td>判断两个变量是不是引用自不同对象</td><td>a is not b =&gt; 若 id(a) != id(b), 则返回1</td></tr></tbody></table><h3 id="运算符优先级（由低到高）"><a href="#运算符优先级（由低到高）" class="headerlink" title="运算符优先级（由低到高）"></a>运算符优先级（由低到高）</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>lambda</td><td>Lambda表达式</td></tr><tr><td>or</td><td>布尔’或’</td></tr><tr><td>and</td><td>布尔’与’</td></tr><tr><td>not x</td><td>布尔’非’</td></tr><tr><td>in，not in</td><td>成员运算</td></tr><tr><td>is，is not</td><td>身份运算</td></tr><tr><td>&lt;，&lt;=，&gt;，&gt;=，!=，==</td><td>比较运算</td></tr><tr><td>|</td><td>按位或</td></tr><tr><td>^</td><td>按位异或</td></tr><tr><td>&amp;</td><td>按位与</td></tr><tr><td>&lt;&lt;，&gt;&gt;</td><td>位运算</td></tr><tr><td>+，-</td><td>加法与减法</td></tr><tr><td>*，/，%</td><td>乘法、除法与取余</td></tr><tr><td>+x，-x</td><td>正负号</td></tr><tr><td>~x</td><td>按位翻转(取补码)</td></tr><tr><td>**</td><td>指数</td></tr><tr><td>x.attribute</td><td>属性参考</td></tr><tr><td>x[index]</td><td>下标</td></tr><tr><td>x[index:index]</td><td>寻址段</td></tr><tr><td>f(arguments…)</td><td>函数调用</td></tr><tr><td>(experession,…)</td><td>绑定或元组显示</td></tr><tr><td>[expression,…]</td><td>列表显示</td></tr><tr><td>{key:datum,…}</td><td>字典显示</td></tr><tr><td>‘expression,…’</td><td>字符串转换</td></tr></tbody></table><h3 id="重要运算符说明"><a href="#重要运算符说明" class="headerlink" title="重要运算符说明"></a>重要运算符说明</h3><h4 id="join和符号”-“区别"><a href="#join和符号”-“区别" class="headerlink" title="join和符号”+“区别"></a>join和符号”+“区别</h4><ul><li>“+”<br>我们知道在python中，字符串是不可变数据类型。所以当多个字符串利用”+”进行拼接时，会每次都做一次申请内存的操作，并将拼接后的字符串存入新内存中。</li><li>join<br>与”+”不同，join操作时会先计算字符操作所用到的空间总和大小，之后将需要拼接的所有字符串一次性都拼接完成存入新内存中。这就比”+”节省了每次申请新内存的时间。</li></ul><h4 id="is和”-“区别"><a href="#is和”-“区别" class="headerlink" title="is和”==“区别"></a>is和”==“区别</h4><ul><li>“==”<br>用来比较两个对象的值是否相同。</li><li>is<br>用来比较对象所处的内存地址是否相同。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h2&gt;&lt;h3 id=&quot;算术运算符&quot;&gt;&lt;a href=&quot;#算术运算符&quot; class=&quot;headerlink&quot; title=&quot;算术运算符&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python数据类型之类型转换内置函数汇总</title>
    <link href="https://elijahyg.github.io/2020/01/07/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E6%B1%87%E6%80%BB/"/>
    <id>https://elijahyg.github.io/2020/01/07/Python数据类型之类型转换内置函数汇总/</id>
    <published>2020-01-07T14:57:13.000Z</published>
    <updated>2020-01-07T15:03:43.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类型转换内置函数"><a href="#类型转换内置函数" class="headerlink" title="类型转换内置函数"></a>类型转换内置函数</h2><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><ul><li><code>int(x [,base])</code>：将x转换为一个整数</li><li><code>float(x)</code>：将x转换为一个浮点数</li><li><code>complex([real[, imag]])</code>：返回一个值为real + imag*1j的复数</li><li><code>chr(x)</code>：将整数x转换为一个字符</li><li><code>unichr(x)</code>：将整数x转换为Unicode字符 </li></ul><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li><code>str(x)</code>：将x转换为字符串</li><li><code>repr(x)</code>：将x转换为表达式字符串</li><li><code>eval(str)</code>：用于计算在字符串中的有效python表达式，并返回对象</li><li><code>ord(x)</code>：将字符串x转换为整数</li><li><code>hex(x)</code>：将字符串x转换为十六进制字符串</li><li><code>oct(x)</code>：将字符串x转换为八进制字符串</li></ul><h3 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h3><ul><li><code>list(s)</code>：将序列s转换为一个列表</li></ul><h3 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h3><ul><li><code>tuple(s)</code>：将序列s转换为一个元组</li></ul><h3 id="字典类型"><a href="#字典类型" class="headerlink" title="字典类型"></a>字典类型</h3><ul><li><code>dict(d)</code>：创建字典，d需要是形如(key,value)的元组</li></ul><h3 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h3><ul><li><code>set(s)</code>：将s转换为可变集合</li><li><code>frozenset(s)</code>：将s转换伟不可变集合</li></ul><h3 id="类型间相互转换"><a href="#类型间相互转换" class="headerlink" title="类型间相互转换"></a>类型间相互转换</h3><ul><li>字符串、列表相互转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list -&gt; string（list中的元素需为字符串）</span></span><br><span class="line"></span><br><span class="line">l = [<span class="string">'y'</span>,<span class="string">'a'</span>,<span class="string">'n'</span>,<span class="string">'g'</span>]</span><br><span class="line">s = <span class="string">''</span>.join(l)</span><br><span class="line">print(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'yang'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># string -&gt; list</span></span><br><span class="line">s = <span class="string">'y, a, n, g'</span></span><br><span class="line">l = s.split(<span class="string">','</span>)</span><br><span class="line">print(l)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'y'</span>,<span class="string">'a'</span>,<span class="string">'n'</span>,<span class="string">'g'</span>]</span><br></pre></td></tr></table></figure><ul><li>列表/元组转换为字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list/tuple -&gt; dict</span></span><br><span class="line">l = [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">d = dict.fromkeys(l)</span><br><span class="line">print(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'a'</span>: <span class="literal">None</span>, <span class="string">'b'</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;类型转换内置函数&quot;&gt;&lt;a href=&quot;#类型转换内置函数&quot; class=&quot;headerlink&quot; title=&quot;类型转换内置函数&quot;&gt;&lt;/a&gt;类型转换内置函数&lt;/h2&gt;&lt;h3 id=&quot;数字类型&quot;&gt;&lt;a href=&quot;#数字类型&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python数据类型之py2与py3字符串类型区别</title>
    <link href="https://elijahyg.github.io/2019/12/26/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8Bpy2%E4%B8%8Epy3%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E5%8C%BA%E5%88%AB/"/>
    <id>https://elijahyg.github.io/2019/12/26/Python数据类型之py2与py3字符串类型区别/</id>
    <published>2019-12-26T15:35:56.000Z</published>
    <updated>2019-12-26T15:37:14.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python2-x字符串-VS-Python3-x字符串"><a href="#Python2-x字符串-VS-Python3-x字符串" class="headerlink" title="Python2.x字符串 VS Python3.x字符串"></a>Python2.x字符串 VS Python3.x字符串</h2><h3 id="1-Python2-X的字符类型"><a href="#1-Python2-X的字符类型" class="headerlink" title="1. Python2.X的字符类型"></a>1. Python2.X的字符类型</h3><h4 id="1-1-str类型-amp-unicode类型"><a href="#1-1-str类型-amp-unicode类型" class="headerlink" title="1.1 str类型 &amp; unicode类型"></a>1.1 str类型 &amp; unicode类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">'中'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="string">u'中'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别看下s1与s2的类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(s1))</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(s2))</span><br><span class="line">&lt;type <span class="string">'unicode'</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-str类型与unicode类型的转换"><a href="#1-2-str类型与unicode类型的转换" class="headerlink" title="1.2 str类型与unicode类型的转换"></a>1.2 str类型与unicode类型的转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># utf-xxx是unicode字符集的具体编码形式，所以str类型转为unicode类型需要进行encode编码</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">u'中'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(s1))</span><br><span class="line">&lt;type <span class="string">'unicode'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_s1 = s1.encode(<span class="string">'utf8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(new_s1))</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反之，unicode类型转为str类型则是将unicode类型解码为str类型，用decode进行解码</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="string">'中'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(s2))</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_s2 = s2.decode(<span class="string">'utf8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(new_s1))</span><br><span class="line">&lt;type <span class="string">'unicode'</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="2-Python3-X的字符类型"><a href="#2-Python3-X的字符类型" class="headerlink" title="2. Python3.X的字符类型"></a>2. Python3.X的字符类型</h3><h4 id="2-1-str类型-amp-bytes类型"><a href="#2-1-str类型-amp-bytes类型" class="headerlink" title="2.1 str类型 &amp; bytes类型"></a>2.1 str类型 &amp; bytes类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">'yang'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="string">b'yang'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别看下s1与s2的类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(s1))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span><span class="params">(type<span class="params">(s2)</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">bytes</span>'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-str类型与bytes类型的转换"><a href="#2-2-str类型与bytes类型的转换" class="headerlink" title="2.2 str类型与bytes类型的转换"></a>2.2 str类型与bytes类型的转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在python3.X中，str类型对应unicode数据，bytes类型对应bytes数据，文本都是unicode数据，对应str类型</span></span><br><span class="line"><span class="comment"># str类型转为bytes类型需要进行encode编码</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1=<span class="string">'yang'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(s1))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; new_s1 = s1.encode('utf8')</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(new_s1))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bytes</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 反之，<span class="title">bytes</span>类型转为<span class="title">str</span>类型则是将<span class="title">unicode</span>数据用<span class="title">decode</span>进行解码</span></span><br><span class="line">&gt;&gt;&gt; s2=b'yang'</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(s2))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bytes</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; new_s2 = s2.decode('utf8')</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(s2))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><ul><li><p>Python3.X最重要的新特性大概要算是对文本和二进制数据作了更为清晰的区分，不再会对bytes字节串进行自动解码。文本总是Unicode，由str类型表示，二进制数据则由bytes类型表示。</p></li><li><p>Python3.X不会以任意隐式的方式混用str和bytes，正是这使得两者的区分特别清晰。用户不能拼接字符串和字节包，也无法在字节包里搜索字符串（反之亦然），也不能将字符串传入参数为字节包的函数（反之亦然）。</p></li><li><p>无论py2，还是py3,与明文直接对应的就是unicode数据，打印unicode数据就会显示相应的明文(包括英文和中文)</p><ul><li><p>Python2.X中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str类型和unicode类型连接</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Elijah'</span>+<span class="string">u'Yang'</span>)</span><br><span class="line"></span><br><span class="line">ElijahYang</span><br></pre></td></tr></table></figure></li><li><p>Python3.X中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字节串和unicode连接</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">b'Elijah'</span>+<span class="string">'Yang'</span>)</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: can<span class="string">'t concat str to bytes</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python2-x字符串-VS-Python3-x字符串&quot;&gt;&lt;a href=&quot;#Python2-x字符串-VS-Python3-x字符串&quot; class=&quot;headerlink&quot; title=&quot;Python2.x字符串 VS Python3.x字符串&quot;&gt;&lt;/a&gt;Py
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python数据类型之集合</title>
    <link href="https://elijahyg.github.io/2019/12/12/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%9B%86%E5%90%88/"/>
    <id>https://elijahyg.github.io/2019/12/12/Python数据类型之集合/</id>
    <published>2019-12-11T16:25:18.000Z</published>
    <updated>2019-12-11T16:25:55.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合类型-set"><a href="#集合类型-set" class="headerlink" title="集合类型(set)"></a>集合类型(set)</h2><h3 id="1-集合介绍"><a href="#1-集合介绍" class="headerlink" title="1. 集合介绍"></a>1. 集合介绍</h3><p>由不同元素组成的集合，集合中是一组无序排列的可hash值，可以作为字典的key</p><h4 id="1-1-定义方式"><a href="#1-1-定义方式" class="headerlink" title="1.1 定义方式"></a>1.1 定义方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义：由不同元素组成的集合，集合中是一组无序排列的可hash值，可以作为字典的key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set([iterable])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set(<span class="string">'yang'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(set1)</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">'yang'</span>&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="★2-常用集合方法"><a href="#★2-常用集合方法" class="headerlink" title="★2. 常用集合方法"></a>★2. 常用集合方法</h3><h4 id="2-1-交集、并集、差集、对称差集"><a href="#2-1-交集、并集、差集、对称差集" class="headerlink" title="2.1 交集、并集、差集、对称差集"></a>2.1 交集、并集、差集、对称差集</h4><p><strong>语法说明</strong><br><em>交集</em></p><blockquote><p>set1 &amp; set2</p></blockquote><p><em>并集</em></p><blockquote><p>set1 | set2</p></blockquote><p><em>差集</em></p><blockquote><p>set1 - set2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = set([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'A'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集：set1和set2同时具有的元素的集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 &amp; set2</span><br><span class="line">&#123;<span class="string">'A'</span>, <span class="string">'1'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集：set1和set2的所有元素的集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 | set2</span><br><span class="line">&#123;<span class="string">'3'</span>, <span class="string">'D'</span>, <span class="string">'C'</span>, <span class="string">'4'</span>, <span class="string">'A'</span>, <span class="string">'1'</span>, <span class="string">'B'</span>, <span class="string">'2'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 差集：在set1中但是不在set2中的所有元素集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 - set2</span><br><span class="line">&#123;<span class="string">'D'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对称差集：在set1或set2中，但不会同时出现在二者中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 ^ set2</span><br><span class="line">&#123;<span class="string">'D'</span>, <span class="string">'C'</span>, <span class="string">'4'</span>, <span class="string">'3'</span>, <span class="string">'B'</span>, <span class="string">'2'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-添加元素"><a href="#2-2-添加元素" class="headerlink" title="2.2 添加元素"></a>2.2 添加元素</h4><p><strong>语法说明</strong></p><blockquote><p>添加一项元素<br>set1.add()</p></blockquote><blockquote><p>添加多项元素<br>set1.update()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = set([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'A'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一项元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1.add(<span class="string">'E'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1</span><br><span class="line">&#123;<span class="string">'E'</span>, <span class="string">'D'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>, <span class="string">'1'</span>, <span class="string">'B'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加多项元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1.update([<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1</span><br><span class="line">&#123;<span class="string">'3'</span>, <span class="string">'D'</span>, <span class="string">'C'</span>, <span class="string">'4'</span>, <span class="string">'A'</span>, <span class="string">'1'</span>, <span class="string">'B'</span>, <span class="string">'2'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-删除元素"><a href="#2-3-删除元素" class="headerlink" title="2.3 删除元素"></a>2.3 删除元素</h4><p><strong>语法说明</strong></p><blockquote><p>删除元素<br>set1.remove()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = set([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'A'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一项元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1.remove(<span class="string">'A'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1</span><br><span class="line">&#123;<span class="string">'D'</span>, <span class="string">'C'</span>, <span class="string">'1'</span>, <span class="string">'B'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-集合长度"><a href="#2-4-集合长度" class="headerlink" title="2.4 集合长度"></a>2.4 集合长度</h4><p><strong>语法说明</strong></p><blockquote><p>len(set1)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = set([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'A'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(set1)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="2-5-判断元素是否是集合成员"><a href="#2-5-判断元素是否是集合成员" class="headerlink" title="2.5 判断元素是否是集合成员"></a>2.5 判断元素是否是集合成员</h4><p><strong>语法说明</strong></p><blockquote><p>x in set1（同理 x not in set1判断元素是否不是集合成员）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = set([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'A'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'B'</span> <span class="keyword">in</span> set1</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="2-6-判断set1集合中每一个元素都在set2中"><a href="#2-6-判断set1集合中每一个元素都在set2中" class="headerlink" title="2.6 判断set1集合中每一个元素都在set2中"></a>2.6 判断set1集合中每一个元素都在set2中</h4><p><strong>语法说明</strong></p><blockquote><p>set1.issubset(set2)<br>同：set1 &lt;= set2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = set([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'A'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1.issubset(set2)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="2-7-判断set2集合中的每一个元素都在set1中"><a href="#2-7-判断set2集合中的每一个元素都在set1中" class="headerlink" title="2.7 判断set2集合中的每一个元素都在set1中"></a>2.7 判断set2集合中的每一个元素都在set1中</h4><p><strong>语法说明</strong></p><blockquote><p>set1.issuperset(set2)<br>同：set1 &gt;= set2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = set([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'A'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1.issuperset(set2)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="2-8-set1和set2的合集，返回包含两集合中的每一个元素的集合"><a href="#2-8-set1和set2的合集，返回包含两集合中的每一个元素的集合" class="headerlink" title="2.8 set1和set2的合集，返回包含两集合中的每一个元素的集合"></a>2.8 set1和set2的合集，返回包含两集合中的每一个元素的集合</h4><p><strong>语法说明</strong></p><blockquote><p>set1.union(set2)<br>同：set1|set2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = set([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'A'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1.union(set2)</span><br><span class="line">&#123;<span class="string">'3'</span>, <span class="string">'D'</span>, <span class="string">'C'</span>, <span class="string">'4'</span>, <span class="string">'A'</span>, <span class="string">'1'</span>, <span class="string">'B'</span>, <span class="string">'2'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-9-set1和set2的交集，返回两集合的共同部分"><a href="#2-9-set1和set2的交集，返回两集合的共同部分" class="headerlink" title="2.9 set1和set2的交集，返回两集合的共同部分"></a>2.9 set1和set2的交集，返回两集合的共同部分</h4><p><strong>语法说明</strong></p><blockquote><p>set1.intersection(set2)<br>同：set1 &amp; set2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = set([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'A'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1.intersection(set2)</span><br><span class="line">&#123;<span class="string">'A'</span>, <span class="string">'1'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-10-set1与set2的差集，返回set1中存在但是set2中不存在的元素"><a href="#2-10-set1与set2的差集，返回set1中存在但是set2中不存在的元素" class="headerlink" title="2.10 set1与set2的差集，返回set1中存在但是set2中不存在的元素"></a>2.10 set1与set2的差集，返回set1中存在但是set2中不存在的元素</h4><p><strong>语法说明</strong></p><blockquote><p>set1.difference(set2)<br>同：set1 - set2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = set([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'A'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1.difference(set2)</span><br><span class="line">&#123;<span class="string">'D'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-11-set1和set2的对称差集，返回set1与set2中不重复的元素"><a href="#2-11-set1和set2的对称差集，返回set1与set2中不重复的元素" class="headerlink" title="2.11 set1和set2的对称差集，返回set1与set2中不重复的元素"></a>2.11 set1和set2的对称差集，返回set1与set2中不重复的元素</h4><p><strong>语法说明</strong></p><blockquote><p>set1.symmetric_difference(set2)<br>同：set1 ^ set2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = set([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'A'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1.symmetric_difference(set2)</span><br><span class="line">&#123;<span class="string">'D'</span>, <span class="string">'C'</span>, <span class="string">'4'</span>, <span class="string">'3'</span>, <span class="string">'B'</span>, <span class="string">'2'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-12-set1浅复制"><a href="#2-12-set1浅复制" class="headerlink" title="2.12 set1浅复制"></a>2.12 set1浅复制</h4><p><strong>语法说明</strong></p><blockquote><p>set1.copy()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'1'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set3 = set1.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set3</span><br><span class="line">&#123;<span class="string">'B'</span>, <span class="string">'D'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>, <span class="string">'1'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-13-不可变集合frozenset"><a href="#2-13-不可变集合frozenset" class="headerlink" title="2.13 不可变集合frozenset"></a>2.13 不可变集合frozenset</h4><p><strong>语法说明</strong></p><blockquote><p>frozenset([iterable]])<br>不可添加、删除元素、可哈希的、能用作字典的键、能做其他集合的元素</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f_set = frozenset(set1)</span><br><span class="line">&gt;&gt;&gt;f_set</span><br><span class="line">frozenset(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;)</span><br><span class="line">&gt;&gt;&gt;set1.add(<span class="string">'a'</span>)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不可变集合不能更改集合</span></span><br><span class="line">&gt;&gt;&gt;f_set.add(<span class="string">'b'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'frozenset'</span> object has no attribute <span class="string">'add'</span></span><br></pre></td></tr></table></figure><h4 id="2-14-set应用-去除列表里重复元素"><a href="#2-14-set应用-去除列表里重复元素" class="headerlink" title="2.14 set应用-去除列表里重复元素"></a>2.14 set应用-去除列表里重复元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去除海量列表里重复元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_a = [A,B,C,D,A,B]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set_b = set(list_a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set_b</span><br><span class="line">set([A,B,C,D])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_c = [i <span class="keyword">for</span> i <span class="keyword">in</span> set_b]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_c</span><br><span class="line">[A,B,C,D]</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://www.iplaypy.com/jichu/set.html" target="_blank" rel="noopener">http://www.iplaypy.com/jichu/set.html</a></p><p><a href="http://www.runoob.com/python/python-func-set.html" target="_blank" rel="noopener">http://www.runoob.com/python/python-func-set.html</a></p><p><a href="http://blog.csdn.net/dragonyangang/article/details/72808992" target="_blank" rel="noopener">http://blog.csdn.net/dragonyangang/article/details/72808992</a></p><p><a href="http://blog.csdn.net/business122/article/details/7541486" target="_blank" rel="noopener">http://blog.csdn.net/business122/article/details/7541486</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;集合类型-set&quot;&gt;&lt;a href=&quot;#集合类型-set&quot; class=&quot;headerlink&quot; title=&quot;集合类型(set)&quot;&gt;&lt;/a&gt;集合类型(set)&lt;/h2&gt;&lt;h3 id=&quot;1-集合介绍&quot;&gt;&lt;a href=&quot;#1-集合介绍&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python数据类型之字典</title>
    <link href="https://elijahyg.github.io/2019/12/02/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E5%85%B8/"/>
    <id>https://elijahyg.github.io/2019/12/02/Python数据类型之字典/</id>
    <published>2019-12-02T15:36:42.000Z</published>
    <updated>2019-12-02T15:38:04.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典类型-dict"><a href="#字典类型-dict" class="headerlink" title="字典类型(dict)"></a>字典类型(dict)</h2><h3 id="1-字典介绍"><a href="#1-字典介绍" class="headerlink" title="1. 字典介绍"></a>1. 字典介绍</h3><p>字典是另一种可变容器模型，且可存储任意类型对象。</p><h4 id="1-1-定义方式"><a href="#1-1-定义方式" class="headerlink" title="1.1 定义方式"></a>1.1 定义方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义：字典的每个键值(key=&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号&#123;&#125;中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;key1 : value1, key2 : value2 &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 键必须是唯一的，但值则不必；值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1 = &#123;<span class="string">'Alice'</span>: <span class="string">'2341'</span>, <span class="string">'Beth'</span>: <span class="string">'9102'</span>, <span class="string">'Cecil'</span>: <span class="string">'3258'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict2 = &#123; <span class="string">'abc'</span>: <span class="number">456</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict3 = &#123; <span class="string">'abc'</span>: <span class="number">123</span>, <span class="number">98.6</span>: <span class="number">37</span> &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="★2-常用字典方法"><a href="#★2-常用字典方法" class="headerlink" title="★2. 常用字典方法"></a>★2. 常用字典方法</h3><h4 id="2-1-dict-key-访问字典中的值"><a href="#2-1-dict-key-访问字典中的值" class="headerlink" title="2.1 dict[key] 访问字典中的值"></a>2.1 dict[key] 访问字典中的值</h4><p><strong>语法说明</strong></p><blockquote><p>把相应的键放入方括号</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"dict['Name']: "</span>, dict[<span class="string">'Name'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</span><br><span class="line"></span><br><span class="line">dict[<span class="string">'Name'</span>]:  Yang</span><br><span class="line">dict[<span class="string">'Age'</span>]:  <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果用字典里没有的键访问数据，会输出错误</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"dict['Alice']: "</span>, dict[<span class="string">'Alice'</span>])</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"test_dict.py"</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"dict['Alice']: "</span>, dict[<span class="string">'Alice'</span>])</span><br><span class="line">KeyError: <span class="string">'Alice'</span></span><br></pre></td></tr></table></figure><h4 id="2-2-修改字典元素"><a href="#2-2-修改字典元素" class="headerlink" title="2.2 修改字典元素"></a>2.2 修改字典元素</h4><p><strong>语法说明</strong></p><blockquote><p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"><span class="comment"># 更新 Age</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict[<span class="string">'Age'</span>] = <span class="number">8</span></span><br><span class="line"><span class="comment"># 添加信息</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict[<span class="string">'School'</span>] = <span class="string">"程序员学院"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>])</span><br><span class="line"></span><br><span class="line">dict[<span class="string">'Age'</span>]:  <span class="number">8</span></span><br><span class="line">dict[<span class="string">'School'</span>]:  程序员学院</span><br></pre></td></tr></table></figure><h4 id="2-3-删除字典元素"><a href="#2-3-删除字典元素" class="headerlink" title="2.3 删除字典元素"></a>2.3 删除字典元素</h4><p><strong>语法说明</strong></p><blockquote><p>能删单一的元素也能清空字典，清空只需一项操作；删除一个字典用del命令</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除键 'Name'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> dict[<span class="string">'Name'</span>]</span><br><span class="line"><span class="comment"># 删除字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict.clear()</span><br><span class="line"><span class="comment"># 删除字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> dict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会引发一个异常，因为用执行 del 操作后字典不再存在</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"test_dict.py"</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</span><br><span class="line">TypeError: <span class="string">'type'</span> object <span class="keyword">is</span> <span class="keyword">not</span> subscriptable</span><br></pre></td></tr></table></figure><h4 id="2-4-字典键的特性"><a href="#2-4-字典键的特性" class="headerlink" title="2.4 字典键的特性"></a>2.4 字典键的特性</h4><ul><li><p>字典值可以是任何的 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。</p></li><li><p>两个重要的点需要记住：</p><ol><li><p>不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Name'</span>: <span class="string">'小菜鸟'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"dict['Name']: "</span>, dict[<span class="string">'Name'</span>])</span><br><span class="line"></span><br><span class="line">dict[<span class="string">'Name'</span>]:  小菜鸟</span><br></pre></td></tr></table></figure></li><li><p>键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;[<span class="string">'Name'</span>]: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">7</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"dict['Name']: "</span>, dict[<span class="string">'Name'</span>])</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"test_dict.py"</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    dict = &#123;[<span class="string">'Name'</span>]: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>&#125;</span><br><span class="line">TypeError: unhashable type: <span class="string">'list'</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="2-5-len-dict-计算字典元素个数，即键的总数"><a href="#2-5-len-dict-计算字典元素个数，即键的总数" class="headerlink" title="2.5 len(dict) 计算字典元素个数，即键的总数"></a>2.5 len(dict) 计算字典元素个数，即键的总数</h4><p><strong>语法说明</strong></p><blockquote><p>len(dict)</p></blockquote><p><strong>参数说明</strong></p><ul><li>dict – 字典对象</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法返回字典键的总数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(len(dict))</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="2-6-str-输出字典，以可打印的字符串表示"><a href="#2-6-str-输出字典，以可打印的字符串表示" class="headerlink" title="2.6 str() 输出字典，以可打印的字符串表示"></a>2.6 str() 输出字典，以可打印的字符串表示</h4><p><strong>语法说明</strong></p><blockquote><p>str(dict)</p></blockquote><p><strong>参数说明</strong></p><ul><li>dict – 字典对象</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法返回输出字典，以可打印的字符串表示</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(dict)</span><br><span class="line"></span><br><span class="line"><span class="string">"&#123;'Name': 'Yang', 'Class': 'First', 'Age': 7&#125;"</span></span><br></pre></td></tr></table></figure><h4 id="2-7-type-返回输入的变量类型，如果变量是字典就返回字典类型"><a href="#2-7-type-返回输入的变量类型，如果变量是字典就返回字典类型" class="headerlink" title="2.7 type() 返回输入的变量类型，如果变量是字典就返回字典类型"></a>2.7 type() 返回输入的变量类型，如果变量是字典就返回字典类型</h4><p><strong>语法说明</strong></p><blockquote><p>type(variable)</p></blockquote><p><strong>参数说明</strong></p><ul><li>variable – 变量</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法返回输入的变量类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(dict)</span><br><span class="line"></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-8-dict-clear-删除字典内所有元素"><a href="#2-8-dict-clear-删除字典内所有元素" class="headerlink" title="2.8 dict.clear() 删除字典内所有元素"></a>2.8 dict.clear() 删除字典内所有元素</h4><p><strong>语法说明</strong></p><blockquote><p>dict.clear()</p></blockquote><p><strong>参数说明</strong></p><ul><li>无</li></ul><p><strong>返回值</strong></p><blockquote><p>该函数没有任何返回值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">7</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"字典长度 : %d"</span> %  len(dict))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"字典删除后长度 : %d"</span> %  len(dict))</span><br><span class="line"></span><br><span class="line">字典长度 : <span class="number">2</span></span><br><span class="line">字典删除后长度 : <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="2-9-dict-copy-返回一个字典的浅复制"><a href="#2-9-dict-copy-返回一个字典的浅复制" class="headerlink" title="2.9 dict.copy() 返回一个字典的浅复制"></a>2.9 dict.copy() 返回一个字典的浅复制</h4><p><strong>语法说明</strong></p><blockquote><p>dict.copy()</p></blockquote><p><strong>参数说明</strong></p><ul><li>无</li></ul><p><strong>返回值</strong></p><blockquote><p>返回一个字典的浅复制返回一个字典的浅复制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1 = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict2 = dict1.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"新复制的字典为 : "</span>,dict2)</span><br><span class="line"></span><br><span class="line">新复制的字典为 :  &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-10-fromkeys-函数用于创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值。"><a href="#2-10-fromkeys-函数用于创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值。" class="headerlink" title="2.10 fromkeys() 函数用于创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值。"></a>2.10 fromkeys() 函数用于创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值。</h4><p><strong>语法说明</strong></p><blockquote><p>dict.fromkeys(seq[, value]))</p></blockquote><p><strong>参数说明</strong></p><ul><li>seq – 字典键值列表</li><li>value – 可选参数, 设置键序列（seq）的值</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法返回列表</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>seq = (<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = dict.fromkeys(seq)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"新的字典为 : %s"</span> %  str(dict))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = dict.fromkeys(seq, <span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"新的字典为 : %s"</span> %  str(dict))</span><br><span class="line"></span><br><span class="line">新的字典为 : &#123;<span class="string">'name'</span>: <span class="literal">None</span>, <span class="string">'age'</span>: <span class="literal">None</span>, <span class="string">'sex'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">新的字典为 : &#123;<span class="string">'name'</span>: <span class="number">10</span>, <span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'sex'</span>: <span class="number">10</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-11-get-函数返回指定键的值，如果值不在字典中返回默认值"><a href="#2-11-get-函数返回指定键的值，如果值不在字典中返回默认值" class="headerlink" title="2.11 get() 函数返回指定键的值，如果值不在字典中返回默认值"></a>2.11 get() 函数返回指定键的值，如果值不在字典中返回默认值</h4><p><strong>语法说明</strong></p><blockquote><p>dict.get(key, default=None)</p></blockquote><p><strong>参数说明</strong></p><ul><li>key – 字典中要查找的键。</li><li>default – 如果指定键的值不存在时，返回该默认值值。</li></ul><p><strong>返回值</strong></p><blockquote><p>返回指定键的值，如果值不在字典中返回默认值 None</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">26</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"Age 值为 : %s"</span> %  dict.get(<span class="string">'Age'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"Sex 值为 : %s"</span> %  dict.get(<span class="string">'Sex'</span>, <span class="string">"NA"</span>))</span><br><span class="line"></span><br><span class="line">Age 值为 : <span class="number">26</span></span><br><span class="line">Sex 值为 : NA</span><br></pre></td></tr></table></figure><h4 id="2-12-in-操作符用于判断键是否存在于字典中，返回布尔值"><a href="#2-12-in-操作符用于判断键是否存在于字典中，返回布尔值" class="headerlink" title="2.12 in 操作符用于判断键是否存在于字典中，返回布尔值"></a>2.12 in 操作符用于判断键是否存在于字典中，返回布尔值</h4><p><strong>语法说明</strong></p><blockquote><p>key in dict</p></blockquote><p><strong>参数说明</strong></p><ul><li>key – 要在字典中查找的键</li></ul><p><strong>返回值</strong></p><blockquote><p>如果键在字典里返回true，否则返回false</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">26</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测键 Age 是否存在</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span>  <span class="string">'Age'</span> <span class="keyword">in</span> dict:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    print(<span class="string">"键 Age 存在"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">else</span> :</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    print(<span class="string">"键 Age 不存在"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测键 Sex 是否存在</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span>  <span class="string">'Sex'</span> <span class="keyword">in</span> dict:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    print(<span class="string">"键 Sex 存在"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">else</span> :</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    print(<span class="string">"键 Sex 不存在"</span>)</span><br><span class="line"></span><br><span class="line">键 Age 存在</span><br><span class="line">键 Sex 不存在</span><br></pre></td></tr></table></figure><h4 id="2-13-items-方法以列表返回可遍历的-键-值-元组数组"><a href="#2-13-items-方法以列表返回可遍历的-键-值-元组数组" class="headerlink" title="2.13 items() 方法以列表返回可遍历的(键, 值) 元组数组"></a>2.13 items() 方法以列表返回可遍历的(键, 值) 元组数组</h4><p><strong>语法说明</strong></p><blockquote><p>dict.items()</p></blockquote><p><strong>参数说明</strong></p><ul><li>无</li></ul><p><strong>返回值</strong></p><blockquote><p>返回可遍历的(键, 值) 元组数组</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">26</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"Value : %s"</span> %  dict.items())</span><br><span class="line"></span><br><span class="line">Value : dict_items([(<span class="string">'Name'</span>, <span class="string">'Yang'</span>), (<span class="string">'Age'</span>, <span class="number">26</span>)])</span><br></pre></td></tr></table></figure><h4 id="2-14-keys-方法以列表返回一个字典所有的键"><a href="#2-14-keys-方法以列表返回一个字典所有的键" class="headerlink" title="2.14 keys() 方法以列表返回一个字典所有的键"></a>2.14 keys() 方法以列表返回一个字典所有的键</h4><p><strong>语法说明</strong></p><blockquote><p>dict.keys()</p></blockquote><p><strong>参数说明</strong></p><ul><li>无</li></ul><p><strong>返回值</strong></p><blockquote><p>返回一个字典所有的键</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">26</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"字典所有的键为 : %s"</span> %  dict.keys())</span><br><span class="line"></span><br><span class="line">字典所有的键为 : dict_keys([<span class="string">'Age'</span>, <span class="string">'Name'</span>])</span><br></pre></td></tr></table></figure><h4 id="2-15-setdefault-与get-方法类似-如果键不已经存在于字典中，将会添加键并将值设为默认值"><a href="#2-15-setdefault-与get-方法类似-如果键不已经存在于字典中，将会添加键并将值设为默认值" class="headerlink" title="2.15 setdefault() 与get()方法类似, 如果键不已经存在于字典中，将会添加键并将值设为默认值"></a>2.15 setdefault() 与get()方法类似, 如果键不已经存在于字典中，将会添加键并将值设为默认值</h4><p><strong>语法说明</strong></p><blockquote><p>dict.setdefault(key, default=None)</p></blockquote><p><strong>参数说明</strong></p><ul><li>key – 查找的键值。</li><li>default – 键不存在时，设置的默认键值。</li></ul><p>**返回值</p><blockquote><p>该方法没有任何返回值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 与get()方法类似, 如果键不已经存在于字典中，将会添加键并将值设为默认值。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">26</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"Age 键的值为 : %s"</span> %  dict.setdefault(<span class="string">'Age'</span>, <span class="literal">None</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"Sex 键的值为 : %s"</span> %  dict.setdefault(<span class="string">'Sex'</span>, <span class="literal">None</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"新字典为："</span>, dict)</span><br><span class="line"></span><br><span class="line">Age 键的值为 : <span class="number">26</span></span><br><span class="line">Sex 键的值为 : <span class="literal">None</span></span><br><span class="line">新字典为： &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">26</span>, <span class="string">'Sex'</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-16-update-函数把字典dict2的键-值对更新到dict里"><a href="#2-16-update-函数把字典dict2的键-值对更新到dict里" class="headerlink" title="2.16 update() 函数把字典dict2的键/值对更新到dict里"></a>2.16 update() 函数把字典dict2的键/值对更新到dict里</h4><p><strong>语法说明</strong></p><blockquote><p>dict.update(dict2)</p></blockquote><p><strong>参数说明</strong></p><ul><li>dict2 – 添加到指定字典dict里的字典</li></ul><p><strong>返回值</strong></p><blockquote><p>无</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Name'</span>: <span class="string">'Yang'</span>, <span class="string">'Age'</span>: <span class="number">26</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict2 = &#123;<span class="string">'Sex'</span>: <span class="string">'female'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict.update(dict2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"更新字典 dict : "</span>, dict)</span><br><span class="line"></span><br><span class="line">更新字典 dict :  &#123;<span class="string">'Sex'</span>: <span class="string">'female'</span>, <span class="string">'Age'</span>: <span class="number">26</span>, <span class="string">'Name'</span>: <span class="string">'Yang'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-17-values-方法以列表返回字典中的所有值"><a href="#2-17-values-方法以列表返回字典中的所有值" class="headerlink" title="2.17 values() 方法以列表返回字典中的所有值"></a>2.17 values() 方法以列表返回字典中的所有值</h4><p><strong>语法说明</strong></p><blockquote><p>dict.values()</p></blockquote><p><strong>参数说明</strong></p><ul><li>无</li></ul><p><strong>返回值</strong></p><blockquote><p>返回字典中的所有值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict = &#123;<span class="string">'Sex'</span>: <span class="string">'male'</span>, <span class="string">'Age'</span>: <span class="number">26</span>, <span class="string">'Name'</span>: <span class="string">'Yang'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"字典所有值为 : "</span>,  list(dict.values()))</span><br><span class="line"></span><br><span class="line">字典所有值为 :  [<span class="string">'male'</span>, <span class="number">26</span>, <span class="string">'Yang'</span>]</span><br></pre></td></tr></table></figure><h4 id="2-18-pop-方法删除字典给定键-key-所对应的值，返回值为被删除的值。key值必须给出-否则，返回default值"><a href="#2-18-pop-方法删除字典给定键-key-所对应的值，返回值为被删除的值。key值必须给出-否则，返回default值" class="headerlink" title="2.18 pop() 方法删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出,否则，返回default值"></a>2.18 pop() 方法删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出,否则，返回default值</h4><p><strong>语法说明</strong></p><blockquote><p>pop(key[,default])</p></blockquote><p><strong>参数说明</strong></p><ul><li>key: 要删除的键值</li><li>default: 如果没有 key，返回 default 值</li></ul><p><strong>返回值</strong></p><blockquote><p>返回被删除的值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>site= &#123;<span class="string">'name'</span>: <span class="string">'程序员学院'</span>, <span class="string">'alexa'</span>: <span class="number">10000</span>, <span class="string">'url'</span>: <span class="string">'www.engineer.com'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pop_obj=site.pop(<span class="string">'name'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(pop_obj)</span><br><span class="line"></span><br><span class="line">程序员学院</span><br></pre></td></tr></table></figure><h4 id="2-19-popitem-方法随机返回并删除字典中的一对键和值-一般删除末尾对-。"><a href="#2-19-popitem-方法随机返回并删除字典中的一对键和值-一般删除末尾对-。" class="headerlink" title="2.19 popitem() 方法随机返回并删除字典中的一对键和值(一般删除末尾对)。"></a>2.19 popitem() 方法随机返回并删除字典中的一对键和值(一般删除末尾对)。</h4><blockquote><p>如果字典已经为空，却调用了此方法，就报出KeyError异常。</p></blockquote><p><strong>语法说明</strong></p><blockquote><p>popitem()</p></blockquote><p><strong>参数说明</strong></p><ul><li>无</li></ul><p><strong>返回值</strong></p><blockquote><p>返回一个键值对(key,value)形式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">site= &#123;<span class="string">'name'</span>: <span class="string">'程序员学院'</span>, <span class="string">'alexa'</span>: <span class="number">10000</span>, <span class="string">'url'</span>: <span class="string">'www.engineer.com'</span>&#125;</span><br><span class="line">pop_obj=site.popitem()</span><br><span class="line">print(pop_obj)</span><br><span class="line">print(site)</span><br><span class="line"></span><br><span class="line">(<span class="string">'url'</span>, <span class="string">'www.engineer.com'</span>)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'程序员学院'</span>, <span class="string">'alexa'</span>: <span class="number">10000</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;字典类型-dict&quot;&gt;&lt;a href=&quot;#字典类型-dict&quot; class=&quot;headerlink&quot; title=&quot;字典类型(dict)&quot;&gt;&lt;/a&gt;字典类型(dict)&lt;/h2&gt;&lt;h3 id=&quot;1-字典介绍&quot;&gt;&lt;a href=&quot;#1-字典介绍&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python数据类型之元组.md</title>
    <link href="https://elijahyg.github.io/2019/11/19/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%85%83%E7%BB%84/"/>
    <id>https://elijahyg.github.io/2019/11/19/Python数据类型之元组/</id>
    <published>2019-11-19T15:24:08.000Z</published>
    <updated>2019-11-19T15:28:37.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元组类型-tuple"><a href="#元组类型-tuple" class="headerlink" title="元组类型(tuple)"></a>元组类型(tuple)</h2><h3 id="1-元组介绍"><a href="#1-元组介绍" class="headerlink" title="1. 元组介绍"></a>1. 元组介绍</h3><p>Python的元组与列表类似，同样可通过索引访问，支持异构，任意嵌套。不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号。</p><h4 id="1-1-定义方式"><a href="#1-1-定义方式" class="headerlink" title="1.1 定义方式"></a>1.1 定义方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义：()内可以有多个任意类型的值，逗号分隔</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方法-定义元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> )</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup3 = <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup3)</span><br><span class="line"></span><br><span class="line">(<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方法-定义空元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup1)</span><br><span class="line"></span><br><span class="line">()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方法-元组中只包含一个元素时，需要在元素后面添加逗号</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="string">'yang'</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup1)</span><br><span class="line"></span><br><span class="line">(<span class="string">'yang'</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方法2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1=tuple((<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'peach'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup1)</span><br><span class="line"></span><br><span class="line">(<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'peach'</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="★2-常用元组方法"><a href="#★2-常用元组方法" class="headerlink" title="★2. 常用元组方法"></a>★2. 常用元组方法</h3><h4 id="2-1-tuple-index-访问元组中的值"><a href="#2-1-tuple-index-访问元组中的值" class="headerlink" title="2.1 tuple[index] 访问元组中的值"></a>2.1 tuple[index] 访问元组中的值</h4><p><strong>语法说明</strong></p><blockquote><p>使用下标索引来访问列表中的值，下标从0开始计数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用下标索引来访问列表中的值，下标从0开始计数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> )</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"tup1[0]: "</span>,tup1[<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"tup2[1:5]: "</span>,tup2[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"tup2[1:]: "</span>,tup2[<span class="number">1</span>:]:)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"tup2[-2]: "</span>,tup2[<span class="number">-2</span>]:)</span><br><span class="line"></span><br><span class="line">tup1[<span class="number">0</span>]: physics</span><br><span class="line">tup2[<span class="number">1</span>:<span class="number">5</span>]: (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">tup2[<span class="number">1</span>:]: (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">tup2[<span class="number">-2</span>]: <span class="number">6</span></span><br></pre></td></tr></table></figure><h4 id="2-2-修改元组"><a href="#2-2-修改元组" class="headerlink" title="2.2 修改元组"></a>2.2 修改元组</h4><blockquote><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下修改元组元素操作是非法的。</span></span><br><span class="line"><span class="comment"># tup1[0] = 100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">12</span>, <span class="number">34.56</span>);</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup2 = (<span class="string">'abc'</span>, <span class="string">'xyz'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup3 = tup1 + tup2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup3)</span><br><span class="line"></span><br><span class="line">(<span class="number">12</span>, <span class="number">34.56</span>, <span class="string">'abc'</span>, <span class="string">'xyz'</span>)</span><br></pre></td></tr></table></figure><h4 id="2-3-删除元组"><a href="#2-3-删除元组" class="headerlink" title="2.3 删除元组"></a>2.3 删除元组</h4><blockquote><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup = (<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> tup</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"After deleting tup : "</span>,tup)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上实例元组被删除后，输出变量会有异常信息</span></span><br><span class="line">(<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">After deleting tup :</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"test_deltup.py"</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> tup;</span><br><span class="line">NameError: name <span class="string">'tup'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><h4 id="2-4-元组运算符"><a href="#2-4-元组运算符" class="headerlink" title="2.4 元组运算符"></a>2.4 元组运算符</h4><blockquote><p>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p></blockquote><table><thead><tr><th align="center">Python 表达式</th><th align="center">结果结果</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">len((1, 2, 3))</td><td align="center">3</td><td align="center">计算元素个数</td></tr><tr><td align="center">(1, 2, 3) + (4, 5, 6)</td><td align="center">(1, 2, 3, 4, 5, 6)</td><td align="center">连接</td></tr><tr><td align="center">(‘copy’,) * 4</td><td align="center">(‘copy’, ‘copy’, ‘copy’, ‘copy’)</td><td align="center">复制</td></tr><tr><td align="center">3 in (1, 2, 3)</td><td align="center">True</td><td align="center">元素是否存在</td></tr><tr><td align="center">for x in (1, 2, 3): print x,</td><td align="center">1 2 3</td><td align="center">迭代</td></tr></tbody></table><h4 id="2-5-无关闭分隔符"><a href="#2-5-无关闭分隔符" class="headerlink" title="2.5 无关闭分隔符"></a>2.5 无关闭分隔符</h4><blockquote><p>任意无符号的对象，以逗号隔开，默认为元组</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup2 = <span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup2)</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">(<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>)</span><br></pre></td></tr></table></figure><h4 id="2-6-len-计算元组元素个数"><a href="#2-6-len-计算元组元素个数" class="headerlink" title="2.6 len() 计算元组元素个数"></a>2.6 len() 计算元组元素个数</h4><p><strong>语法说明</strong></p><blockquote><p>len(tuple)</p></blockquote><p><strong>参数说明</strong></p><ul><li>tuple – 元组对象</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法返回元组中元素个数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1 = (<span class="string">'Google'</span>, <span class="string">'Baidu'</span>, <span class="string">'Taobao'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(len(tuple1))</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="2-7-max-返回元组中元素最大值"><a href="#2-7-max-返回元组中元素最大值" class="headerlink" title="2.7 max() 返回元组中元素最大值"></a>2.7 max() 返回元组中元素最大值</h4><p><strong>语法说明</strong></p><blockquote><p>max(tuple)</p></blockquote><p><strong>参数说明</strong></p><ul><li>tuple – 元组对象</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法返回元组中元素最大值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple2 = (<span class="string">'5'</span>, <span class="string">'4'</span>, <span class="string">'8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(max(tuple2))</span><br><span class="line"></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="2-8-min-返回元组中元素最小值"><a href="#2-8-min-返回元组中元素最小值" class="headerlink" title="2.8 min() 返回元组中元素最小值"></a>2.8 min() 返回元组中元素最小值</h4><p><strong>语法说明</strong></p><blockquote><p>min(tuple)</p></blockquote><p><strong>参数说明</strong></p><ul><li>tuple – 元组对象</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法返回值返回元组中元素最小值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple2 = (<span class="string">'5'</span>, <span class="string">'4'</span>, <span class="string">'8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(min(tuple2))</span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="2-9-tuple-将列表转换为元组"><a href="#2-9-tuple-将列表转换为元组" class="headerlink" title="2.9 tuple() 将列表转换为元组"></a>2.9 tuple() 将列表转换为元组</h4><p><strong>语法说明</strong></p><blockquote><p>tuple(seq)</p></blockquote><p><strong>参数说明</strong></p><ul><li>seq – 序列对象，如列表</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法返回值转换后的元组对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1= [<span class="string">'Google'</span>, <span class="string">'Taobao'</span>, <span class="string">'Facebook'</span>, <span class="string">'Baidu'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1=tuple(list1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tuple1)</span><br><span class="line"></span><br><span class="line">(<span class="string">'Google'</span>, <span class="string">'Taobao'</span>, <span class="string">'Facebook'</span>, <span class="string">'Baidu'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;元组类型-tuple&quot;&gt;&lt;a href=&quot;#元组类型-tuple&quot; class=&quot;headerlink&quot; title=&quot;元组类型(tuple)&quot;&gt;&lt;/a&gt;元组类型(tuple)&lt;/h2&gt;&lt;h3 id=&quot;1-元组介绍&quot;&gt;&lt;a href=&quot;#1-元组介绍&quot; class
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python数据类型之列表</title>
    <link href="https://elijahyg.github.io/2019/10/30/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%88%97%E8%A1%A8/"/>
    <id>https://elijahyg.github.io/2019/10/30/Python数据类型之列表/</id>
    <published>2019-10-30T15:17:13.000Z</published>
    <updated>2019-10-30T15:22:15.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表类型-list"><a href="#列表类型-list" class="headerlink" title="列表类型(list)"></a>列表类型(list)</h2><h3 id="1-列表介绍"><a href="#1-列表介绍" class="headerlink" title="1. 列表介绍"></a>1. 列表介绍</h3><p>列表是我们最以后最常用的数据类型之一，通过列表可以对数据实现最方便的存储、修改等操作。</p><h4 id="1-1-定义方式"><a href="#1-1-定义方式" class="headerlink" title="1.1 定义方式"></a>1.1 定义方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义：[]内可以有多个任意类型的值，逗号分隔</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方法1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'peach'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(l)</span><br><span class="line">[<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'peach'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义方法2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=list([<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'peach'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(l)</span><br><span class="line">[<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'peach'</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="★2-常用列表方法"><a href="#★2-常用列表方法" class="headerlink" title="★2. 常用列表方法"></a>★2. 常用列表方法</h3><h4 id="2-1-list-index-访问列表中的值"><a href="#2-1-list-index-访问列表中的值" class="headerlink" title="2.1 list[index] 访问列表中的值"></a>2.1 list[index] 访问列表中的值</h4><p><strong>语法说明</strong></p><blockquote><p>使用下标索引来访问列表中的值，下标从0开始计数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过下标访问列表中的值，下标从0开始计数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">'Google'</span>, <span class="string">'Facebook'</span>, <span class="string">'Baidu'</span>, <span class="string">'Apple'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1[<span class="number">0</span>]</span><br><span class="line"><span class="string">'Google'</span></span><br></pre></td></tr></table></figure><h4 id="2-2-list-index-start：index-end-切片-取多个元素"><a href="#2-2-list-index-start：index-end-切片-取多个元素" class="headerlink" title="2.2 list[index_start：index_end] 切片:取多个元素"></a>2.2 list[index_start：index_end] 切片:取多个元素</h4><p><strong>语法说明</strong></p><blockquote><p>使用方括号的形式截取字符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过[]索引截取列表中的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取下标1至下标4之间的数字，包括1，不包括4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">[<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取下标1至-1的值，不包括-1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">[<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取下标0至3的值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是从头取，则和上面例子相同，取下标0至3的值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[:<span class="number">3</span>]</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想取最后一个，必须不能写-1，只能这么写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">3</span>:]</span><br><span class="line">[<span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不想取最后一个，则要这样写，这样-1就不会被包含了</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">3</span>:<span class="number">-1</span>]</span><br><span class="line">[<span class="string">'D'</span>, <span class="string">'E'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后面的2是代表，每隔一个元素，就取一个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">0</span>::<span class="number">2</span>]</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'E'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后面的2是代表，每隔一个元素，就取一个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"F"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[::<span class="number">2</span>]</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'E'</span>]</span><br></pre></td></tr></table></figure><h4 id="2-3-append-列表追加"><a href="#2-3-append-列表追加" class="headerlink" title="2.3 append() 列表追加"></a>2.3 append() 列表追加</h4><p><strong>语法说明</strong></p><blockquote><p>list.append(obj)</p></blockquote><p><strong>参数说明</strong></p><ul><li>obj – 添加到列表末尾的对象。</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法无返回值，但是会修改原来的列表。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># append()对列表进行追加原色</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Taobao"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.append(<span class="string">"Baidu"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1</span><br><span class="line">[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Taobao"</span>,<span class="string">"Baidu"</span>]</span><br></pre></td></tr></table></figure><h4 id="2-4-insert-列表元素插入"><a href="#2-4-insert-列表元素插入" class="headerlink" title="2.4 insert() 列表元素插入"></a>2.4 insert() 列表元素插入</h4><p><strong>语法说明</strong></p><blockquote><p>list.insert(index, obj)</p></blockquote><p><strong>参数说明</strong></p><ul><li>index – 对象obj需要插入的索引位置。</li><li>obj – 要插入列表中的对象。</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法没有返回值，但会在列表指定位置插入对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># insert() 将指定对象插入列表的指定位置。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Taobao"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.insert(<span class="number">1</span>, <span class="string">"Baidu"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="string">"Google"</span>, <span class="string">"Baidu"</span>, <span class="string">"Facebook"</span>, <span class="string">"Taobao"</span>]</span><br></pre></td></tr></table></figure><h4 id="2-5-列表修改"><a href="#2-5-列表修改" class="headerlink" title="2.5 列表修改"></a>2.5 列表修改</h4><p><strong>语法说明</strong></p><blockquote><p>list[index] = new_obj</p></blockquote><p><strong>参数说明</strong></p><ul><li>index – 对象new_obj需要写入的索引位置。</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法没有返回值，但会在列表指定位置更新对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将新对象赋值到指定位置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Taobao"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">1</span>] = <span class="string">"Baidu"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="string">"Google"</span>, <span class="string">"Baidu"</span>, <span class="string">"Taobao"</span>]</span><br></pre></td></tr></table></figure><h4 id="2-6-列表元素删除"><a href="#2-6-列表元素删除" class="headerlink" title="2.6 列表元素删除"></a>2.6 列表元素删除</h4><p><strong>语法说明</strong></p><blockquote><p>del list[index]<br>list.remove(obj)<br>list.pop()</p></blockquote><p><strong>参数说明</strong></p><ul><li>index – 列表的索引位置。</li><li>obj – 列表中的对象。</li></ul><p><strong>返回值</strong></p><blockquote><p>以上三种方法没有返回值，但会更新列表对元素对象，将指定元素删除</p></blockquote><ul><li><p>2.6.1 del list[index]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># del list[index] 删除列表指定位置的元素</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Baidu"</span>, <span class="string">"Taobao"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> l[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="string">"Google"</span>,<span class="string">"Baidu"</span>, <span class="string">"Taobao"</span>]</span><br></pre></td></tr></table></figure></li><li><p>2.6.2 list.remove(obj)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list.remove(obj) 删除列表指定对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Baidu"</span>, <span class="string">"Taobao"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.remove(<span class="string">"Facebook"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="string">"Google"</span>,<span class="string">"Baidu"</span>, <span class="string">"Taobao"</span>]</span><br></pre></td></tr></table></figure></li><li><p>2.6.3 list.pop()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list.pop() 删除列表中最后一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Baidu"</span>, <span class="string">"Taobao"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.pop()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Baidu"</span>]</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-7-extend-列表扩展元素"><a href="#2-7-extend-列表扩展元素" class="headerlink" title="2.7 extend() 列表扩展元素"></a>2.7 extend() 列表扩展元素</h4><p><strong>语法说明</strong></p><blockquote><p>list.extend(seq)</p></blockquote><p><strong>参数说明</strong></p><ul><li>seq – 元素列表。</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法没有返回值，但会在已存在的列表中添加新的列表内容。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># extend()用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将由0至4的新列表l2扩展到l1列表最后</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1 = [<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Taobao"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2=list(range(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1.extend(l2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1</span><br><span class="line">[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Taobao"</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h4 id="2-8-count-统计列表中某个元素出现的个数"><a href="#2-8-count-统计列表中某个元素出现的个数" class="headerlink" title="2.8 count() 统计列表中某个元素出现的个数"></a>2.8 count() 统计列表中某个元素出现的个数</h4><p><strong>语法说明</strong></p><blockquote><p>list.count(obj)</p></blockquote><p><strong>参数说明</strong></p><ul><li>obj – 列表中统计的对象。</li></ul><p><strong>返回值</strong></p><blockquote><p>返回元素在列表中出现的次数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># count()用于统计某个元素在列表中出现的次数。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Taobao"</span>, <span class="string">"Baidu"</span>, <span class="string">"Google"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.count(<span class="string">"Google"</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Taobao"</span>, <span class="string">"Baidu"</span>, <span class="string">"Google"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.count(<span class="string">"Facebook"</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="2-9-sort-列表排序"><a href="#2-9-sort-列表排序" class="headerlink" title="2.9 sort() 列表排序"></a>2.9 sort() 列表排序</h4><p><strong>语法说明</strong></p><blockquote><p>list.sort([func])</p></blockquote><p><strong>参数说明</strong></p><ul><li>func – 可选参数, 如果指定了该参数会使用该参数的方法进行排序。</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法没有返回值，但是会对列表的对象进行排序。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sort()用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表中的元素都是数字，进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表中的元素都是字符串，进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="string">"Baidu"</span>,<span class="string">"Google"</span>,<span class="string">"Facebook"</span>,<span class="string">"Taobao"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="string">'Baidu'</span>, <span class="string">'Facebook'</span>, <span class="string">'Google'</span>, <span class="string">'Taobao'</span>]</span><br></pre></td></tr></table></figure><h4 id="2-10-reverse-列表翻转"><a href="#2-10-reverse-列表翻转" class="headerlink" title="2.10 reverse() 列表翻转"></a>2.10 reverse() 列表翻转</h4><p><strong>语法说明</strong></p><blockquote><p>list.reverse()</p></blockquote><p><strong>返回值</strong></p><blockquote><p>该方法没有返回值，但是会对列表的元素进行反向排序。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reverse()用于反向列表中元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表中的元素反向排序至列表中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="string">"Baidu"</span>,<span class="string">"Google"</span>,<span class="string">"Facebook"</span>,<span class="string">"Taobao"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="string">'Taobao'</span>, <span class="string">'Facebook'</span>, <span class="string">'Google'</span>, <span class="string">'Baidu'</span>]</span><br></pre></td></tr></table></figure><h4 id="2-11-index-获取列表指定元素下标"><a href="#2-11-index-获取列表指定元素下标" class="headerlink" title="2.11 index() 获取列表指定元素下标"></a>2.11 index() 获取列表指定元素下标</h4><p><strong>语法说明</strong></p><blockquote><p>list.index(obj)</p></blockquote><p><strong>参数说明</strong></p><ul><li>obj – 查找的对象。</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法返回查找对象的索引位置，如果没有找到对象则抛出异常。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index()用于从列表中找出某个值第一个匹配项的索引位置。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="string">"Baidu"</span>,<span class="string">"Google"</span>,<span class="string">"Facebook"</span>,<span class="string">"Taobao"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.index(<span class="string">"Taobao"</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="☆2-12-copy-浅拷贝-copy-deepcopy-深拷贝"><a href="#☆2-12-copy-浅拷贝-copy-deepcopy-深拷贝" class="headerlink" title="☆2.12 copy() 浅拷贝 / copy.deepcopy() 深拷贝"></a>☆2.12 copy() 浅拷贝 / copy.deepcopy() 深拷贝</h4><p><strong>语法说明</strong><br><strong><em>copy()</em></strong></p><blockquote><p>list.copy()</p></blockquote><p><strong><em>copy.deepcopy()</em></strong></p><blockquote><p>copy.deepcopy(origin_list)</p></blockquote><p><strong>参数说明</strong></p><ul><li>origin_list表示深拷贝所拷贝的原始列表</li></ul><p><strong>返回值</strong></p><blockquote><p>返回复制后的新列表。</p></blockquote><ul><li><p>2.12.1 copy() 浅拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copy()用于复制列表，类似于 a[:]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将l1列表拷贝至l2列表中，l1与l2两列表元素相同</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1=[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Baidu"</span>,[<span class="string">"Apple"</span>,<span class="string">"Banana"</span>,<span class="string">"Peach"</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 = l1.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2</span><br><span class="line">[<span class="string">'Google'</span>, <span class="string">'Facebook'</span>, <span class="string">'Baidu'</span>, [<span class="string">'Apple'</span>, <span class="string">'Banana'</span>, <span class="string">'Peach'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意，上述例子中如果在l1原始列表进行更改，l2列表会随之改变，此即为浅拷贝</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1=[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Baidu"</span>,[<span class="string">"Apple"</span>,<span class="string">"Banana"</span>,<span class="string">"Peach"</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 = l1.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2</span><br><span class="line">[<span class="string">'Google'</span>, <span class="string">'Facebook'</span>, <span class="string">'Baidu'</span>, [<span class="string">'Apple'</span>, <span class="string">'Banana'</span>, <span class="string">'Peach'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1[<span class="number">3</span>].append(<span class="string">"NewComer"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1</span><br><span class="line">[<span class="string">'Google'</span>, <span class="string">'Facebook'</span>, <span class="string">'Baidu'</span>, [<span class="string">'Apple'</span>, <span class="string">'Banana'</span>, <span class="string">'Peach'</span>, <span class="string">'NewComer'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2</span><br><span class="line">[<span class="string">'Google'</span>, <span class="string">'Facebook'</span>, <span class="string">'Baidu'</span>, [<span class="string">'Apple'</span>, <span class="string">'Banana'</span>, <span class="string">'Peach'</span>, <span class="string">'NewComer'</span>]]</span><br></pre></td></tr></table></figure></li><li><p>2.12.2 copy.deepcopy() 深拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copy.deepcopy()深拷贝，copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与浅拷贝不同，深拷贝的情况下，如果在l1原始列表进行更改，l2列表不会随之改变，此即为深拷贝</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1=[<span class="string">"Google"</span>, <span class="string">"Facebook"</span>, <span class="string">"Baidu"</span>,[<span class="string">"Apple"</span>,<span class="string">"Banana"</span>,<span class="string">"Peach"</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 = copy.deepcopy(l1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2</span><br><span class="line">[<span class="string">'Google'</span>, <span class="string">'Facebook'</span>, <span class="string">'Baidu'</span>, [<span class="string">'Apple'</span>, <span class="string">'Banana'</span>, <span class="string">'Peach'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1[<span class="number">3</span>].append(<span class="string">"NewComer"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1</span><br><span class="line">[<span class="string">'Google'</span>, <span class="string">'Facebook'</span>, <span class="string">'Baidu'</span>, [<span class="string">'Apple'</span>, <span class="string">'Banana'</span>, <span class="string">'Peach'</span>, <span class="string">'NewComer'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2</span><br><span class="line">[<span class="string">'Google'</span>, <span class="string">'Facebook'</span>, <span class="string">'Baidu'</span>, [<span class="string">'Apple'</span>, <span class="string">'Banana'</span>, <span class="string">'Peach'</span>]]</span><br></pre></td></tr></table></figure></li><li><p>2.12.3 深浅拷贝原理解析</p><ul><li><h5 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h5><img src="/images/post_imgs/shallow.png" alt></li><li><h5 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h5><img src="/images/post_imgs/deep.png" alt></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;列表类型-list&quot;&gt;&lt;a href=&quot;#列表类型-list&quot; class=&quot;headerlink&quot; title=&quot;列表类型(list)&quot;&gt;&lt;/a&gt;列表类型(list)&lt;/h2&gt;&lt;h3 id=&quot;1-列表介绍&quot;&gt;&lt;a href=&quot;#1-列表介绍&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
</feed>
