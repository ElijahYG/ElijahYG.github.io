<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yang&#39;s Blog</title>
  
  <subtitle>顺境内敛 逆境不屈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://elijahyg.github.io/"/>
  <updated>2019-09-21T17:30:43.975Z</updated>
  <id>https://elijahyg.github.io/</id>
  
  <author>
    <name>Elijah Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go语言起源</title>
    <link href="https://elijahyg.github.io/2019/09/22/Go%E8%AF%AD%E8%A8%80%E8%B5%B7%E6%BA%90/"/>
    <id>https://elijahyg.github.io/2019/09/22/Go语言起源/</id>
    <published>2019-09-21T17:19:47.000Z</published>
    <updated>2019-09-21T17:30:43.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言的前世今生"><a href="#Go语言的前世今生" class="headerlink" title="Go语言的前世今生"></a>Go语言的前世今生</h2><h3 id="时代背景"><a href="#时代背景" class="headerlink" title="时代背景"></a>时代背景</h3><p>当今社会主流语言基本都诞生于上世纪90年代或者更早，例如Python(1991)、Java(1995)、C(1972)、C++(1983)、JavaScript(1995)、C#(2001)、PHP(1995)等等，同时我们也需要明白计算机硬件的发展，在2005年4月，英特尔的第一款双核处理器平台包括采用英特尔955X高速芯片组、主频为3.2GHz的英特尔奔腾处理器至尊版840，此款产品的问世标志着一个新时代来临了，那就是双核和多核处理器的时代。我们结合这些标志性的事件来看就不难发现，主流的服务端语言诞生的年代还都是单核年代，也就是说，当时的编程语言还是单核环境下，也就没有我们现在大家耳熟能详的并发编程概念。</p><p><a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2019?utm_source=spectrum-hero" title="2019年9月编程语言趋势" target="_blank" rel="noopener"><img src="/images/post_imgs/trending.png" alt="2019年9月编程语言趋势" title="2019年9月编程语言趋势"></a></p><hr><h3 id="Go语言的诞生"><a href="#Go语言的诞生" class="headerlink" title="Go语言的诞生"></a>Go语言的诞生</h3><p>Go（又称Golang）是Google开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。<br>罗伯特·格瑞史莫，罗勃·派克（Rob Pike）及肯·汤普逊于2007年9月开始设计Go，谷歌把Go作为一个20%项目开始研发，即让员工抽出本职工作之外时间的20%，投入在该项目上，稍后Ian Lance Taylor、Russ Cox加入项目。Go是基于Inferno操作系统所开发的。Go于2009年11月正式宣布推出，成为开放源代码项目，支持Linux、Mac OS X、Windows等操作系统。<br>对比上文所举的编程语言，在Go语言诞生的2007年，那时候已经处于双核时代，这就造就了Go语言在设计之初就考虑到了多核CPU下的程序运行，这也就造就了Go语言天生支持多核环境下编程的天赋技能。</p><hr><h3 id="Go语言的主要特性"><a href="#Go语言的主要特性" class="headerlink" title="Go语言的主要特性"></a>Go语言的主要特性</h3><p>Google是这样描述Go语言的：“<a href="https://techcrunch.com/2009/11/10/google-go-language/" title="试图将像Python这样的动态语言的工作开发速度与C或C ++等编译语言的性能和安全性结合起来。在我们的Go to date实验中，典型的构建感觉瞬间完成; 甚至大型二进制文件只需几秒钟即可编译。编译后的代码接近C的速度.Go旨在让您快速移动。我们希望Go成为一种优秀的系统编程语言，支持多处理和面向对象设计的全新轻量化，具有真正的闭包和反射等一些很酷的功能。" target="_blank" rel="noopener">试图将像Python这样的动态语言的工作开发速度与C或C ++等编译语言的性能和安全性结合起来。在我们的Go to date实验中，典型的构建感觉瞬间完成; 甚至大型二进制文件只需几秒钟即可编译。编译后的代码接近C的速度.Go旨在让您快速移动。我们希望Go成为一种优秀的系统编程语言，支持多处理和面向对象设计的全新轻量化，具有真正的闭包和反射等一些很酷的功能。</a>”</p><h4 id="GO语言的主要特性主要包括"><a href="#GO语言的主要特性主要包括" class="headerlink" title="GO语言的主要特性主要包括"></a>GO语言的主要特性主要包括</h4><ul><li>并发与协程</li><li>基于消息传递的通信方式</li><li>丰富实用的内置数据类型</li><li>函数多返回值</li><li>defer机制</li><li>反射(reflect)</li><li>高性能HTTP Server</li><li>工程管理</li><li>编程规范</li></ul><hr><h3 id="Go语言的应用前景"><a href="#Go语言的应用前景" class="headerlink" title="Go语言的应用前景"></a>Go语言的应用前景</h3><p>Go语言凭借着天生的并发优势，出众的性能以及亲民的语法，迅速的蹿红各类IT领域，在人工智能、云计算开发、容器虚拟化、⼤数据开发、数据分析及科学计算、运维开发、爬虫开发、游戏开发等领域都有着广泛的应用。</p><p>以下是应用Go语言的公司：<br><img src="/images/post_imgs/go_companies.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言的前世今生&quot;&gt;&lt;a href=&quot;#Go语言的前世今生&quot; class=&quot;headerlink&quot; title=&quot;Go语言的前世今生&quot;&gt;&lt;/a&gt;Go语言的前世今生&lt;/h2&gt;&lt;h3 id=&quot;时代背景&quot;&gt;&lt;a href=&quot;#时代背景&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Go系列" scheme="https://elijahyg.github.io/categories/Go%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://elijahyg.github.io/2019/09/17/hello-world/"/>
    <id>https://elijahyg.github.io/2019/09/17/hello-world/</id>
    <published>2019-09-16T16:57:03.181Z</published>
    <updated>2019-09-16T16:57:03.189Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="其他" scheme="https://elijahyg.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>python语言起源</title>
    <link href="https://elijahyg.github.io/2019/09/16/python%E8%AF%AD%E8%A8%80%E8%B5%B7%E6%BA%90/"/>
    <id>https://elijahyg.github.io/2019/09/16/python语言起源/</id>
    <published>2019-09-16T15:31:15.000Z</published>
    <updated>2019-09-24T11:44:07.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python语言的前世今生"><a href="#Python语言的前世今生" class="headerlink" title="Python语言的前世今生"></a>Python语言的前世今生</h2><h3 id="Python的诞生"><a href="#Python的诞生" class="headerlink" title="Python的诞生"></a>Python的诞生</h3><p>python的创始人为吉多·范罗苏姆（Guido van Rossum）。1989年的圣诞节期间，吉多·范·罗苏姆（中文名字：龟叔）为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。  </p><p>（龟叔：2005年加入谷歌至2012年，2013年加入Dropbox直到现在，依然掌握着Python发展的核心方向，被称为仁慈的独裁者）。<br><img src="/images/post_imgs/Guido_van_Rossum.jpg" alt></p><hr><h3 id="Python版本发展"><a href="#Python版本发展" class="headerlink" title="Python版本发展"></a>Python版本发展</h3><ul><li>1989年，为了打发圣诞节假期，Guido开始写Python语言的编译器。Python这个名字，来自Guido所挚爱的电视剧Monty Python’s Flying Circus。他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，功能全面，易学易用，可拓展的语言。</li><li>1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。</li><li>Granddaddy of Python web frameworks, Zope 1 was released in 1999</li><li>Python 1.0 - January 1994 增加了 lambda, map, filter and reduce.</li><li>Python 2.0 - October 16, 2000，加入了内存回收机制，构成了现在Python语言框架的基础</li><li>Python 2.4 - November 30, 2004, 同年目前最流行的WEB框架Django 诞生</li><li>Python 2.5 - September 19, 2006</li><li>Python 2.6 - October 1, 2008</li><li>Python 2.7 - July 3, 2010</li><li><strong>In November 2014, it was announced that Python 2.7 would be supported until 2020, and reaffirmed that there would be no 2.8 release as users were expected to move to Python 3.4+ as soon as possible</strong></li><li>Python 3.0 - December 3, 2008</li><li>Python 3.1 - June 27, 2009</li><li>Python 3.2 - February 20, 2011</li><li>Python 3.3 - September 29, 2012</li><li>Python 3.4 - March 16, 2014</li><li>Python 3.5 - September 13, 2015</li><li>Python 3.6 - December 23, 2016</li><li>Python 3.7 - June 27, 2018</li></ul><hr><h3 id="Python的各类解释器"><a href="#Python的各类解释器" class="headerlink" title="Python的各类解释器"></a>Python的各类解释器</h3><ul><li>CPython：官方的解释器，也是使用最广的Python解释器。在CPython解释器下有GIL限制，一个CPU同一时刻只能运行一个线程。</li><li>IPython：是一种比较流行的解释器</li><li>PyPy：一种专注于执行速度的解释器。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。</li><li>Jython：运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行，Jython可以直接调用Java的各种函数库。</li><li>IronPython：和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</li><li>ZhPy：周蟒，支持使用繁/简中文语句编写程序的Python语言</li></ul><hr><h3 id="Python应用领域"><a href="#Python应用领域" class="headerlink" title="Python应用领域"></a>Python应用领域</h3><p>目前Python主要应用领域：</p><ul><li>云计算: 云计算最火的语言， 典型应用OpenStack</li><li>WEB开发: 众多优秀的WEB框架，众多大型网站均为Python开发，Youtube, Dropbox, 豆瓣等等，典型WEB框架有Django、Flask、Tornado、sanic</li><li>科学运算、人工智能: 典型库NumPy, SciPy, Matplotlib, Enthought librarys,pandas</li><li>系统运维: 运维人员必备语言</li><li>金融：量化交易，金融分析，在金融工程领域，Python不但在用，且用的最多，而且重要性逐年提高。</li><li>原因：作为动态语言的Python，语言结构清晰简单，库丰富，成熟稳定，科学计算和统计分析都很牛逼，生产效率远远高于c、c++、java,尤其擅长策略回测</li><li>图形GUI: PyQT、WxPython、TkInter</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python语言的前世今生&quot;&gt;&lt;a href=&quot;#Python语言的前世今生&quot; class=&quot;headerlink&quot; title=&quot;Python语言的前世今生&quot;&gt;&lt;/a&gt;Python语言的前世今生&lt;/h2&gt;&lt;h3 id=&quot;Python的诞生&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python系列汇总</title>
    <link href="https://elijahyg.github.io/2019/09/16/Python%E7%B3%BB%E5%88%97/"/>
    <id>https://elijahyg.github.io/2019/09/16/Python系列/</id>
    <published>2019-09-16T15:21:04.000Z</published>
    <updated>2019-09-24T09:04:00.746Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python-语言-基础篇"><a href="#Python-语言-基础篇" class="headerlink" title="Python_语言_基础篇"></a>Python_语言_基础篇</h3><ul><li>前提准备<ul><li>01-<a href="http://elijahyg.github.io/2019/09/16/python%E8%AF%AD%E8%A8%80%E8%B5%B7%E6%BA%90/">语言起源</a></li><li>02-环境搭建</li><li>03-开发工具&amp;Tips</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python-语言-基础篇&quot;&gt;&lt;a href=&quot;#Python-语言-基础篇&quot; class=&quot;headerlink&quot; title=&quot;Python_语言_基础篇&quot;&gt;&lt;/a&gt;Python_语言_基础篇&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;前提准备&lt;ul&gt;
&lt;li&gt;01-&lt;a h
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>基于Github搭建Hexo个人博客</title>
    <link href="https://elijahyg.github.io/2019/09/13/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BAHexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://elijahyg.github.io/2019/09/13/基于Github搭建Hexo个人博客/</id>
    <published>2019-09-13T15:46:44.000Z</published>
    <updated>2019-09-15T15:53:10.139Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><ul><li>Github账号</li><li>nodejs</li><li>npm</li><li>git for windows</li></ul><h3 id="二、创建github仓库"><a href="#二、创建github仓库" class="headerlink" title="二、创建github仓库"></a>二、创建github仓库</h3><ul><li>创建以<code>你的用户名.github.io</code>的仓库</li></ul><h3 id="三、域名绑定-可选"><a href="#三、域名绑定-可选" class="headerlink" title="三、域名绑定(可选)"></a>三、域名绑定(可选)</h3><h3 id="四、配置SSH-key"><a href="#四、配置SSH-key" class="headerlink" title="四、配置SSH key"></a>四、配置SSH key</h3><blockquote><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p></blockquote><ul><li><p>用git bash执行如下命令,如果提示：No such file or directory 说明你是第一次使用git<br><code>$ cd ~/. ssh #检查本机已存在的ssh密钥</code></p></li><li><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key；将刚复制的内容粘贴到key那里，title随便填，保存。<br><code>ssh-keygen -t rsa -C &quot;邮件地址&quot;</code></p></li><li><p>测试SSH-Key是否设置成功</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> ssh -T git@github.com # 注意邮箱地址不用改</span><br><span class="line"></span><br><span class="line"># 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</span><br><span class="line"># Hi 【用户名】! You’ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"># 看到这个信息说明SSH已配置成功！</span><br></pre></td></tr></table></figure><ul><li>配置全局用户名和邮箱</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;用户名&quot; # 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email &quot;邮箱&quot; # 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><h3 id="五、Hexo部分"><a href="#五、Hexo部分" class="headerlink" title="五、Hexo部分"></a>五、Hexo部分</h3><ul><li>安装Hexo</li></ul><p><code>npm install -g hexo</code></p><ul><li>初始化Hexo</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /d/workspaces/hexo/ # 工作目录</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><ul><li>部署、启动服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 生成</span><br><span class="line">hexo s # 启动服务</span><br></pre></td></tr></table></figure><ul><li>本地预览问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故</span><br></pre></td></tr></table></figure><h3 id="六、修改Hexo主题"><a href="#六、修改Hexo主题" class="headerlink" title="六、修改Hexo主题"></a>六、修改Hexo主题</h3><ul><li><p>官网主题<br><code>https://hexo.io/themes/</code></p></li><li><p>新推荐极简主题<br><code>https://github.com/aircloud/hexo-theme-aircloud</code></p></li><li><p>更换主题(以yilia为例)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/litten/hexo-theme-yilia</span><br><span class="line"></span><br><span class="line"> - 进入目录下载主题</span><br><span class="line">cd /d/workspaces/hexo/</span><br><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g来重新生成。</span><br><span class="line">如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。</span><br></pre></td></tr></table></figure><h3 id="七、上传到github"><a href="#七、上传到github" class="headerlink" title="七、上传到github"></a>七、上传到github</h3><ul><li>修改配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>安装插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 部署前还需要安装插件，git bash执行</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>提交至Github</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果一切正常，可以执行hexo d将代码上传至github，之后就可以打开https://用户名.github.io/浏览你的个人博客了</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="八、常用hexo命令"><a href="#八、常用hexo命令" class="headerlink" title="八、常用hexo命令"></a>八、常用hexo命令</h3><ul><li>常见命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help # 查看帮助</span><br><span class="line">hexo version #查看Hexo的版本</span><br></pre></td></tr></table></figure><ul><li>缩写</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><ul><li>组合命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure><h3 id="九、写博客"><a href="#九、写博客" class="headerlink" title="九、写博客"></a>九、写博客</h3><ul><li><p>写博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 定位到hexo目录，执行下面语句，hexo会帮我们在_posts下生成相关md文件，我们只需要打开这个文件就可以开始写博客了</span><br><span class="line">hexo new &apos;my-first-blog&apos;</span><br></pre></td></tr></table></figure></li><li><p>一般完整格式如下</p></li></ul><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、准备工作&quot;&gt;&lt;a href=&quot;#一、准备工作&quot; class=&quot;headerlink&quot; title=&quot;一、准备工作&quot;&gt;&lt;/a&gt;一、准备工作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Github账号&lt;/li&gt;
&lt;li&gt;nodejs&lt;/li&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;li&gt;g
      
    
    </summary>
    
    
      <category term="其他" scheme="https://elijahyg.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
</feed>
