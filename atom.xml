<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yang&#39;s Blog</title>
  
  <subtitle>顺境内敛 逆境不屈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://elijahyg.github.io/"/>
  <updated>2019-10-23T16:43:03.619Z</updated>
  <id>https://elijahyg.github.io/</id>
  
  <author>
    <name>Elijah Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python数据类型之字符串类型</title>
    <link href="https://elijahyg.github.io/2019/10/24/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/"/>
    <id>https://elijahyg.github.io/2019/10/24/Python数据类型之字符串类型/</id>
    <published>2019-10-23T16:30:24.000Z</published>
    <updated>2019-10-23T16:43:03.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型(string)"></a>字符串类型(string)</h2><h3 id="字符串介绍"><a href="#字符串介绍" class="headerlink" title="字符串介绍"></a>字符串介绍</h3><h4 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h4><p>在单引号、双引号、三引号内，由一串字符组成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单引号</span></span><br><span class="line">name=<span class="string">'Elijah'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#双引号</span></span><br><span class="line">title=<span class="string">"Python developer"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#三引号，表示多行的字符串，可以在三引号中自由的使用单引号和双引号</span></span><br><span class="line">message=</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">立志成为一名"身体健康"的'开发者'</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr><h3 id="★常用字符串方法"><a href="#★常用字符串方法" class="headerlink" title="★常用字符串方法"></a>★常用字符串方法</h3><h4 id="strip-lstrip-rstrip-去除指定字符串-默认去除空格"><a href="#strip-lstrip-rstrip-去除指定字符串-默认去除空格" class="headerlink" title="strip() / lstrip() / rstrip() 去除指定字符串(默认去除空格)"></a>strip() / lstrip() / rstrip() 去除指定字符串(默认去除空格)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># strip() 去掉字符串前后的空格(默认情况下)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"   Hello World   "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.strip()</span><br><span class="line"><span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lstrip() 去掉字符串左边(left)的空格(默认情况下)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"   Hello World   "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.lstrip()</span><br><span class="line"><span class="string">"Hello World   "</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rstrip() 去掉字符串右边(right)的空格(默认情况下)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"   Hello World   "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.rstrip()</span><br><span class="line"><span class="string">"   Hello World"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># strip("str_args") 去掉字符串前后的指定字符(传入指定字符参数情况下)</span></span><br><span class="line"><span class="comment"># lstrip("str_args")与rstrip("str_args")同理</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"***Hello World***"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.strip(<span class="string">'*'</span>)</span><br><span class="line"><span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure><h4 id="startswith-endswith-判断字符串开头-结尾"><a href="#startswith-endswith-判断字符串开头-结尾" class="headerlink" title="startswith() / endswith() 判断字符串开头/结尾"></a>startswith() / endswith() 判断字符串开头/结尾</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># startswith("str_args") 判断目标字符串是否以指定字符串开头</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"Hello_World"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.startswith(<span class="string">"Hello"</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"Hello_World"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.startswith(<span class="string">"ello"</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># endswith("str_args") 判断目标字符串是否以指定字符串结尾</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"Hello_World"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.endswith(<span class="string">"World"</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"Hello_World"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.endswith(<span class="string">"Worl"</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="replace-替换字符串"><a href="#replace-替换字符串" class="headerlink" title="replace() 替换字符串"></a>replace() 替换字符串</h4><p><strong>语法说明</strong></p><blockquote><p>str.replace(old, new[, max])</p></blockquote><p><strong>参数说明</strong></p><ul><li>old – 将被替换的子字符串。</li><li>new – 新字符串，用于替换old子字符串</li><li>max – 可选字符串, 替换不超过 max 次</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># replace() 替换字符串，传入参数依次为旧字符串、新字符串、替换最大次数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"Hello World"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.replace(<span class="string">"World"</span>,<span class="string">"Python"</span>)</span><br><span class="line"><span class="string">"Hello Python"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"In the apple case, there is a red apple beside the green apple."</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.replace(<span class="string">"apple"</span>,<span class="string">"peach"</span>,<span class="number">2</span>)</span><br><span class="line"><span class="string">"In the peach case, there is a red peach beside the green apple."</span></span><br></pre></td></tr></table></figure><h4 id="format-格式化字符串"><a href="#format-格式化字符串" class="headerlink" title="format() 格式化字符串"></a>format() 格式化字符串</h4><p><strong>语法说明</strong></p><blockquote><ul><li>格式化字符串的函数 str.format()，它增强了字符串格式化的功能</li><li>基本语法是通过 {} 和 : 来代替以前的 %</li><li>format 函数可以接受不限个参数，位置可以不按顺序</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># format() 格式化字符串，不设置指定位置，按默认顺序</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">"&#123;&#125; &#123;&#125;"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)</span><br><span class="line"><span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># format() 格式化字符串，设置指定位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"&#123;arg_2&#125; &#123;arg_1&#125;"</span>.format(arg_2=<span class="string">"hello"</span>, arg_1=<span class="string">"world"</span>)</span><br><span class="line"><span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># format() 格式化字符串，设置指定位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"&#123;1&#125; &#123;0&#125; &#123;1&#125;"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)</span><br><span class="line"><span class="string">'world hello world'</span></span><br></pre></td></tr></table></figure><ul><li>2.4.1 数字格式化<blockquote><p>下表展示了 str.format() 格式化数字的多种方法：</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"&#123;:.2f&#125;"</span>.format(<span class="number">3.1415926</span>));</span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure><p><strong>格式化符号说明</strong></p><ul><li>‘^’、’&lt;’、’&gt;’ 分别是居中、左对齐、右对齐，后面带宽度， ‘:’ 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</li><li>‘+’ 表示在正数前显示 ‘+’，负数前显示 ‘-‘</li><li>‘ ‘（空格）表示在正数前加空格</li><li>‘b’、’d’、’o’、’x’ 分别是二进制、十进制、八进制、十六进制。</li><li>此外我们可以使用大括号 ‘{}’ 来转义大括号，如下实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">"&#123;&#125; 对应的位置是 &#123;&#123;0&#125;&#125;"</span>.format(<span class="string">"yang"</span>))</span><br><span class="line">yang 对应的位置是 &#123;<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>数字</th><th>格式</th><th>输出</th><th>描述</th></tr></thead><tbody><tr><td>3.1415926</td><td>{:.2f}</td><td>3.14</td><td>保留小数点后两位</td></tr><tr><td>3.1415926</td><td>{:+.2f}</td><td>+3.14</td><td>带符号保留小数点后两位</td></tr><tr><td>-1</td><td>{:+.2f}</td><td>-1.00</td><td>带符号保留小数点后两位</td></tr><tr><td>2.71828</td><td>{:.0f}</td><td>3</td><td>不带小数</td></tr><tr><td>5</td><td>{:0&gt;2d}</td><td>05</td><td>数字补零 (填充左边, 宽度为2)</td></tr><tr><td>5</td><td>{:x&lt;4d}</td><td>5xxx</td><td>数字补x (填充右边, 宽度为4)</td></tr><tr><td>10</td><td>{:x&lt;4d}</td><td>10xx</td><td>数字补x (填充右边, 宽度为4)</td></tr><tr><td>1000000</td><td>{:,}</td><td>1,000,000</td><td>以逗号分隔的数字格式</td></tr><tr><td>0.25</td><td>{:.2%}</td><td>25.00%</td><td>百分比格式</td></tr><tr><td>1000000000</td><td>{:.2e}</td><td>1.00e+09</td><td>指数记法</td></tr><tr><td>13</td><td>{:10d}</td><td>13</td><td>右对齐 (默认, 宽度为10)</td></tr><tr><td>13</td><td>{:&lt;10d}</td><td>13</td><td>左对齐 (宽度为10)</td></tr><tr><td>13</td><td>{:^10d}</td><td>13</td><td>中间对齐 (宽度为10)</td></tr><tr><td>11</td><td>‘{:b}’.format(11)</td><td>1011</td><td>进制</td></tr><tr><td></td><td>‘{:d}’.format(11)</td><td>11</td><td></td></tr><tr><td></td><td>‘{:o}’.format(11)</td><td>13</td><td></td></tr><tr><td></td><td>‘{:x}’.format(11)</td><td>b</td><td></td></tr><tr><td></td><td>‘{:#x}’.format(11)</td><td>0xb</td><td></td></tr><tr><td></td><td>‘{:#X}’.format(11)</td><td>0xB</td><td></td></tr></tbody></table><h4 id="find-rfind-查找字符串位置、index-rindex-查找字符串位置、count-查找字符串出现次数"><a href="#find-rfind-查找字符串位置、index-rindex-查找字符串位置、count-查找字符串出现次数" class="headerlink" title="find() / rfind() 查找字符串位置、index() / rindex() 查找字符串位置、count() 查找字符串出现次数"></a>find() / rfind() 查找字符串位置、index() / rindex() 查找字符串位置、count() 查找字符串出现次数</h4><p><strong>语法说明</strong><br><strong><em>find()</em></strong></p><blockquote><p>str.find(str, beg=0, end=len(string))</p></blockquote><p><strong><em>index()</em></strong></p><blockquote><p>str.index(str, beg=0, end=len(string))</p></blockquote><p><strong><em>count()</em></strong></p><blockquote><p>str.count(str, beg= 0,end=len(string))</p></blockquote><p><strong>参数说明</strong></p><ul><li>str – 指定检索的字符串</li><li>beg – 开始索引，默认为0</li><li>end – 结束索引，默认为字符串的长度</li></ul><p><strong>返回值</strong><br><strong><em>find()</em></strong></p><blockquote><p>如果包含子字符串返回开始的索引值，否则返回-1。<br>rfind() 返回字符串最后一次出现的位置，其他属性与find()相同</p></blockquote><p><strong><em>index()</em></strong></p><blockquote><p>如果包含子字符串返回开始的索引值，否则报异常。<br>rindex() 返回子字符串 str 在字符串中最后出现的位置，如果没有匹配的字符串会报异常，可以指定可选参数[beg:end]设置查找的区间。</p></blockquote><p><strong><em>count()</em></strong></p><blockquote><p>该方法返回子字符串在字符串中出现的次数,顾头不顾尾,如果不指定范围则查找所有</p></blockquote><ul><li>find() / rfind() 查找字符串位置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># find() 查找字符串位置/ rfind()返回字符串最后一次出现的位置，其他属性与find()相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从下标0开始，查找在字符串里第一个出现的子串，返回结果：0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'abca'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从下标1开始，查找在字符串里第一个出现的子串：返回结果3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'abca'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find(<span class="string">'a'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找不到返回-1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'abca'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find(<span class="string">'3'</span>)</span><br><span class="line"><span class="number">-1</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>index() / rindex() 查找字符串位置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index() 查找字符串位置/ rindex()返回子字符串 str 在字符串中最后出现的位置，如果没有匹配的字符串会报异常，可以指定可选参数[beg:end]设置查找的区间。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从下标0开始，查找在字符串里第一个出现的子串，返回结果：0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'abca'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.index(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="comment"># 从下标1开始，查找在字符串里第一个出现的子串：返回结果3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'abca'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.index(<span class="string">'a'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment"># 查找不到报异常</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'abca'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find(<span class="string">'3'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: substring <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure><ul><li>count() 查找字符串出现次数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># count() 该方法返回子字符串在字符串中出现的次数,顾头不顾尾,如果不指定范围则查找所有。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找a出现的次数，没有指定范围默认查找所有</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'abca'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.count(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找a出现的次数，指定范围从1到4,返回1次</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'abca'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.count(<span class="string">'a'</span>,<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找z出现的次数，没有则返回0次</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'abca'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.count(<span class="string">'z'</span>)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="split-rsplit-切分字符串"><a href="#split-rsplit-切分字符串" class="headerlink" title="split() / rsplit() 切分字符串"></a>split() / rsplit() 切分字符串</h4><p><strong>语法说明</strong></p><blockquote><p>str.split(str=””, num=string.count(str))</p></blockquote><p><strong>参数说明</strong></p><ul><li>str – 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</li><li>num – 分割次数。</li></ul><p><strong>返回值</strong></p><blockquote><p>返回分割后的字符串列表。返回分割后的字符串列表。<br>rsplit()表示从右向左开始切分</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># split() 通过指定分隔符对字符串进行切片，如果参数num 有指定值，则仅分隔 num 个子字符串 / rsplit() 表示从右向左开始进行切分，其他同split()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认以空格进行分割，也就是下例中的\n</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"Line1-abcdef \nLine2-abc \nLine4-abcd"</span>;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.split( )</span><br><span class="line">[<span class="string">'Line1-abcdef'</span>, <span class="string">'Line2-abc'</span>, <span class="string">'Line4-abcd'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定的切片次数为1次，所以后面的两个\n保留</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.split(<span class="string">' '</span>, <span class="number">1</span> )</span><br><span class="line">[<span class="string">'Line1-abcdef'</span>, <span class="string">'\nLine2-abc \nLine4-abcd'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># rsplit() 从右向左以'|'字符进行切分，切分次数为1次</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'a|b|c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.rsplit(<span class="string">'|'</span>,<span class="number">1</span>)</span><br><span class="line">[<span class="string">'a|b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure><h4 id="join-连接字符串"><a href="#join-连接字符串" class="headerlink" title="join() 连接字符串"></a>join() 连接字符串</h4><p><strong>语法说明</strong></p><blockquote><p>str.join(sequence)</p></blockquote><p><strong>参数说明</strong></p><ul><li>sequence – 要连接的元素序列。</li></ul><p><strong>返回值</strong></p><blockquote><p>返回通过指定字符连接序列中元素后生成的新字符串。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># join() 连接字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将序列seq中的元素'a','b','c'以指定的字符'-'连接生成一个新的字符串。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"-"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seq=(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.join(seq)</span><br><span class="line"><span class="string">"a-b-c"</span></span><br></pre></td></tr></table></figure><h4 id="center-ljust-rjust-zfill-填充字符串"><a href="#center-ljust-rjust-zfill-填充字符串" class="headerlink" title="center() / ljust() / rjust() / zfill() 填充字符串"></a>center() / ljust() / rjust() / zfill() 填充字符串</h4><p><strong>语法说明</strong><br><strong><em>center()</em></strong></p><blockquote><p>str.center(width[, fillchar])</p></blockquote><p><strong><em>ljust()</em></strong></p><blockquote><p>str.ljust(width[, fillchar])</p></blockquote><p><strong><em>rjust()</em></strong></p><blockquote><p>str.rjust(width[, fillchar])</p></blockquote><p><strong><em>zfill()</em></strong></p><blockquote><p>str.zfill(width)</p></blockquote><p><strong>参数说明</strong></p><ul><li>width – 指定字符串长度。</li><li>fillchar – 填充字符，默认为空格。</li></ul><p><strong>返回值</strong><br><strong><em>center()</em></strong></p><blockquote><p>返回一个指定的宽度 width 居中的字符串，如果 width 小于字符串宽度直接返回字符串，否则使用 fillchar 去填充。</p></blockquote><p><strong><em>ljust()</em></strong></p><blockquote><p>返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。</p></blockquote><p><strong><em>rjust()</em></strong></p><blockquote><p>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串。</p></blockquote><p><strong><em>zfill()</em></strong></p><blockquote><p>返回指定长度的字符串。</p></blockquote><ul><li>center() 填充字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># center() 返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定字符串长度为40，用'*'来填充</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"[www.elijahyang.com]"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.center(<span class="number">40</span>, <span class="string">'*'</span>)</span><br><span class="line"><span class="string">"**********[www.elijahyang.com]**********"</span></span><br></pre></td></tr></table></figure><ul><li>ljust() 填充字符串(左对齐)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ljust() 返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定字符串长度为40，左对齐，用'*'来填充</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"[www.elijahyang.com]"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.ljust(<span class="number">40</span>, <span class="string">'*'</span>)</span><br><span class="line"><span class="string">"[www.elijahyang.com]********************"</span></span><br></pre></td></tr></table></figure><ul><li>rjust() 填充字符串(右对齐)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rjust() 返回一个原字符串右对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定字符串长度为40，右对齐，用'*'来填充</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"[www.elijahyang.com]"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.rjust(<span class="number">40</span>, <span class="string">'*'</span>)</span><br><span class="line"><span class="string">"********************[www.elijahyang.com]"</span></span><br></pre></td></tr></table></figure><ul><li>zfill() 填充字符串(右对齐,填充0)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zfill() 返回指定长度的字符串，原字符串右对齐，前面填充0。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定字符串长度为40，右对齐，用0来填充</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"[www.elijahyang.com]"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.zfill(<span class="number">40</span>)</span><br><span class="line"><span class="string">"00000000000000000000[www.elijahyang.com]"</span></span><br></pre></td></tr></table></figure><h4 id="expandtabs-把tab转换成空格"><a href="#expandtabs-把tab转换成空格" class="headerlink" title="expandtabs() 把tab转换成空格"></a>expandtabs() 把tab转换成空格</h4><p><strong>语法说明</strong></p><blockquote><p>str.join(sequence)</p></blockquote><p><strong>参数说明</strong></p><ul><li>tabsize – 指定转换字符串中的 tab 符号(‘\t’)转为空格的字符数。</li></ul><p><strong>返回值</strong></p><blockquote><p>该方法返回字符串中的 tab 符号(‘\t’)转为空格后生成的新字符串。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># expandtabs() 指定转换字符串中的 tab 符号('\t')转为空格的字符数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将s字符串中\t转换为空格(默认\t空格数为8)</span></span><br><span class="line"><span class="comment"># 实际操作中\t的默认转换为空格数为1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"this is\tstring example"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.expandtabs()</span><br><span class="line"><span class="string">"this is string example"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将s字符串中\t转换为空格(指定\t空格数为16)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"this is\tstring example"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.expandtabs(<span class="number">16</span>)</span><br><span class="line"><span class="string">"this is         string example"</span></span><br></pre></td></tr></table></figure><h4 id="lower-upper-字符串英文大小写转换"><a href="#lower-upper-字符串英文大小写转换" class="headerlink" title="lower() / upper() 字符串英文大小写转换"></a>lower() / upper() 字符串英文大小写转换</h4><p><strong>语法说明</strong></p><blockquote><p>str.lower()<br>str.upper()</p></blockquote><p><strong>返回值</strong></p><blockquote><p>返回将字符串中所有大写字符转换为小写后生成的字符串。<br>返回将字符串中所有大写字符转换为大写后生成的字符串。</p></blockquote><ul><li>lower() 字符转换为小写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lower() 将字符串中所有字符转换为小写</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"HELLO WORLD"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.lower()</span><br><span class="line"><span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><ul><li>upper() 字符转换为大写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># upper() 将字符串中所有字符转换为大写</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"hello world"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.upper()</span><br><span class="line"><span class="string">"HELLO WORLD"</span></span><br></pre></td></tr></table></figure><h4 id="capitalize-首字母大写-swapcase-大小写翻转-title-每个单词的首字母大写"><a href="#capitalize-首字母大写-swapcase-大小写翻转-title-每个单词的首字母大写" class="headerlink" title="capitalize() 首字母大写 / swapcase() 大小写翻转 / title() 每个单词的首字母大写"></a>capitalize() 首字母大写 / swapcase() 大小写翻转 / title() 每个单词的首字母大写</h4><p><strong>语法说明</strong></p><blockquote><p>str.capitalize()<br>str.swapcase()<br>str.title()</p></blockquote><p><strong>返回值</strong><br><strong><em>capitalize()</em></strong></p><blockquote><p>该方法返回一个首字母大写的字符串。</p></blockquote><p><strong><em>swapcase()</em></strong></p><blockquote><p>返回大小写字母转换后生成的新字符串。</p></blockquote><p><strong><em>title()</em></strong></p><blockquote><p>返回”标题化”的字符串,就是说所有单词都是以大写开始。</p></blockquote><ul><li>capitalize() 首字母大写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># capitalize() 首字母大写</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"this is string example from yang"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.capitalize()</span><br><span class="line"><span class="string">"This is string example from yang"</span></span><br></pre></td></tr></table></figure><ul><li>swapcase() 大小写字母互换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swapcase() 大小写字母互换</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"tHiS Is sTrINg eXaMPle FRoM YaNg"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.swapcase()</span><br><span class="line"><span class="string">"ThIs iS StRinG ExAmpLE frOm yAnG"</span></span><br></pre></td></tr></table></figure><ul><li>title() 每个单词的首字母大写<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># title() 每个单词的首字母大写</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"this is string example from yang"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.title()</span><br><span class="line"><span class="string">"This Is String Example From Yang"</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="maketrans-字符串对照表翻译"><a href="#maketrans-字符串对照表翻译" class="headerlink" title="maketrans() 字符串对照表翻译"></a>maketrans() 字符串对照表翻译</h4><p><strong>语法说明</strong></p><blockquote><p>str.maketrans(intab, outtab)</p></blockquote><p><strong>参数说明</strong></p><ul><li>intab – 字符串中要替代的字符组成的字符串。</li><li>outtab – 相应的映射字符的字符串。</li></ul><p><strong>返回值</strong></p><blockquote><p>返回字符串转换后生成的新字符串。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># maketrans() 用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。两个字符串的长度必须相同，为一一对应的关系。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用12345来代替原本字符串那种的aeiou字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>intab = <span class="string">"aeiou"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>outtab = <span class="string">"12345"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>trantab = str.maketrans(intab, outtab)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"this is string example"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str.translate(trantab)</span><br><span class="line"><span class="string">"th3s 3s str3ng 2x1mpl2"</span></span><br></pre></td></tr></table></figure><h4 id="len-字符串长度"><a href="#len-字符串长度" class="headerlink" title="len() 字符串长度"></a>len() 字符串长度</h4><p><strong>语法说明</strong></p><blockquote><p>len( s )</p></blockquote><p><strong>参数说明</strong></p><ul><li>s – 对象。</li></ul><p><strong>回值</strong></p><blockquote><p>返回对象长度。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  字符串长度</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"yang"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(s)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="str-1-字符串翻转"><a href="#str-1-字符串翻转" class="headerlink" title="str[::-1] 字符串翻转*"></a>str[::-1] 字符串翻转*</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [::-1]通过步进反转</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'abcd'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_s = s[::<span class="number">-1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_s</span><br><span class="line"><span class="string">'dcba'</span></span><br></pre></td></tr></table></figure><h3 id="其他字符串方法"><a href="#其他字符串方法" class="headerlink" title="其他字符串方法"></a>其他字符串方法</h3><h4 id="is数字系列-在python3中"><a href="#is数字系列-在python3中" class="headerlink" title="is数字系列(在python3中)"></a>is数字系列(在python3中)</h4><ul><li>isdigt() 判断是否是数字(bytes、unicode)<blockquote><p>对于bytes、unicode使用isdigt()方法，返回True，其他返回False</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">num1=<span class="string">b'4'</span> <span class="comment"># bytes</span></span><br><span class="line">num2=<span class="string">u'4'</span> <span class="comment"># unicode,python3中无需加u就是unicode</span></span><br><span class="line">num3=<span class="string">'四'</span> <span class="comment"># 中文数字</span></span><br><span class="line">num4=<span class="string">'Ⅳ'</span> <span class="comment"># 罗马数字</span></span><br><span class="line"></span><br><span class="line">num1.isdigit()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">num2.isdigit()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">num3.isdigit()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">num4.isdigit()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>isdecimal() 判断是否只包含十进制字符(unicode)<blockquote><p>对于unicode使用isdecimal()方法，返回True，其他返回False<br>bytes类型无isdecimal()方法</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">num1=<span class="string">b'4'</span> <span class="comment"># bytes</span></span><br><span class="line">num2=<span class="string">u'4'</span> <span class="comment"># unicode,python3中无需加u就是unicode</span></span><br><span class="line">num3=<span class="string">'四'</span> <span class="comment"># 中文数字</span></span><br><span class="line">num4=<span class="string">'Ⅳ'</span> <span class="comment"># 罗马数字</span></span><br><span class="line"></span><br><span class="line">num2.isdecimal()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">num3.isdecimal()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">num4.isdecimal()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>isnumeric() 判断是否是否只由数字组成(unicode)<blockquote><p>对于unicode使用isnumeric()方法，返回True，其他返回False<br>bytes类型无isnumeric()方法</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">num1=<span class="string">b'4'</span> <span class="comment"># bytes</span></span><br><span class="line">num2=<span class="string">u'4'</span> <span class="comment"># unicode,python3中无需加u就是unicode</span></span><br><span class="line">num3=<span class="string">'四'</span> <span class="comment"># 中文数字</span></span><br><span class="line">num4=<span class="string">'Ⅳ'</span> <span class="comment"># 罗马数字</span></span><br><span class="line"></span><br><span class="line">num2.isnumeric()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">num3.isnumeric()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">num4.isnumeric()</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li>Tips<blockquote><p>以上isdigit() 、 isdecimal() 、 isnumeric() 均不能判断浮点数</p></blockquote></li></ul><h4 id="is其他系列-在python3中"><a href="#is其他系列-在python3中" class="headerlink" title="is其他系列(在python3中)"></a>is其他系列(在python3中)</h4><ul><li>isalnum() 判断是否由字母和数字组成<blockquote><p>字符串至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"yang0827"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str.isalnum()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"www.baidu.com"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str.isalnum()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>isalpha() 判断是否只由字母组成<blockquote><p>如果字符串至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"yang"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.isalpha()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"yang example....!!!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.isalpha()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>isidentifier() 判断是否是合法的标识符<blockquote><p>如果字符串是合法的标识符则返回 True,否则返回 False</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"_a"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.isidentifier()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"中国"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.isidentifier()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"3a"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.isidentifier()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>islower() 判断是否由小写字母组成<blockquote><p>如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"this is a example"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.islower()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"This is a example"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.islower()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>isupper() 判断是否由大写字母组成<blockquote><p>如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"THIS IS A EXAMPLE"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.isupper()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"This Is A Example"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.isupper()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li>isspace() 判断是否只由空白字符组成<blockquote><p>如果字符串中只包含空格，则返回 True，否则返回 False</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"      "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.isspace()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"this is a example"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.isspace()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p> -istitle() 判断是否字符串中所有的单词拼写首字母是否为大写，且其他字母为小写</p><blockquote><p>如果字符串中所有的单词拼写首字母是否为大写，且其他字母为小写则返回 True，否则返回 False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"This is a example"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.istitle()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"This Is A Example"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.istitle()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;字符串类型-string&quot;&gt;&lt;a href=&quot;#字符串类型-string&quot; class=&quot;headerlink&quot; title=&quot;字符串类型(string)&quot;&gt;&lt;/a&gt;字符串类型(string)&lt;/h2&gt;&lt;h3 id=&quot;字符串介绍&quot;&gt;&lt;a href=&quot;#字符串介绍&quot;
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python数据类型之布尔类型</title>
    <link href="https://elijahyg.github.io/2019/10/13/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B/"/>
    <id>https://elijahyg.github.io/2019/10/13/Python数据类型之布尔类型/</id>
    <published>2019-10-13T11:23:05.000Z</published>
    <updated>2019-10-13T11:26:33.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="布尔类型-boolean"><a href="#布尔类型-boolean" class="headerlink" title="布尔类型(boolean)"></a>布尔类型(boolean)</h2><p>布尔值只有True和False，同时True对应二进制中1，False对应二进制中0</p><h3 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h3><blockquote><p>布尔运算在计算机中用来做条件判断，根据计算结果为True或者False，计算机可以自动执行不同的后续代码。</p></blockquote><h4 id="与运算"><a href="#与运算" class="headerlink" title="与运算"></a>与运算</h4><blockquote><p>只有两个布尔值都为 True 时，计算结果才为 True。</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">运算符</th><th align="center">值</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">True</td><td align="center">and</td><td align="center">True</td><td align="center">True</td></tr><tr><td align="center">True</td><td align="center">and</td><td align="center">False</td><td align="center">False</td></tr><tr><td align="center">False</td><td align="center">and</td><td align="center">True</td><td align="center">False</td></tr><tr><td align="center">False</td><td align="center">and</td><td align="center">False</td><td align="center">False</td></tr></tbody></table><h4 id="或运算"><a href="#或运算" class="headerlink" title="或运算"></a>或运算</h4><blockquote><p>只要有一个布尔值为 True，计算结果就是 True。</p></blockquote><table><thead><tr><th align="center">值</th><th align="center">运算符</th><th align="center">值</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">True</td><td align="center">or</td><td align="center">True</td><td align="center">True</td></tr><tr><td align="center">True</td><td align="center">or</td><td align="center">False</td><td align="center">True</td></tr><tr><td align="center">False</td><td align="center">or</td><td align="center">True</td><td align="center">True</td></tr><tr><td align="center">False</td><td align="center">or</td><td align="center">False</td><td align="center">False</td></tr></tbody></table><h4 id="非运算"><a href="#非运算" class="headerlink" title="非运算"></a>非运算</h4><blockquote><p>把True变为False，或者把False变为True：</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">值</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">not</td><td align="center">True</td><td align="center">False</td></tr><tr><td align="center">or</td><td align="center">False</td><td align="center">True</td></tr></tbody></table><h4 id="短路计算"><a href="#短路计算" class="headerlink" title="短路计算"></a>短路计算</h4><p>在Python中，布尔类型还可以与其他数据类型做 and、or和not运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">True</span></span><br><span class="line"><span class="keyword">print</span> a <span class="keyword">and</span> <span class="string">'a=T'</span> <span class="keyword">or</span> <span class="string">'a=F</span></span><br></pre></td></tr></table></figure><p>计算结果不是布尔类型，而是字符串 ‘a=T’，这是为什么呢？<br>因为Python把0、空字符串’’和None看成 False，其他数值和非空字符串都看成 True，所以：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="string">'a=T'</span> 计算结果是 <span class="string">'a=T'</span></span><br><span class="line">继续计算 <span class="string">'a=T'</span> <span class="keyword">or</span> <span class="string">'a=F'</span> 计算结果还是 <span class="string">'a=T'</span></span><br></pre></td></tr></table></figure><p>要解释上述结果，又涉及到 and 和 or 运算的一条重要法则：短路计算。</p><ul><li>在计算 a and b 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。</li><li>在计算 a or b 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。</li></ul><p><code>所以Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了，直接返回结果</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;布尔类型-boolean&quot;&gt;&lt;a href=&quot;#布尔类型-boolean&quot; class=&quot;headerlink&quot; title=&quot;布尔类型(boolean)&quot;&gt;&lt;/a&gt;布尔类型(boolean)&lt;/h2&gt;&lt;p&gt;布尔值只有True和False，同时True对应二进制中
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python数据类型之数字</title>
    <link href="https://elijahyg.github.io/2019/10/11/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E5%AD%97/"/>
    <id>https://elijahyg.github.io/2019/10/11/Python数据类型之数字/</id>
    <published>2019-10-11T09:19:25.000Z</published>
    <updated>2019-10-11T09:21:44.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字类型-integer"><a href="#数字类型-integer" class="headerlink" title="数字类型(integer)"></a>数字类型(integer)</h2><h3 id="整型-int"><a href="#整型-int" class="headerlink" title="整型(int)"></a>整型(int)</h3><p>在32位机器上，整数的位数为32位，取值范围为-2**31～2**31-1，即-2147483648～2147483647<br>在64位系统上，整数的位数为64位，取值范围为-2**63～2**63-1，即-9223372036854775808～9223372036854775807</p><h3 id="长整型-long"><a href="#长整型-long" class="headerlink" title="长整型(long)"></a>长整型(long)</h3><p>和C语言不同，Python的长整数没有指定位宽，即：Python没有限制长整数数值的大小，但实际上由于机器内存有限，我们使用的长整数数值不可能无限大。<br>自从Python2.2起，如果整数发生溢出，Python会自动将整数数据转换为长整数，所以如今在长整数数据后面不加字母L也不会导致严重后果了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在python2.x 中（python3.x中没有长整型的概念）：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num=<span class="number">2L</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(num)</span><br><span class="line">    &lt;type <span class="string">'long'</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="浮点型-float"><a href="#浮点型-float" class="headerlink" title="浮点型(float)"></a>浮点型(float)</h3><p>浮点数用来处理实数，也就是带有小数的数字。类似于C语言中的double类型，占8个字节（64位），其中52位表示底，11位表示指数，剩下的一位表示符号。</p><h3 id="复数-complex"><a href="#复数-complex" class="headerlink" title="复数(complex)"></a>复数(complex)</h3><p>复数由实数部分和虚数部分组成，一般形式为x＋yj，其中的x是复数的实数部分，y是复数的虚数部分，这里的x和y都是实数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="number">1</span><span class="number">-2j</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.real</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.imag</span><br><span class="line"><span class="number">-2.0</span></span><br></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin(var) # 把变量转换为2进制</span><br><span class="line">oct(var) # 把变量转换为8进制</span><br><span class="line">int(var) # 把变量转换为10进制</span><br><span class="line">hex(var) # 把变量转换为16进制</span><br></pre></td></tr></table></figure><h3 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h3><ul><li>Python中存在小数字池：<code>-5 ～ 256，即[-5,257]</code></li></ul><p>Python对小整数的定义是[-5,257]这些整数对象是提前建立好的，不会被垃圾回收。在一个Python的程序中，所有位于这个范围内的整数使用的都是同一个对象。<br>同理，单个字母也是这样的。</p><p>在一般情况下当变量被赋值后，内存和变量的关系如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">n1 = <span class="number">123</span></span><br><span class="line">n2 = <span class="number">123</span></span><br></pre></td></tr></table></figure><p><img src="/images/post_imgs/integer_1.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">n1 = <span class="number">123</span></span><br><span class="line">n2 = n1</span><br></pre></td></tr></table></figure><p><img src="/images/post_imgs/integer_2.png" alt></p><p>由于python内的优化机制，不论是2.x还是3.x都存在，在-5~257之间的数，如果使用第一种赋值方式，那么他们依然属于同一块内存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(id(n1)) <span class="comment"># 查看变量的内存地址</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数字类型-integer&quot;&gt;&lt;a href=&quot;#数字类型-integer&quot; class=&quot;headerlink&quot; title=&quot;数字类型(integer)&quot;&gt;&lt;/a&gt;数字类型(integer)&lt;/h2&gt;&lt;h3 id=&quot;整型-int&quot;&gt;&lt;a href=&quot;#整型-in
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>python IDE介绍 &amp; 环境搭建</title>
    <link href="https://elijahyg.github.io/2019/09/25/python%20IDE%E4%BB%8B%E7%BB%8D&amp;%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://elijahyg.github.io/2019/09/25/python IDE介绍&amp;环境搭建/</id>
    <published>2019-09-24T16:18:12.000Z</published>
    <updated>2019-09-28T15:51:37.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python2-x-VS-Python3-x"><a href="#Python2-x-VS-Python3-x" class="headerlink" title="Python2.x VS Python3.x"></a>Python2.x VS Python3.x</h2><h3 id="为什么会有Python3-x"><a href="#为什么会有Python3-x" class="headerlink" title="为什么会有Python3.x"></a>为什么会有Python3.x</h3><p>相信但凡接触过python语言的朋友在接触之初会有“到底用python2还是python3？”的纠结。其实我也有这方面的疑问，为什么python的核心团队不能统一一下呢？非要搞个2.x和3.x，而且3.x还不能向下兼容，这中操作让曾经已经用python2.x编写完成的项目情何以堪，还要费神费力去升级成python3.x，到底是什么因素导致必须要重构python核心内容呢？<br>通过多方调查，终于在Python的核心成员<strong>Brett Cannon</strong>的文章中略知其中一二。首先，我们先来看以下下面这个字符串表示什么意思？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abcd'</span></span><br></pre></td></tr></table></figure><p>一目了然，代表由字母’a’、’b’、’c’、’c’组成的字符串，但是，如果你是个python2的使用者，你也可能会说代表ASCII码对应的数值97、98、99、100，至此，大家就会看出问题了，那在python2.x中，字符串默认是以ASCII码的形式呈现的，这样的设计就会产生我们上面这样的歧义。正如python之禅中所说”there should be one – and preferably only one – obvious way to do it”，对于python的代码，应该做到一种呈现只对应一种可能，而上述例子中显然就违背了这样的原则。而这种歧义的产生，不单单是违背了语言的设计初衷，更严重的是这种歧义会在程序的开发中让人抓狂，因为对于字符串而言，开发者必须时刻清楚的知道它代表的到底是字符串还是二进制的数据，否则对于大型程序而言，后果不堪设想。<br>相信上面的内容会让大家清楚Python2.x所存在的重大缺陷，但是我们的问题依然没有得到很好的回答，我们还会抱有疑问“那为什么不在最开始设计的时候就避免出现这种缺陷呢？一定要在之后再做这种不兼容的修复？”，这就要回到python的诞生了，Guido于1989年12月开始对Python进行编码，并于1991年2月首次以开源形式发布。而Unicode标准的第一卷是在1991年10月发布的，这说明python在设计之初并没有所谓的unicode和ASCII编码的问题，但是随着python的应用程度越来越广泛，ASCII码已经不能满足其需要，而且unicode编码的应用和推广也越来越广泛，python2的缺陷也就显得越来越不可调和，最终导致核心团队必须将其升级来修复这个致命的问题。<br>多说一句，针对为什么python3不向下兼容的问题，Brett Cannon是这样说的，python的核心团队在设计推广python3的时候以为python社区会针对python2进行bugfix，同时转到python3，但是事实并未如此，核心团队也吃一堑长一智，并保证今后不会再有类似的不可兼容的更新升级了。</p><h3 id="官方对于Python2-x和Python3-x的总结"><a href="#官方对于Python2-x和Python3-x的总结" class="headerlink" title="官方对于Python2.x和Python3.x的总结"></a>官方对于Python2.x和Python3.x的总结</h3><p><strong>In summary</strong> : Python 2.x is legacy, Python 3.x is the present and future of the language Python 3.0 was released in 2008. The final 2.x version 2.7 release came out in mid-2010, with a statement of extended support for this end-of-life release. The 2.x branch will see no new major releases after that. 3.x is under active development and has already seen over five years of stable releases, including version 3.3 in 2012, 3.4 in 2014, and 3.5 in 2015. This means that all recent standard library improvements, for example, are only available by default in Python 3.x.</p><p><strong>Guido van Rossum</strong> (the original creator of the Python language) decided to clean up Python 2.x properly, with less regard for backwards compatibility than is the case for new releases in the 2.x range. The most drastic improvement is the better Unicode support (with all text strings being Unicode by default) as well as saner bytes/Unicode separation.</p><p><strong>Besides</strong>, several aspects of the core language (such as print and exec being statements, integers using floor division) have been adjusted to be easier for newcomers to learn and to be more consistent with the rest of the language, and old cruft has been removed (for example, all classes are now new-style, “range()” returns a memory efficient iterable, not a list as in 2.x).</p><hr><h2 id="Python-IDE介绍"><a href="#Python-IDE介绍" class="headerlink" title="Python IDE介绍"></a>Python IDE介绍</h2><h3 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h3><blockquote><p><a href="http://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">http://www.jetbrains.com/pycharm/download/</a></p></blockquote><p>Pycharm是由JetBrains公司推出的一款专门针对python开发者的IDE，秉承JetBrains的一贯风格，Pycharm具有调试、语法高亮、项目管理、代码跳转、智能提示、自动完成、单元测试、版本控制等基本功能。同时Pycharm对于Django、Flask等常用Web框架也做到了很好的支持。需要重点提出的是Pycharm还支持IronPython解释器。</p><p><img src="/images/post_imgs/pycharm.jpeg" alt></p><h3 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h3><blockquote><p><a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">https://www.sublimetext.com/3</a></p></blockquote><p>‘A sophisticated text editor for code, markup and prose.’这是Sublime对自己的定位，不得不说sublime的强大、轻量和便捷。相比Pycharm等其他IDE的庞大，sublime作为一种“记事本”类型的IDE，深受追求简洁的开发者的热爱，同时轻量并不代表功能简单，其拥有的各种插件也是没有找不到，只有想不到。相信只要用过sublime的人就一定不会舍弃他。</p><p><img src="/images/post_imgs/sublime.jpg" alt></p><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><blockquote><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a></p></blockquote><p>VS code也是一款极为优秀的IDE。这款IDE拥有丰富的python扩展工具以便开发者可以更高效的进行项目的开发，包括代码静态分析语法自动不全、科学计算工具，与Jupyter 等工具的集成，重构，单元测试，调试等等。</p><p><img src="/images/post_imgs/vs_code.png" alt></p><h3 id="Eclipse-Pydev"><a href="#Eclipse-Pydev" class="headerlink" title="Eclipse + Pydev"></a>Eclipse + Pydev</h3><blockquote><p><a href="https://www.eclipse.org/ide/" target="_blank" rel="noopener">https://www.eclipse.org/ide/</a></p></blockquote><p>使用这种搭配的开发者基本上已经是个经验丰富的developer了，或者更明确的说很可能是一名Java开发老手，Eclipse这款IDE更广泛的被众多Java开发者所使用，如果已经习惯了Eclipse的操作，可以配以Pydev进行python项目的开发，可以在Eclipse中点击Help→Install new Software，添加pydev的安装地址：<a href="http://pydev.org/updates/，获取python的相关套件。具体操作方法请自行查阅，不过多赘述。" target="_blank" rel="noopener">http://pydev.org/updates/，获取python的相关套件。具体操作方法请自行查阅，不过多赘述。</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>当然python作为一种世界的编程语言，更何况现在的发展势头越来越火，IDE作为方便开发者的工具更是必不可少，以上只是介绍了极为有限的几款比较热门的python开发IDE，更多的python开发IDE请参阅：<a href="https://wiki.python.org/moin/PythonEditors" target="_blank" rel="noopener">https://wiki.python.org/moin/PythonEditors</a></p><hr><h2 id="Python开发环境搭建"><a href="#Python开发环境搭建" class="headerlink" title="Python开发环境搭建"></a>Python开发环境搭建</h2><h3 id="两种python虚拟环境工具介绍"><a href="#两种python虚拟环境工具介绍" class="headerlink" title="两种python虚拟环境工具介绍"></a>两种python虚拟环境工具介绍</h3><h4 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h4><blockquote><p><a href="https://virtualenv.pypa.io/en/latest/#" target="_blank" rel="noopener">https://virtualenv.pypa.io/en/latest/#</a></p></blockquote><ul><li><p>基本介绍<br><strong>virtualenv</strong>是用于创建隔离的Python环境，以达到不同的项目环境互不影响的目的。</p></li><li><p>virtualenv安装与使用</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1、pip安装virtualenv</span><br><span class="line">&gt;&gt;&gt; pip install virtualenv</span><br><span class="line"></span><br><span class="line">2、验证安装是否成功</span><br><span class="line">&gt;&gt;&gt; virtualenv --version</span><br><span class="line"></span><br><span class="line">3、为项目创建隔离的python</span><br><span class="line">&gt;&gt;&gt; cd  python_project</span><br><span class="line">&gt;&gt;&gt; virtualenv python_project_env  # 这样是使用默认python解释器创建出来的项目</span><br><span class="line"></span><br><span class="line">4、也可以指定python解释器创建项目</span><br><span class="line">&gt;&gt;&gt; virtualenv -p /usr/bin/python3.7 python3_project_env</span><br><span class="line"></span><br><span class="line">5、以上就完成了python虚拟环境的创建，该环境是一个独立的python运行环境，我们在需要使用该环境时可以将其激活</span><br><span class="line">&gt;&gt;&gt; source python_project_env/bin/activate</span><br><span class="line"></span><br><span class="line">6、退出虚拟环境</span><br><span class="line">&gt;&gt;&gt; deactivate</span><br></pre></td></tr></table></figure><h4 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h4><blockquote><p><a href="https://pypi.org/project/pipenv/" target="_blank" rel="noopener">https://pypi.org/project/pipenv/</a></p></blockquote><ul><li><p>基本介绍<br><strong>pipenv</strong> 是 Pipfile 、requests 作者 Kenneth Reitz 写的一个命令行工具，主要包含了Pipfile、pip、click、requests和virtualenv。Pipfile和pipenv本来都是Kenneth Reitz的个人项目，后来贡献给了pypa组织。Pipfile是社区拟定的依赖管理文件，用于替代过于简陋的 requirements.txt 文件。<br><strong>Pipfile的基本理念是：</strong>Pipfile 文件是 TOML 格式而不是 requirements.txt 这样的纯文本。一个项目对应一个 Pipfile，支持开发环境与正式环境区分。默认提供 default 和 development 区分。提供版本锁支持，存为 Pipfile.lock。</p></li><li><p>pipenv安装与使用</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1、pip安装pipenv</span><br><span class="line">&gt;&gt;&gt; pip install pipenv</span><br><span class="line"></span><br><span class="line">2、验证安装是否成功</span><br><span class="line">&gt;&gt;&gt; pipenv --version</span><br><span class="line"></span><br><span class="line">3、切换到项目目录</span><br><span class="line">&gt;&gt;&gt; cd  python_project</span><br><span class="line"></span><br><span class="line">4、创建虚拟环境，可以指定用python2 或者 python3作为当前虚拟环境的python版本</span><br><span class="line">&gt;&gt;&gt; pipenv --two</span><br><span class="line">&gt;&gt;&gt; pipenv --three</span><br><span class="line">&gt;&gt;&gt; pipenv --python 3.7  # 也可以指定Python版本来创建虚拟环境</span><br><span class="line"></span><br><span class="line">4、激活当前虚拟环境</span><br><span class="line">&gt;&gt;&gt; pipenv shell</span><br><span class="line"></span><br><span class="line">5、在虚拟环境下给项目安装需要的模块，并将其写入到pipfile</span><br><span class="line">&gt;&gt;&gt; pipenv install django=1.11.11</span><br><span class="line"></span><br><span class="line">6、退出虚拟环境</span><br><span class="line">&gt;&gt;&gt; exit</span><br></pre></td></tr></table></figure><ul><li>pipenv其他常用操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1、查看项目位置</span><br><span class="line">&gt;&gt;&gt; pipenv --where</span><br><span class="line"></span><br><span class="line">2、查看虚拟环境位置</span><br><span class="line">&gt;&gt;&gt; pipenv --venv</span><br><span class="line"></span><br><span class="line">3、查看解释器信息</span><br><span class="line">&gt;&gt;&gt; pipenv --py</span><br><span class="line"></span><br><span class="line">4、查看包的依赖结构</span><br><span class="line">&gt;&gt;&gt; pipenv graph</span><br><span class="line"></span><br><span class="line">5、卸载模块</span><br><span class="line">&gt;&gt;&gt; pipenv uninstall django</span><br><span class="line"></span><br><span class="line">6、卸载全部包并从Pipfile中移除</span><br><span class="line">&gt;&gt;&gt; pipenv uninstall --all</span><br><span class="line"></span><br><span class="line">7、检查安全漏洞</span><br><span class="line">&gt;&gt;&gt; pipenv check</span><br></pre></td></tr></table></figure><h3 id="Windows下Python环境搭建"><a href="#Windows下Python环境搭建" class="headerlink" title="Windows下Python环境搭建"></a>Windows下Python环境搭建</h3><p>与大多数UNIX系统和服务不同，Windows系统没有预安装Python。为了使Python可用，很多年来CPython 团队已经编译了每一个 <a href="https://www.python.org/download/releases/" target="_blank" rel="noopener">release</a> 的Windows安装程序（MSI 包）。这些安装程序主要用于每个用户单独安装Python时，添加核心解释器和库。安装程序还可以为一台机器的所有用户安装，并且可以为应用程序本地分发提供单独的zip文件。</p><h4 id="安装包种类"><a href="#安装包种类" class="headerlink" title="安装包种类"></a>安装包种类</h4><blockquote><p><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a></p></blockquote><ul><li>32位/64位Python2.x安装包</li><li>32位/64位Python3.x安装包</li><li>web installer（网络安装包）是一个小的初始化工具，它将在安装过程中，根据需要自动下载所需的组件。</li><li>offline installer（离线安装包）内含默认安装所需的组件，可选择功能仍需要Internet连接下载</li></ul><h4 id="官网下载python安装包"><a href="#官网下载python安装包" class="headerlink" title="官网下载python安装包"></a>官网下载python安装包</h4><blockquote><p>此处以安装64位python3.x为例</p></blockquote><p><img src="/images/post_imgs/win_installer.png" alt></p><p>如果选择<code>立即安装</code>：</p><ul><li>不需要管理员权限</li><li>Python将安装到用户目录中</li><li>将根据第一页底部的选项安装</li><li>将安装标准库，测试套件，启动器和pip</li><li>如果选择将安装目录将添加到 <code>PATH</code></li><li>快捷方式仅对当前用户可见</li></ul><p>如果选择<code>自定义安装</code>：</p><ul><li>要安装的功能</li><li>安装位置</li><li>其他选项或安装后的操作。</li><li>如果要安装调试符号或二进制文件，需要使用此选项。</li></ul><h4 id="☆无UI安装"><a href="#☆无UI安装" class="headerlink" title="☆无UI安装"></a>☆无UI安装</h4><ul><li>要完全隐藏安装程序UI并静默安装Python，可以使用 <code>/quiet</code> 选项。</li><li>要跳过用户交互但仍然显示进度和错误，可以使用 <code>/passive</code> 选项。</li><li>可以通过 <code>/uninstall</code> 选项立即开始删除Python，即不会显示任何提示。</li><li>例如，要以静默方式全局安装默认的Python，使用以下命令:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python<span class="number">-3.7</span><span class="number">.4</span>.exe /quiet InstallAllUsers=<span class="number">1</span> PrependPath=<span class="number">1</span> Include_test=<span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><ul><li>在命令行输入<code>python --version</code>以验证是否安装成功</li></ul><p><img src="/images/post_imgs/version.png" alt></p><h3 id="Linux-CentOS7-x-下Python环境搭建"><a href="#Linux-CentOS7-x-下Python环境搭建" class="headerlink" title="Linux(CentOS7.x)下Python环境搭建"></a>Linux(CentOS7.x)下Python环境搭建</h3><p>由于CentOS等大多数Linux发行版中默认安装了python2.7版本，但是对于python开发者而言python3.x的许多特性才是未来，所以本文介绍如何在CentOS7.x操作系统下安装python3.x。</p><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><ul><li><p>在CentOS系统中安装python需要 GCC 编译器和 make 编译工具，其包含在 Development tools 软件组中，所以需要安装Development tools 软件组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum groupinstall "Development tools"</span><br></pre></td></tr></table></figure></li><li><p>Python3.x 源文件使用 zlib 格式打包，所以需要安装 zlib 软件包,同时python在编译安装时需要使用 zlib 的头文件和链接库，所以需要安装 zlib 的头文件和链接库 zlib-devel 软件包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install zlib zlib-devel</span><br></pre></td></tr></table></figure></li><li><p>Python3.x 有个内置模块 ctypes，它是 Python3.x 的外部函数库，需要使用系统外部函数库（libffi）的头文件和链接库，所以需要安装外部函数库（libffi）头文件和链接库 libffi-devel 软件包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install libffi-devel</span><br></pre></td></tr></table></figure></li><li><p>同时还需要一些其他python安装需要的模块，在此不一一做解释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure></li></ul><h4 id="下载安装包解压"><a href="#下载安装包解压" class="headerlink" title="下载安装包解压"></a>下载安装包解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 安装包下载目录</span><br><span class="line">wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xz</span><br><span class="line">tar -xvJf  Python-3.7.4.tar.xz</span><br></pre></td></tr></table></figure><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/python3  # 创建编译安装目录</span><br><span class="line">cd Python-3.7.4</span><br><span class="line">./configure --prefix=/usr/local/python3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h4 id="创建软链接"><a href="#创建软链接" class="headerlink" title="创建软链接"></a>创建软链接</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3</span><br><span class="line">ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3</span><br></pre></td></tr></table></figure><h4 id="验证安装-1"><a href="#验证安装-1" class="headerlink" title="验证安装"></a>验证安装</h4><ul><li>在命令行输入<code>python --version</code>以验证是否安装成功</li></ul><h3 id="MacOS下Python环境搭建"><a href="#MacOS下Python环境搭建" class="headerlink" title="MacOS下Python环境搭建"></a>MacOS下Python环境搭建</h3><p>MacOS附带Apple预安装的Python2.7。同样，对于python开发者而言，肯定是需要python3.x环境的，那么如果选择从python官网安装较新的 Python 版本，那么Mac上将安装两个不同版本的Python ，因此在使用过程中python解释器的路径与想要执行的python版本一致非常重要。</p><h4 id="官网下载python安装包-1"><a href="#官网下载python安装包-1" class="headerlink" title="官网下载python安装包"></a>官网下载python安装包</h4><blockquote><p><a href="https://www.python.org/downloads/release/python-374/" target="_blank" rel="noopener">https://www.python.org/downloads/release/python-374/</a></p></blockquote><p><img src="/images/post_imgs/mac-python.jpg" alt></p><h4 id="验证安装-2"><a href="#验证安装-2" class="headerlink" title="验证安装"></a>验证安装</h4><ul><li>在命令行输入<code>python --version</code>以验证是否安装成功</li></ul><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><ul><li><p>打开<code>.bash_profile</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>添加别名，使python命令指向python3.x解释器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias python=/usr/local/bin/python3.7</span><br></pre></td></tr></table></figure></li><li><p>生效文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python2-x-VS-Python3-x&quot;&gt;&lt;a href=&quot;#Python2-x-VS-Python3-x&quot; class=&quot;headerlink&quot; title=&quot;Python2.x VS Python3.x&quot;&gt;&lt;/a&gt;Python2.x VS Python3
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Go语言起源</title>
    <link href="https://elijahyg.github.io/2019/09/22/Go%E8%AF%AD%E8%A8%80%E8%B5%B7%E6%BA%90/"/>
    <id>https://elijahyg.github.io/2019/09/22/Go语言起源/</id>
    <published>2019-09-21T17:19:47.000Z</published>
    <updated>2019-09-21T17:30:43.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言的前世今生"><a href="#Go语言的前世今生" class="headerlink" title="Go语言的前世今生"></a>Go语言的前世今生</h2><h3 id="时代背景"><a href="#时代背景" class="headerlink" title="时代背景"></a>时代背景</h3><p>当今社会主流语言基本都诞生于上世纪90年代或者更早，例如Python(1991)、Java(1995)、C(1972)、C++(1983)、JavaScript(1995)、C#(2001)、PHP(1995)等等，同时我们也需要明白计算机硬件的发展，在2005年4月，英特尔的第一款双核处理器平台包括采用英特尔955X高速芯片组、主频为3.2GHz的英特尔奔腾处理器至尊版840，此款产品的问世标志着一个新时代来临了，那就是双核和多核处理器的时代。我们结合这些标志性的事件来看就不难发现，主流的服务端语言诞生的年代还都是单核年代，也就是说，当时的编程语言还是单核环境下，也就没有我们现在大家耳熟能详的并发编程概念。</p><p><a href="https://spectrum.ieee.org/static/interactive-the-top-programming-languages-2019?utm_source=spectrum-hero" title="2019年9月编程语言趋势" target="_blank" rel="noopener"><img src="/images/post_imgs/trending.png" alt="2019年9月编程语言趋势" title="2019年9月编程语言趋势"></a></p><hr><h3 id="Go语言的诞生"><a href="#Go语言的诞生" class="headerlink" title="Go语言的诞生"></a>Go语言的诞生</h3><p>Go（又称Golang）是Google开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。<br>罗伯特·格瑞史莫，罗勃·派克（Rob Pike）及肯·汤普逊于2007年9月开始设计Go，谷歌把Go作为一个20%项目开始研发，即让员工抽出本职工作之外时间的20%，投入在该项目上，稍后Ian Lance Taylor、Russ Cox加入项目。Go是基于Inferno操作系统所开发的。Go于2009年11月正式宣布推出，成为开放源代码项目，支持Linux、Mac OS X、Windows等操作系统。<br>对比上文所举的编程语言，在Go语言诞生的2007年，那时候已经处于双核时代，这就造就了Go语言在设计之初就考虑到了多核CPU下的程序运行，这也就造就了Go语言天生支持多核环境下编程的天赋技能。</p><hr><h3 id="Go语言的主要特性"><a href="#Go语言的主要特性" class="headerlink" title="Go语言的主要特性"></a>Go语言的主要特性</h3><p>Google是这样描述Go语言的：“<a href="https://techcrunch.com/2009/11/10/google-go-language/" title="试图将像Python这样的动态语言的工作开发速度与C或C ++等编译语言的性能和安全性结合起来。在我们的Go to date实验中，典型的构建感觉瞬间完成; 甚至大型二进制文件只需几秒钟即可编译。编译后的代码接近C的速度.Go旨在让您快速移动。我们希望Go成为一种优秀的系统编程语言，支持多处理和面向对象设计的全新轻量化，具有真正的闭包和反射等一些很酷的功能。" target="_blank" rel="noopener">试图将像Python这样的动态语言的工作开发速度与C或C ++等编译语言的性能和安全性结合起来。在我们的Go to date实验中，典型的构建感觉瞬间完成; 甚至大型二进制文件只需几秒钟即可编译。编译后的代码接近C的速度.Go旨在让您快速移动。我们希望Go成为一种优秀的系统编程语言，支持多处理和面向对象设计的全新轻量化，具有真正的闭包和反射等一些很酷的功能。</a>”</p><h4 id="GO语言的主要特性主要包括"><a href="#GO语言的主要特性主要包括" class="headerlink" title="GO语言的主要特性主要包括"></a>GO语言的主要特性主要包括</h4><ul><li>并发与协程</li><li>基于消息传递的通信方式</li><li>丰富实用的内置数据类型</li><li>函数多返回值</li><li>defer机制</li><li>反射(reflect)</li><li>高性能HTTP Server</li><li>工程管理</li><li>编程规范</li></ul><hr><h3 id="Go语言的应用前景"><a href="#Go语言的应用前景" class="headerlink" title="Go语言的应用前景"></a>Go语言的应用前景</h3><p>Go语言凭借着天生的并发优势，出众的性能以及亲民的语法，迅速的蹿红各类IT领域，在人工智能、云计算开发、容器虚拟化、⼤数据开发、数据分析及科学计算、运维开发、爬虫开发、游戏开发等领域都有着广泛的应用。</p><p>以下是应用Go语言的公司：<br><img src="/images/post_imgs/go_companies.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言的前世今生&quot;&gt;&lt;a href=&quot;#Go语言的前世今生&quot; class=&quot;headerlink&quot; title=&quot;Go语言的前世今生&quot;&gt;&lt;/a&gt;Go语言的前世今生&lt;/h2&gt;&lt;h3 id=&quot;时代背景&quot;&gt;&lt;a href=&quot;#时代背景&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Go系列" scheme="https://elijahyg.github.io/categories/Go%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>python语言起源</title>
    <link href="https://elijahyg.github.io/2019/09/16/python%E8%AF%AD%E8%A8%80%E8%B5%B7%E6%BA%90/"/>
    <id>https://elijahyg.github.io/2019/09/16/python语言起源/</id>
    <published>2019-09-16T15:31:15.000Z</published>
    <updated>2019-09-24T11:44:07.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python语言的前世今生"><a href="#Python语言的前世今生" class="headerlink" title="Python语言的前世今生"></a>Python语言的前世今生</h2><h3 id="Python的诞生"><a href="#Python的诞生" class="headerlink" title="Python的诞生"></a>Python的诞生</h3><p>python的创始人为吉多·范罗苏姆（Guido van Rossum）。1989年的圣诞节期间，吉多·范·罗苏姆（中文名字：龟叔）为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。  </p><p>（龟叔：2005年加入谷歌至2012年，2013年加入Dropbox直到现在，依然掌握着Python发展的核心方向，被称为仁慈的独裁者）。<br><img src="/images/post_imgs/Guido_van_Rossum.jpg" alt></p><hr><h3 id="Python版本发展"><a href="#Python版本发展" class="headerlink" title="Python版本发展"></a>Python版本发展</h3><ul><li>1989年，为了打发圣诞节假期，Guido开始写Python语言的编译器。Python这个名字，来自Guido所挚爱的电视剧Monty Python’s Flying Circus。他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，功能全面，易学易用，可拓展的语言。</li><li>1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。</li><li>Granddaddy of Python web frameworks, Zope 1 was released in 1999</li><li>Python 1.0 - January 1994 增加了 lambda, map, filter and reduce.</li><li>Python 2.0 - October 16, 2000，加入了内存回收机制，构成了现在Python语言框架的基础</li><li>Python 2.4 - November 30, 2004, 同年目前最流行的WEB框架Django 诞生</li><li>Python 2.5 - September 19, 2006</li><li>Python 2.6 - October 1, 2008</li><li>Python 2.7 - July 3, 2010</li><li><strong>In November 2014, it was announced that Python 2.7 would be supported until 2020, and reaffirmed that there would be no 2.8 release as users were expected to move to Python 3.4+ as soon as possible</strong></li><li>Python 3.0 - December 3, 2008</li><li>Python 3.1 - June 27, 2009</li><li>Python 3.2 - February 20, 2011</li><li>Python 3.3 - September 29, 2012</li><li>Python 3.4 - March 16, 2014</li><li>Python 3.5 - September 13, 2015</li><li>Python 3.6 - December 23, 2016</li><li>Python 3.7 - June 27, 2018</li></ul><hr><h3 id="Python的各类解释器"><a href="#Python的各类解释器" class="headerlink" title="Python的各类解释器"></a>Python的各类解释器</h3><ul><li>CPython：官方的解释器，也是使用最广的Python解释器。在CPython解释器下有GIL限制，一个CPU同一时刻只能运行一个线程。</li><li>IPython：是一种比较流行的解释器</li><li>PyPy：一种专注于执行速度的解释器。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。</li><li>Jython：运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行，Jython可以直接调用Java的各种函数库。</li><li>IronPython：和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</li><li>ZhPy：周蟒，支持使用繁/简中文语句编写程序的Python语言</li></ul><hr><h3 id="Python应用领域"><a href="#Python应用领域" class="headerlink" title="Python应用领域"></a>Python应用领域</h3><p>目前Python主要应用领域：</p><ul><li>云计算: 云计算最火的语言， 典型应用OpenStack</li><li>WEB开发: 众多优秀的WEB框架，众多大型网站均为Python开发，Youtube, Dropbox, 豆瓣等等，典型WEB框架有Django、Flask、Tornado、sanic</li><li>科学运算、人工智能: 典型库NumPy, SciPy, Matplotlib, Enthought librarys,pandas</li><li>系统运维: 运维人员必备语言</li><li>金融：量化交易，金融分析，在金融工程领域，Python不但在用，且用的最多，而且重要性逐年提高。</li><li>原因：作为动态语言的Python，语言结构清晰简单，库丰富，成熟稳定，科学计算和统计分析都很牛逼，生产效率远远高于c、c++、java,尤其擅长策略回测</li><li>图形GUI: PyQT、WxPython、TkInter</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python语言的前世今生&quot;&gt;&lt;a href=&quot;#Python语言的前世今生&quot; class=&quot;headerlink&quot; title=&quot;Python语言的前世今生&quot;&gt;&lt;/a&gt;Python语言的前世今生&lt;/h2&gt;&lt;h3 id=&quot;Python的诞生&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Python系列汇总</title>
    <link href="https://elijahyg.github.io/2019/09/16/Python%E7%B3%BB%E5%88%97/"/>
    <id>https://elijahyg.github.io/2019/09/16/Python系列/</id>
    <published>2019-09-16T15:21:04.000Z</published>
    <updated>2019-10-23T16:33:36.057Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python-基础篇"><a href="#Python-基础篇" class="headerlink" title="Python_基础篇"></a>Python_基础篇</h3><blockquote><p>文章若无特别指出均表示python3.x版本下</p></blockquote><p>前提准备</p><ul><li>01-<a href="http://elijahyg.github.io/2019/09/16/python%E8%AF%AD%E8%A8%80%E8%B5%B7%E6%BA%90/">语言起源</a></li><li>02-<a href="http://elijahyg.github.io/2019/09/25/python%20IDE%E4%BB%8B%E7%BB%8D&%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">IDE介绍 &amp; 环境搭建</a></li></ul><p>语法基础</p><ul><li>01-数据类型<ul><li><a href="http://elijahyg.github.io/2019/10/11/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E5%AD%97/">数字类型 Integer</a></li><li><a href="http://elijahyg.github.io/2019/10/13/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B/">布尔类型 Boolean</a></li><li><a href="http://elijahyg.github.io/2019/10/24/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/">字符串类型 String</a></li></ul></li><li>02-运算符</li><li>03-字符编码</li></ul><p>函数</p><p>模块 &amp; 包</p><p>面向对象</p><p>异常处理</p><p>文件操作</p><p>网络编程</p><p>并发编程</p><p>原理探究</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python-基础篇&quot;&gt;&lt;a href=&quot;#Python-基础篇&quot; class=&quot;headerlink&quot; title=&quot;Python_基础篇&quot;&gt;&lt;/a&gt;Python_基础篇&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;文章若无特别指出均表示python3.x版本下&lt;/
      
    
    </summary>
    
    
      <category term="Python系列" scheme="https://elijahyg.github.io/categories/Python%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>基于Github搭建Hexo个人博客</title>
    <link href="https://elijahyg.github.io/2019/09/13/%E5%9F%BA%E4%BA%8EGithub%E6%90%AD%E5%BB%BAHexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://elijahyg.github.io/2019/09/13/基于Github搭建Hexo个人博客/</id>
    <published>2019-09-13T15:46:44.000Z</published>
    <updated>2019-09-15T15:53:10.139Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><ul><li>Github账号</li><li>nodejs</li><li>npm</li><li>git for windows</li></ul><h3 id="二、创建github仓库"><a href="#二、创建github仓库" class="headerlink" title="二、创建github仓库"></a>二、创建github仓库</h3><ul><li>创建以<code>你的用户名.github.io</code>的仓库</li></ul><h3 id="三、域名绑定-可选"><a href="#三、域名绑定-可选" class="headerlink" title="三、域名绑定(可选)"></a>三、域名绑定(可选)</h3><h3 id="四、配置SSH-key"><a href="#四、配置SSH-key" class="headerlink" title="四、配置SSH key"></a>四、配置SSH key</h3><blockquote><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p></blockquote><ul><li><p>用git bash执行如下命令,如果提示：No such file or directory 说明你是第一次使用git<br><code>$ cd ~/. ssh #检查本机已存在的ssh密钥</code></p></li><li><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key；将刚复制的内容粘贴到key那里，title随便填，保存。<br><code>ssh-keygen -t rsa -C &quot;邮件地址&quot;</code></p></li><li><p>测试SSH-Key是否设置成功</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> ssh -T git@github.com # 注意邮箱地址不用改</span><br><span class="line"></span><br><span class="line"># 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</span><br><span class="line"># Hi 【用户名】! You’ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"># 看到这个信息说明SSH已配置成功！</span><br></pre></td></tr></table></figure><ul><li>配置全局用户名和邮箱</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;用户名&quot; # 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email &quot;邮箱&quot; # 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><h3 id="五、Hexo部分"><a href="#五、Hexo部分" class="headerlink" title="五、Hexo部分"></a>五、Hexo部分</h3><ul><li>安装Hexo</li></ul><p><code>npm install -g hexo</code></p><ul><li>初始化Hexo</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /d/workspaces/hexo/ # 工作目录</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><ul><li>部署、启动服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 生成</span><br><span class="line">hexo s # 启动服务</span><br></pre></td></tr></table></figure><ul><li>本地预览问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故</span><br></pre></td></tr></table></figure><h3 id="六、修改Hexo主题"><a href="#六、修改Hexo主题" class="headerlink" title="六、修改Hexo主题"></a>六、修改Hexo主题</h3><ul><li><p>官网主题<br><code>https://hexo.io/themes/</code></p></li><li><p>新推荐极简主题<br><code>https://github.com/aircloud/hexo-theme-aircloud</code></p></li><li><p>更换主题(以yilia为例)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/litten/hexo-theme-yilia</span><br><span class="line"></span><br><span class="line"> - 进入目录下载主题</span><br><span class="line">cd /d/workspaces/hexo/</span><br><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g来重新生成。</span><br><span class="line">如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。</span><br></pre></td></tr></table></figure><h3 id="七、上传到github"><a href="#七、上传到github" class="headerlink" title="七、上传到github"></a>七、上传到github</h3><ul><li>修改配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>安装插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 部署前还需要安装插件，git bash执行</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>提交至Github</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果一切正常，可以执行hexo d将代码上传至github，之后就可以打开https://用户名.github.io/浏览你的个人博客了</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="八、常用hexo命令"><a href="#八、常用hexo命令" class="headerlink" title="八、常用hexo命令"></a>八、常用hexo命令</h3><ul><li>常见命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help # 查看帮助</span><br><span class="line">hexo version #查看Hexo的版本</span><br></pre></td></tr></table></figure><ul><li>缩写</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><ul><li>组合命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure><h3 id="九、写博客"><a href="#九、写博客" class="headerlink" title="九、写博客"></a>九、写博客</h3><ul><li><p>写博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 定位到hexo目录，执行下面语句，hexo会帮我们在_posts下生成相关md文件，我们只需要打开这个文件就可以开始写博客了</span><br><span class="line">hexo new &apos;my-first-blog&apos;</span><br></pre></td></tr></table></figure></li><li><p>一般完整格式如下</p></li></ul><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、准备工作&quot;&gt;&lt;a href=&quot;#一、准备工作&quot; class=&quot;headerlink&quot; title=&quot;一、准备工作&quot;&gt;&lt;/a&gt;一、准备工作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Github账号&lt;/li&gt;
&lt;li&gt;nodejs&lt;/li&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;li&gt;g
      
    
    </summary>
    
    
      <category term="其他" scheme="https://elijahyg.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
</feed>
